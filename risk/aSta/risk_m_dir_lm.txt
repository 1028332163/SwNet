<org.apache.maven.cli.internal.extension.model.io.xpp3.CoreExtensionsXpp3Reader: float getFloatValue(java.lang.String,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.profiles.io.xpp3.ProfilesXpp3Reader: org.apache.maven.profiles.Activation parseActivation(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.cli.internal.extension.model.io.xpp3.CoreExtensionsXpp3Reader: long getLongValue(java.lang.String,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.cli.logging.Slf4jConfiguration$Level: org.apache.maven.cli.logging.Slf4jConfiguration$Level[] values()>
<org.apache.maven.toolchain.java.JavaToolchainFactory: org.apache.maven.toolchain.ToolchainPrivate createToolchain(org.apache.maven.toolchain.model.ToolchainModel)>
<org.apache.maven.artifact.resolver.DebugResolutionListener: void selectVersionFromRange(org.apache.maven.artifact.Artifact)>
<org.apache.maven.model.Build: org.apache.maven.model.Build clone()>
<org.apache.maven.model.io.xpp3.MavenXpp3Reader: org.apache.maven.model.Profile parseProfile(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.model.io.xpp3.MavenXpp3Writer: void writeDependencyManagement(org.apache.maven.model.DependencyManagement,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.plugin.DefaultPluginDescriptorCache: org.apache.maven.plugin.descriptor.PluginDescriptor get(org.apache.maven.plugin.PluginDescriptorCache$Key)>
<org.apache.maven.profiles.DefaultProfileManager: void <init>(org.codehaus.plexus.PlexusContainer,java.util.Properties)>
<org.apache.maven.model.merge.MavenModelMerger: void mergeModelBase_PluginRepositories(org.apache.maven.model.ModelBase,org.apache.maven.model.ModelBase,boolean,java.util.Map)>
<org.apache.maven.project.ProjectModelResolver: org.apache.maven.model.building.ModelSource resolveModel(org.apache.maven.model.Dependency)>
<org.apache.maven.session.scope.internal.SessionScope: void seed(java.lang.Class,java.lang.Object)>
<org.apache.maven.project.artifact.MavenMetadataSource: org.apache.maven.artifact.resolver.filter.ArtifactFilter createDependencyFilter(org.apache.maven.model.Dependency,org.apache.maven.artifact.resolver.filter.ArtifactFilter)>
<org.apache.maven.bridge.MavenRepositorySystem: org.apache.maven.artifact.Artifact createPluginArtifact(org.apache.maven.model.Plugin)>
<org.apache.maven.settings.io.xpp3.SettingsXpp3Reader: org.apache.maven.settings.TrackableBase parseTrackableBase(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.project.DefaultProjectBuildingRequest: org.apache.maven.project.DefaultProjectBuildingRequest setRepositoryMerging(org.apache.maven.project.ProjectBuildingRequest$RepositoryMerging)>
<org.apache.maven.repository.internal.DefaultModelResolver: org.apache.maven.model.building.ModelSource resolveModel(org.apache.maven.model.Dependency)>
<org.apache.maven.model.Dependency: void addExclusion(org.apache.maven.model.Exclusion)>
<org.apache.maven.usability.plugin.io.xpp3.ParamdocXpp3Writer: void writeExpression(org.apache.maven.usability.plugin.Expression,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.settings.crypto.DefaultSettingsDecrypter: org.apache.maven.settings.crypto.SettingsDecryptionResult decrypt(org.apache.maven.settings.crypto.SettingsDecryptionRequest)>
<org.apache.maven.artifact.resolver.DebugResolutionListener: void manageArtifactScope(org.apache.maven.artifact.Artifact,org.apache.maven.artifact.Artifact)>
<org.apache.maven.repository.internal.VersionsMetadataGenerator: void <init>(org.eclipse.aether.RepositorySystemSession,java.util.Collection)>
<org.apache.maven.model.merge.ModelMerger: void mergeModelBase_Dependencies(org.apache.maven.model.ModelBase,org.apache.maven.model.ModelBase,boolean,java.util.Map)>
<org.apache.maven.repository.internal.DefaultModelResolver: org.apache.maven.model.building.ModelSource resolveModel(org.apache.maven.model.Parent)>
<org.apache.maven.cli.internal.BootstrapCoreExtensionManager: org.apache.maven.extension.internal.CoreExtensionEntry createExtension(org.apache.maven.cli.internal.extension.model.CoreExtension,java.util.List)>
<org.apache.maven.cli.internal.extension.model.io.xpp3.CoreExtensionsXpp3Reader: byte getByteValue(java.lang.String,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.settings.building.SettingsBuildingException: java.lang.String toMessage(java.util.List)>
<org.apache.maven.profiles.DefaultProfileManager: void addProfiles(java.util.List)>
<org.apache.maven.profiles.io.xpp3.ProfilesXpp3Reader: org.apache.maven.profiles.Repository parseRepository(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.plugin.lifecycle.io.xpp3.LifecycleMappingsXpp3Reader: org.apache.maven.plugin.lifecycle.Lifecycle parseLifecycle(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator: void injectLifecycleOverlay(java.util.Map,org.apache.maven.plugin.MojoExecution,org.apache.maven.execution.MavenSession,org.apache.maven.project.MavenProject)>
<org.apache.maven.settings.io.xpp3.SettingsXpp3Writer: void write(java.io.Writer,org.apache.maven.settings.Settings)>
<org.apache.maven.artifact.resolver.DebugResolutionListener: void omitForCycle(org.apache.maven.artifact.Artifact)>
<org.apache.maven.repository.legacy.resolver.transform.DefaultArtifactTransformationManager: void transformForResolve(org.apache.maven.artifact.Artifact,org.apache.maven.artifact.repository.RepositoryRequest)>
<org.apache.maven.execution.DefaultMavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest addRemoteRepository(org.apache.maven.artifact.repository.ArtifactRepository)>
<org.apache.maven.bridge.MavenRepositorySystem: org.apache.maven.artifact.repository.Authentication getAuthentication(org.eclipse.aether.RepositorySystemSession,org.apache.maven.artifact.repository.ArtifactRepository)>
<org.apache.maven.plugin.lifecycle.io.xpp3.LifecycleMappingsXpp3Reader: org.apache.maven.plugin.lifecycle.LifecycleConfiguration read(java.io.InputStream)>
<org.apache.maven.execution.DefaultMavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest addProxy(org.apache.maven.settings.Proxy)>
<org.apache.maven.project.ProjectSorter: boolean hasMultipleProjects()>
<org.apache.maven.monitor.logging.DefaultLog: void warn(java.lang.Throwable)>
<org.apache.maven.model.io.xpp3.MavenXpp3Reader: org.apache.maven.model.FileSet parseFileSet(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.repository.metadata.DefaultGraphConflictResolver: org.apache.maven.repository.metadata.MetadataGraph resolveConflicts(org.apache.maven.repository.metadata.MetadataGraph,org.apache.maven.artifact.ArtifactScopeEnum)>
<org.apache.maven.repository.internal.DefaultVersionResolver: void merge(java.lang.String,java.util.Map,java.lang.String,java.lang.String,org.eclipse.aether.repository.ArtifactRepository)>
<org.apache.maven.model.io.xpp3.MavenXpp3Reader: org.apache.maven.model.RepositoryPolicy parseRepositoryPolicy(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.model.profile.DefaultProfileInjector$ProfileModelMerger: void mergePlugin_Executions(org.apache.maven.model.Plugin,org.apache.maven.model.Plugin,boolean,java.util.Map)>
<org.apache.maven.artifact.repository.metadata.AbstractRepositoryMetadata: void updateRepositoryMetadata(org.apache.maven.artifact.repository.ArtifactRepository,org.apache.maven.artifact.repository.ArtifactRepository)>
<org.apache.maven.model.io.xpp3.MavenXpp3Reader: org.apache.maven.model.Site parseSite(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.usability.plugin.io.xpp3.ParamdocXpp3Writer: void write(java.io.Writer,org.apache.maven.usability.plugin.ExpressionDocumentation)>
<org.apache.maven.model.CiManagement: org.apache.maven.model.InputLocation getLocation(java.lang.Object)>
<org.apache.maven.plugin.lifecycle.LifecycleConfiguration: void removeLifecycle(org.apache.maven.plugin.lifecycle.Lifecycle)>
<org.apache.maven.toolchain.model.io.xpp3.MavenToolchainsXpp3Reader: org.apache.maven.toolchain.model.ToolchainModel parseToolchainModel(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.project.MavenProject: org.apache.maven.model.Plugin getPlugin(java.lang.String)>
<org.apache.maven.cli.logging.Slf4jLogger: void info(java.lang.String,java.lang.Throwable)>
<org.slf4j.impl.SimpleLogger: void writeThrowable(java.lang.Throwable,java.io.PrintStream)>
<org.apache.maven.artifact.resolver.DebugResolutionListener: void includeArtifact(org.apache.maven.artifact.Artifact)>
<org.apache.maven.project.ModelUtils: void mergePluginLists(org.apache.maven.model.PluginContainer,org.apache.maven.model.PluginContainer,boolean)>
<org.apache.maven.repository.internal.DefaultVersionResolver: boolean isSafelyCacheable(org.eclipse.aether.RepositorySystemSession,org.eclipse.aether.artifact.Artifact)>
<org.apache.maven.cli.logging.Slf4jLogger: java.lang.String getName()>
<org.apache.maven.plugin.descriptor.PluginDescriptorBuilder: org.codehaus.plexus.configuration.PlexusConfiguration buildConfiguration(java.io.Reader)>
<org.apache.maven.toolchain.model.io.xpp3.MavenToolchainsXpp3Reader: void checkUnknownElement(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.project.MavenProject: java.util.Set getArtifacts()>
<org.apache.maven.project.ProjectSorter: org.apache.maven.project.MavenProject getTopLevelProject()>
<org.apache.maven.artifact.resolver.DefaultArtifactResolver: void dispose()>
<org.apache.maven.model.validation.DefaultModelValidator: void validateEffectiveDependencies(org.apache.maven.model.building.ModelProblemCollector,org.apache.maven.model.Model,java.util.List,boolean,org.apache.maven.model.building.ModelBuildingRequest)>
<org.apache.maven.artifact.repository.metadata.Versioning: void addSnapshotVersion(org.apache.maven.artifact.repository.metadata.SnapshotVersion)>
<org.apache.maven.project.DefaultDependencyResolutionResult: void addResolvedDependency(org.eclipse.aether.graph.Dependency)>
<org.apache.maven.cli.transfer.AbstractMavenTransferListener$FileSizeFormat: java.lang.String format(long,org.apache.maven.cli.transfer.AbstractMavenTransferListener$FileSizeFormat$ScaleUnit,boolean)>
<org.apache.maven.toolchain.model.io.xpp3.MavenToolchainsXpp3Reader: java.util.Date getDateValue(java.lang.String,java.lang.String,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlPullParser)>
<org.apache.maven.model.io.xpp3.MavenXpp3Reader: float getFloatValue(java.lang.String,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.artifact.resolver.ResolutionNode: void enable()>
<org.apache.maven.model.plugin.DefaultReportingConverter: void convertReporting(org.apache.maven.model.Model,org.apache.maven.model.building.ModelBuildingRequest,org.apache.maven.model.building.ModelProblemCollector)>
<org.apache.maven.artifact.DefaultArtifact: boolean hasClassifier()>
<org.apache.maven.artifact.repository.MavenArtifactRepository: boolean equals(java.lang.Object)>
<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.ArtifactVersion matchVersion(java.util.List)>
<org.apache.maven.model.building.DefaultModelBuilder: org.apache.maven.model.building.ModelBuildingResult build(org.apache.maven.model.building.ModelBuildingRequest)>
<org.apache.maven.project.DefaultMavenProjectBuilder: java.util.List normalizeToArtifactRepositories(java.util.List,org.apache.maven.project.ProjectBuildingRequest)>
<org.apache.maven.plugin.internal.DefaultMavenPluginManager: void populatePluginFields(java.lang.Object,org.apache.maven.plugin.descriptor.MojoDescriptor,org.codehaus.plexus.classworlds.realm.ClassRealm,org.codehaus.plexus.configuration.PlexusConfiguration,org.codehaus.plexus.component.configurator.expression.ExpressionEvaluator)>
<org.apache.maven.settings.io.xpp3.SettingsXpp3Reader: org.apache.maven.settings.Repository parseRepository(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.execution.DefaultMavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest addMirror(org.apache.maven.settings.Mirror)>
<org.apache.maven.model.Exclusion: void setLocation(java.lang.Object,org.apache.maven.model.InputLocation)>
<org.apache.maven.execution.scope.internal.MojoExecutionScope: void afterExecutionFailure(org.apache.maven.execution.MojoExecutionEvent)>
<org.apache.maven.lifecycle.internal.DependencyContext: void synchronizeWithProjectState()>
<org.apache.maven.repository.DelegatingLocalArtifactRepository: int hashCode()>
<org.apache.maven.cli.event.ExecutionEventLogger: void logStats(org.apache.maven.execution.MavenSession)>
<org.apache.maven.cli.internal.extension.model.io.xpp3.CoreExtensionsXpp3Reader: void checkUnknownElement(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.exception.DefaultExceptionHandler: org.apache.maven.exception.ExceptionSummary handle(org.apache.maven.project.ProjectBuildingResult)>
<org.apache.maven.model.merge.ModelMerger: void mergeConfigurationContainer_Configuration(org.apache.maven.model.ConfigurationContainer,org.apache.maven.model.ConfigurationContainer,boolean,java.util.Map)>
<org.apache.maven.plugin.MojoExecution: java.lang.String identify()>
<org.apache.maven.artifact.versioning.ComparableVersion$ListItem: java.lang.String toString()>
<org.apache.maven.cli.internal.extension.model.io.xpp3.CoreExtensionsXpp3Reader: boolean checkFieldWithDuplicate(org.codehaus.plexus.util.xml.pull.XmlPullParser,java.lang.String,java.lang.String,java.util.Set)>
<org.apache.maven.cli.MavenCli: org.codehaus.plexus.classworlds.realm.ClassRealm setupContainerRealm(org.codehaus.plexus.classworlds.ClassWorld,org.codehaus.plexus.classworlds.realm.ClassRealm,java.util.List,java.util.List)>
<org.apache.maven.model.io.xpp3.MavenXpp3Reader: org.apache.maven.model.ActivationFile parseActivationFile(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.repository.legacy.DefaultWagonManager: void cleanupTemporaryFiles(java.util.List)>
<org.apache.maven.cli.logging.impl.UnsupportedSlf4jBindingConfiguration: void <init>(java.lang.String,java.util.Map)>
<org.apache.maven.project.DefaultProjectBuilder: void initProject(org.apache.maven.project.MavenProject,java.util.Map,org.apache.maven.model.building.ModelBuildingResult,java.util.Map,org.apache.maven.project.ProjectBuildingRequest)>
<org.apache.maven.plugin.DefaultProjectArtifactsCache$CacheKey: int hash(java.lang.Object)>
<org.apache.maven.model.normalization.DefaultModelNormalizer: void injectDependencyDefaults(java.util.List)>
<org.apache.maven.repository.internal.ArtifactDescriptorUtils: org.eclipse.aether.artifact.Artifact toPomArtifact(org.eclipse.aether.artifact.Artifact)>
<org.apache.maven.project.DefaultProjectBuilder: java.util.List getProfileIds(java.util.List)>
<org.slf4j.impl.SimpleLoggerFactory: void reset()>
<org.apache.maven.repository.internal.DefaultArtifactDescriptorReader: org.apache.maven.repository.internal.DefaultArtifactDescriptorReader setVersionResolver(org.eclipse.aether.impl.VersionResolver)>
<org.apache.maven.repository.legacy.repository.DefaultArtifactRepositoryFactory: org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout getLayout(java.lang.String)>
<org.apache.maven.repository.MetadataResolutionResult: org.apache.maven.repository.MetadataResolutionResult addCircularDependencyException(org.apache.maven.artifact.resolver.CyclicDependencyException)>
<org.apache.maven.settings.io.xpp3.SettingsXpp3Reader: org.apache.maven.settings.Settings parseSettings(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.repository.legacy.LegacyRepositorySystem: org.apache.maven.artifact.repository.ArtifactRepository buildArtifactRepository(org.apache.maven.model.Repository)>
<org.apache.maven.repository.metadata.DefaultGraphConflictResolver: void visit(org.apache.maven.repository.metadata.MetadataGraphVertex,java.util.List,org.apache.maven.repository.metadata.MetadataGraph)>
<org.apache.maven.cli.logging.Slf4jLogger: void fatalError(java.lang.String)>
<org.apache.maven.profiles.Profile: void addPluginRepository(org.apache.maven.profiles.Repository)>
<org.apache.maven.model.io.xpp3.MavenXpp3Reader: org.apache.maven.model.PluginExecution parsePluginExecution(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.model.BuildBase: void addFilter(java.lang.String)>
<org.apache.maven.model.Contributor: org.apache.maven.model.Contributor clone()>
<org.apache.maven.execution.ReactorManager: org.apache.maven.execution.BuildFailure getBuildFailure(org.apache.maven.project.MavenProject)>
<org.apache.maven.toolchain.java.JavaToolchainImpl: java.lang.String findTool(java.lang.String)>
<org.apache.maven.model.io.xpp3.MavenXpp3Reader: org.apache.maven.model.License parseLicense(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.artifact.repository.metadata.ArtifactRepositoryMetadata: int getNature()>
<org.apache.maven.model.interpolation.BuildTimestampValueSource: void <init>(java.util.Date,java.util.Properties)>
<org.apache.maven.model.io.xpp3.MavenXpp3Reader: org.apache.maven.model.Repository parseRepository(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.model.io.xpp3.MavenXpp3Reader: org.apache.maven.model.PluginConfiguration parsePluginConfiguration(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.bridge.MavenRepositorySystem: void injectMirror(java.util.List,java.util.List)>
<org.apache.maven.project.artifact.MavenMetadataSource: org.apache.maven.project.ProjectBuilder getProjectBuilder()>
<org.apache.maven.settings.building.DefaultSettingsBuilder: org.apache.maven.settings.Settings interpolate(org.apache.maven.settings.Settings,org.apache.maven.settings.building.SettingsBuildingRequest,org.apache.maven.settings.building.SettingsProblemCollector)>
<org.apache.maven.plugin.lifecycle.io.xpp3.LifecycleMappingsXpp3Reader: void checkUnknownElement(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.bridge.MavenRepositorySystem: boolean matchPattern(org.apache.maven.artifact.repository.ArtifactRepository,java.lang.String)>
<org.apache.maven.repository.internal.DefaultVersionResolver: org.apache.maven.repository.internal.DefaultVersionResolver setMetadataResolver(org.eclipse.aether.impl.MetadataResolver)>
<org.apache.maven.repository.internal.ArtifactDescriptorReaderDelegate: void setArtifactProperties(org.eclipse.aether.resolution.ArtifactDescriptorResult,org.apache.maven.model.Model)>
<org.apache.maven.model.Model: void removeProfile(org.apache.maven.model.Profile)>
<org.apache.maven.toolchain.model.PersistedToolchains: void addToolchain(org.apache.maven.toolchain.model.ToolchainModel)>
<org.apache.maven.model.merge.ModelMerger: void mergeBuildBase_Filters(org.apache.maven.model.BuildBase,org.apache.maven.model.BuildBase,boolean,java.util.Map)>
<org.apache.maven.model.io.xpp3.MavenXpp3Reader: boolean checkFieldWithDuplicate(org.codehaus.plexus.util.xml.pull.XmlPullParser,java.lang.String,java.lang.String,java.util.Set)>
<org.apache.maven.model.Parent: void setLocation(java.lang.Object,org.apache.maven.model.InputLocation)>
<org.apache.maven.execution.MavenSession: java.util.List lookupList(java.lang.String)>
<org.apache.maven.model.Scm: org.apache.maven.model.InputLocation getLocation(java.lang.Object)>
<org.apache.maven.model.io.xpp3.MavenXpp3Writer: void writeProfile(org.apache.maven.model.Profile,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.artifact.repository.DefaultArtifactRepository: org.apache.maven.artifact.Artifact find(org.apache.maven.artifact.Artifact)>
<org.apache.maven.repository.legacy.LegacyRepositorySystem: void injectProxy(org.eclipse.aether.RepositorySystemSession,java.util.List)>
<org.apache.maven.model.ReportPlugin: org.apache.maven.model.ReportPlugin clone()>
<org.apache.maven.repository.internal.ArtifactDescriptorUtils: org.eclipse.aether.repository.RepositoryPolicy toRepositoryPolicy(org.apache.maven.model.RepositoryPolicy)>
<org.apache.maven.artifact.resolver.filter.IncludesArtifactFilter: int hashCode()>
<org.apache.maven.monitor.logging.DefaultLog: boolean isDebugEnabled()>
<org.apache.maven.repository.UserLocalArtifactRepository: org.apache.maven.artifact.Artifact find(org.apache.maven.artifact.Artifact)>
<org.apache.maven.project.interpolation.AbstractStringBasedModelInterpolator: void initialize()>
<org.apache.maven.model.MailingList: void addOtherArchive(java.lang.String)>
<org.apache.maven.model.merge.ModelMerger: void mergePatternSet_Excludes(org.apache.maven.model.PatternSet,org.apache.maven.model.PatternSet,boolean,java.util.Map)>
<org.apache.maven.plugin.CacheUtils: int hash(java.lang.Object)>
<org.apache.maven.project.MavenProject: java.util.List getRuntimeArtifacts()>
<org.apache.maven.profiles.io.xpp3.ProfilesXpp3Reader: org.apache.maven.profiles.Profile parseProfile(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.model.ModelBase: void removeDependency(org.apache.maven.model.Dependency)>
<org.slf4j.impl.StaticMarkerBinder: void <init>()>
<org.apache.maven.repository.internal.DefaultVersionResolver: void merge(org.eclipse.aether.artifact.Artifact,java.util.Map,org.apache.maven.artifact.repository.metadata.Versioning,org.eclipse.aether.repository.ArtifactRepository)>
<org.apache.maven.settings.io.DefaultSettingsReader: org.apache.maven.settings.Settings read(java.io.Reader,java.util.Map)>
<org.apache.maven.model.interpolation.AbstractStringBasedModelInterpolator$1: void <init>(org.apache.maven.model.interpolation.AbstractStringBasedModelInterpolator,boolean,java.io.File)>
<org.apache.maven.artifact.repository.metadata.DefaultRepositoryMetadataManager: void fixTimestamp(java.io.File,org.apache.maven.artifact.repository.metadata.Metadata,org.apache.maven.artifact.repository.metadata.Metadata)>
<org.apache.maven.repository.metadata.DefaultGraphConflictResolver: org.apache.maven.repository.metadata.MetadataGraphEdge cleanEdges(org.apache.maven.repository.metadata.MetadataGraphVertex,java.util.List,org.apache.maven.artifact.ArtifactScopeEnum)>
<org.apache.maven.repository.metadata.MetadataGraph: org.apache.maven.repository.metadata.MetadataGraph removeVertex(org.apache.maven.repository.metadata.MetadataGraphVertex)>
<org.apache.maven.execution.MavenSession: java.lang.Object lookup(java.lang.String,java.lang.String)>
<org.apache.maven.graph.DefaultGraphBuilder: void validateProjects(java.util.List)>
<org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver: void selectVersion(org.apache.maven.plugin.version.internal.DefaultPluginVersionResult,org.apache.maven.plugin.version.PluginVersionRequest,org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver$Versions)>
<org.apache.maven.model.io.xpp3.MavenXpp3ReaderEx: double getDoubleValue(java.lang.String,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.model.io.xpp3.MavenXpp3Reader: org.apache.maven.model.IssueManagement parseIssueManagement(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.cli.CLIManager: void <init>()>
<org.apache.maven.graph.DefaultGraphBuilder: java.util.List trimExcludedProjects(java.util.List,org.apache.maven.execution.MavenExecutionRequest)>
<org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator: void calculateForkedExecutions(org.apache.maven.plugin.MojoExecution,org.apache.maven.execution.MavenSession,org.apache.maven.project.MavenProject,java.util.Collection)>
<org.apache.maven.model.validation.DefaultModelValidator: void validate20RawResources(org.apache.maven.model.building.ModelProblemCollector,java.util.List,java.lang.String,org.apache.maven.model.building.ModelBuildingRequest)>
<org.apache.maven.model.Dependency: org.apache.maven.model.InputLocation getLocation(java.lang.Object)>
<org.apache.maven.plugin.descriptor.MojoDescriptor: org.codehaus.plexus.configuration.PlexusConfiguration getMojoConfiguration()>
<org.apache.maven.model.building.DefaultModelBuilder: void importDependencyManagement(org.apache.maven.model.Model,org.apache.maven.model.building.ModelBuildingRequest,org.apache.maven.model.building.DefaultModelProblemCollector,java.util.Collection)>
<org.apache.maven.model.Plugin: void removeExecution(org.apache.maven.model.PluginExecution)>
<org.apache.maven.configuration.internal.DefaultBeanConfigurator: void <init>()>
<org.apache.maven.repository.legacy.DefaultUpdateCheckManager: java.util.Date readLastUpdated(java.io.File,java.lang.String)>
<org.apache.maven.project.ProjectSorter: boolean isSpecificVersion(java.lang.String)>
<org.apache.maven.internal.aether.LoggingRepositoryListener: void <init>(org.codehaus.plexus.logging.Logger)>
<org.apache.maven.artifact.repository.metadata.DefaultRepositoryMetadataManager: org.apache.maven.artifact.repository.metadata.Metadata readMetadata(java.io.File)>
<org.apache.maven.usability.plugin.io.xpp3.ParamdocXpp3Reader: org.apache.maven.usability.plugin.ExpressionDocumentation parseExpressionDocumentation(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.execution.scope.internal.MojoExecutionScope$2: java.lang.Object get()>
<org.apache.maven.artifact.repository.LegacyLocalRepositoryManager: org.eclipse.aether.repository.LocalArtifactResult find(org.eclipse.aether.RepositorySystemSession,org.eclipse.aether.repository.LocalArtifactRequest)>
<org.apache.maven.model.ModelBase: void addDependency(org.apache.maven.model.Dependency)>
<org.apache.maven.plugin.lifecycle.io.xpp3.LifecycleMappingsXpp3Writer: void writePhase(org.apache.maven.plugin.lifecycle.Phase,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.artifact.resolver.ResolutionNode: java.util.List getDependencyTrail()>
<org.apache.maven.model.merge.ModelMerger: void mergeBuildBase_TestResources(org.apache.maven.model.BuildBase,org.apache.maven.model.BuildBase,boolean,java.util.Map)>
<org.apache.maven.repository.internal.DefaultModelCache: org.apache.maven.model.building.ModelCache newInstance(org.eclipse.aether.RepositorySystemSession)>
<org.apache.maven.model.io.xpp3.MavenXpp3Writer: void writeActivationFile(org.apache.maven.model.ActivationFile,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.lifecycle.DefaultLifecycles: java.lang.String getLifecyclePhaseList()>
<org.apache.maven.rtinfo.internal.DefaultRuntimeInformation: boolean isMavenVersion(java.lang.String)>
<org.apache.maven.model.MailingList: org.apache.maven.model.MailingList clone()>
<org.apache.maven.plugin.InvalidPluginDescriptorException: java.lang.String toMessage(java.lang.String,java.util.List)>
<org.apache.maven.session.scope.internal.SessionScope: void enter(org.apache.maven.session.scope.internal.SessionScope$Memento)>
<org.apache.maven.plugin.descriptor.MojoDescriptor: java.util.Map getParameterMap()>
<org.apache.maven.repository.legacy.LegacyRepositorySystem: void injectAuthentication(org.eclipse.aether.RepositorySystemSession,java.util.List)>
<org.apache.maven.model.Model: void removeLicense(org.apache.maven.model.License)>
<org.apache.maven.execution.ReactorManager: org.apache.maven.execution.BuildSuccess getBuildSuccess(org.apache.maven.project.MavenProject)>
<org.apache.maven.project.artifact.MavenMetadataSource: java.util.List aggregateRepositories(java.util.List,java.util.List)>
<org.apache.maven.lifecycle.internal.builder.multithreaded.ThreadOutputMuxer: java.io.PrintStream getThreadBoundPrintStream()>
<org.slf4j.impl.SimpleLoggerConfiguration$1: java.io.InputStream run()>
<org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph: java.util.List getRootSchedulableBuilds()>
<org.apache.maven.monitor.logging.DefaultLog: void debug(java.lang.CharSequence,java.lang.Throwable)>
<org.apache.maven.artifact.repository.metadata.DefaultRepositoryMetadataManager: void mergeMetadata(org.apache.maven.artifact.repository.metadata.RepositoryMetadata,java.util.List,org.apache.maven.artifact.repository.ArtifactRepository)>
<org.apache.maven.project.interpolation.AbstractStringBasedModelInterpolator: java.lang.String interpolate(java.lang.String,org.apache.maven.model.Model,java.io.File,org.apache.maven.project.ProjectBuilderConfiguration,boolean)>
<org.apache.maven.plugin.DefaultPluginRealmCache: org.apache.maven.plugin.PluginRealmCache$CacheRecord put(org.apache.maven.plugin.PluginRealmCache$Key,org.codehaus.plexus.classworlds.realm.ClassRealm,java.util.List)>
<org.apache.maven.RepositoryUtils: void toArtifacts(java.util.Collection,java.util.Collection,java.util.List,org.eclipse.aether.graph.DependencyFilter)>
<org.apache.maven.artifact.ArtifactUtils: java.lang.String key(java.lang.String,java.lang.String,java.lang.String)>
<org.apache.maven.repository.MetadataResolutionResult: org.apache.maven.repository.MetadataResolutionResult addError(java.lang.Exception)>
<org.apache.maven.extension.internal.CoreExtensionEntry: org.apache.maven.extension.internal.CoreExtensionEntry discoverFrom(org.codehaus.plexus.classworlds.realm.ClassRealm)>
<org.apache.maven.model.io.xpp3.MavenXpp3ReaderEx: org.apache.maven.model.Profile parseProfile(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean,org.apache.maven.model.InputSource)>
<org.apache.maven.plugin.internal.WagonExcluder: boolean selectDependency(org.eclipse.aether.graph.Dependency)>
<org.apache.maven.usability.plugin.ExpressionDocumentation: void removeExpression(org.apache.maven.usability.plugin.Expression)>
<org.apache.maven.model.building.DefaultModelBuilder: org.apache.maven.model.Model readModel(org.apache.maven.model.building.ModelSource,java.io.File,org.apache.maven.model.building.ModelBuildingRequest,org.apache.maven.model.building.DefaultModelProblemCollector)>
<org.apache.maven.repository.internal.DefaultVersionResolver: void <init>(org.eclipse.aether.impl.MetadataResolver,org.eclipse.aether.impl.SyncContextFactory,org.eclipse.aether.impl.RepositoryEventDispatcher,org.eclipse.aether.spi.log.LoggerFactory)>
<org.apache.maven.lifecycle.DefaultLifecycles: java.util.List getLifeCycles()>
<org.apache.maven.eventspy.internal.EventSpyRepositoryListener: void metadataResolving(org.eclipse.aether.RepositoryEvent)>
<org.apache.maven.repository.DefaultMirrorSelector: boolean matchPattern(org.apache.maven.artifact.repository.ArtifactRepository,java.lang.String)>
<org.apache.maven.model.IssueManagement: org.apache.maven.model.InputLocation getLocation(java.lang.Object)>
<org.apache.maven.repository.internal.MavenAetherModule: void configure()>
<org.apache.maven.lifecycle.internal.CompoundProjectExecutionListener: void afterProjectExecutionFailure(org.apache.maven.execution.ProjectExecutionEvent)>
<org.apache.maven.repository.metadata.ClasspathContainer: java.util.Iterator iterator()>
<org.apache.maven.monitor.logging.DefaultLog: void error(java.lang.Throwable)>
<org.apache.maven.execution.DefaultMavenExecutionRequest: void <init>()>
<org.apache.maven.DefaultMaven: void afterSessionEnd(java.util.Collection,org.apache.maven.execution.MavenSession)>
<org.apache.maven.ReactorReader: java.io.File findArtifact(org.eclipse.aether.artifact.Artifact)>
<org.apache.maven.project.validation.ModelValidationResult: java.lang.String getMessage(int)>
<org.apache.maven.model.PatternSet: void addExclude(java.lang.String)>
<org.apache.maven.repository.internal.VersionsMetadataGenerator: java.util.Collection finish(java.util.Collection)>
<org.apache.maven.project.DefaultProjectBuilder: java.lang.String findProfilesXml(org.apache.maven.model.building.ModelBuildingResult,java.util.Map)>
<org.apache.maven.model.Organization: void setLocation(java.lang.Object,org.apache.maven.model.InputLocation)>
<org.apache.maven.usability.plugin.io.xpp3.ParamdocXpp3Reader: double getDoubleValue(java.lang.String,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.lifecycle.mapping.DefaultLifecycleMapping: void initLifecycleMap()>
<org.apache.maven.lifecycle.internal.ProjectBuildList: org.apache.maven.lifecycle.internal.ProjectBuildList getByTaskSegment(org.apache.maven.lifecycle.internal.TaskSegment)>
<org.apache.maven.model.io.xpp3.MavenXpp3Writer: void writeCiManagement(org.apache.maven.model.CiManagement,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.cli.MavenCli: int execute(org.apache.maven.cli.CliRequest)>
<org.apache.maven.cli.logging.BaseSlf4jConfiguration: void setRootLoggerLevel(org.apache.maven.cli.logging.Slf4jConfiguration$Level)>
<org.apache.maven.project.ReactorModelPool: java.io.File get(java.lang.String,java.lang.String,java.lang.String)>
<org.apache.maven.artifact.repository.metadata.Versioning: void removeVersion(java.lang.String)>
<org.apache.maven.artifact.repository.LegacyLocalRepositoryManager$ArtifactMetadataAdapter: java.lang.String getRemoteFilename()>
<org.apache.maven.toolchain.DefaultToolchainManager: java.util.List getToolchains(org.apache.maven.execution.MavenSession,java.lang.String,java.util.Map)>
<org.apache.maven.artifact.ArtifactUtils: java.util.Collection copyArtifacts(java.util.Collection,java.util.Collection)>
<org.apache.maven.repository.internal.DefaultArtifactDescriptorReader: void initService(org.eclipse.aether.spi.locator.ServiceLocator)>
<org.apache.maven.artifact.resolver.ArtifactResolutionResult: boolean hasExceptions()>
<org.apache.maven.lifecycle.internal.builder.multithreaded.ThreadOutputMuxer: void <init>(org.apache.maven.lifecycle.internal.ProjectBuildList,java.io.PrintStream)>
<org.apache.maven.settings.SettingsUtils: org.apache.maven.settings.Profile convertToSettingsProfile(org.apache.maven.model.Profile)>
<org.apache.maven.repository.legacy.DefaultUpdateCheckManager: void <init>(org.codehaus.plexus.logging.Logger)>
<org.apache.maven.cli.MavenCli: int doMain(java.lang.String[],java.lang.String,java.io.PrintStream,java.io.PrintStream)>
<org.apache.maven.lifecycle.MavenExecutionPlan: java.util.List getMojoExecutions()>
<org.apache.maven.model.merge.MavenModelMerger: void mergePlugin_Executions(org.apache.maven.model.Plugin,org.apache.maven.model.Plugin,boolean,java.util.Map)>
<org.apache.maven.settings.Settings: void addProxy(org.apache.maven.settings.Proxy)>
<org.apache.maven.eventspy.internal.EventSpyRepositoryListener: void metadataInstalled(org.eclipse.aether.RepositoryEvent)>
<org.apache.maven.plugin.internal.DefaultPluginManager: org.apache.maven.plugin.descriptor.PluginDescriptor verifyPlugin(org.apache.maven.model.Plugin,org.apache.maven.project.MavenProject,org.apache.maven.settings.Settings,org.apache.maven.artifact.repository.ArtifactRepository)>
<org.apache.maven.repository.internal.DefaultArtifactDescriptorReader: void invalidDescriptor(org.eclipse.aether.RepositorySystemSession,org.eclipse.aether.RequestTrace,org.eclipse.aether.artifact.Artifact,java.lang.Exception)>
<org.apache.maven.cli.MavenCli: void toolchains(org.apache.maven.cli.CliRequest)>
<org.apache.maven.repository.legacy.TransferListenerAdapter: void transferCompleted(org.apache.maven.wagon.events.TransferEvent)>
<org.apache.maven.usability.plugin.io.xpp3.ParamdocXpp3Reader: byte getByteValue(java.lang.String,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.lifecycle.internal.LifecycleDebugLogger: void debugProjectPlan(org.apache.maven.project.MavenProject,org.apache.maven.lifecycle.MavenExecutionPlan)>
<org.apache.maven.usability.plugin.ExpressionDocumenter: java.lang.ClassLoader initializeDocLoader()>
<org.apache.maven.artifact.repository.metadata.io.xpp3.MetadataXpp3Reader: double getDoubleValue(java.lang.String,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.plugin.DefaultPluginDescriptorCache: void put(org.apache.maven.plugin.PluginDescriptorCache$Key,org.apache.maven.plugin.descriptor.PluginDescriptor)>
<org.apache.maven.configuration.DefaultBeanConfigurationRequest: org.apache.maven.configuration.DefaultBeanConfigurationRequest setConfiguration(org.apache.maven.model.Model,java.lang.String,java.lang.String,java.lang.String)>
<org.apache.maven.lifecycle.internal.DefaultLifecyclePluginAnalyzer: org.apache.maven.lifecycle.internal.DefaultLifecyclePluginAnalyzer$GoalSpec parseGoalSpec(java.lang.String)>
<org.apache.maven.model.io.xpp3.MavenXpp3ReaderEx: org.apache.maven.model.Parent parseParent(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean,org.apache.maven.model.InputSource)>
<org.slf4j.impl.MavenSlf4jSimpleFriend: void init()>
<org.apache.maven.model.merge.ModelMerger: void mergePluginExecution_Goals(org.apache.maven.model.PluginExecution,org.apache.maven.model.PluginExecution,boolean,java.util.Map)>
<org.apache.maven.model.io.DefaultModelWriter: void write(java.io.File,java.util.Map,org.apache.maven.model.Model)>
<org.apache.maven.model.profile.activation.OperatingSystemProfileActivator: boolean determineFamilyMatch(java.lang.String)>
<org.apache.maven.settings.io.xpp3.SettingsXpp3Reader: org.apache.maven.settings.IdentifiableBase parseIdentifiableBase(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.repository.UserLocalArtifactRepository: java.lang.String getId()>
<org.apache.maven.repository.legacy.DefaultUpdateCheckManager: void <init>()>
<org.apache.maven.graph.DefaultProjectDependencyGraph: java.util.List getUpstreamProjects(org.apache.maven.project.MavenProject,boolean)>
<org.apache.maven.project.ProjectModelResolver: void removeMatchingRepository(java.lang.Iterable,java.lang.String)>
<org.apache.maven.model.merge.ModelMerger: void mergePlugin_Executions(org.apache.maven.model.Plugin,org.apache.maven.model.Plugin,boolean,java.util.Map)>
<org.apache.maven.repository.legacy.DefaultWagonManager: void putArtifactMetadata(java.io.File,org.apache.maven.artifact.metadata.ArtifactMetadata,org.apache.maven.artifact.repository.ArtifactRepository)>
<org.apache.maven.repository.internal.LocalSnapshotMetadata: org.apache.maven.artifact.repository.metadata.Metadata createMetadata(org.eclipse.aether.artifact.Artifact,boolean)>
<org.apache.maven.repository.legacy.resolver.transform.SnapshotTransformation: java.lang.String constructVersion(org.apache.maven.artifact.repository.metadata.Versioning,java.lang.String)>
<org.apache.maven.project.interpolation.StringSearchModelInterpolator$InterpolateObjectAction: boolean isQualifiedForInterpolation(java.lang.reflect.Field,java.lang.Class)>
<org.apache.maven.execution.MavenSession: void setProjects(java.util.List)>
<org.apache.maven.toolchain.model.io.xpp3.MavenToolchainsXpp3Reader: int getIntegerValue(java.lang.String,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.repository.legacy.LegacyRepositorySystem: java.util.List getEffectiveRepositories(java.util.List)>
<org.apache.maven.plugin.PluginParameterException: java.lang.String buildDiagnosticMessage()>
<org.apache.maven.profiles.io.xpp3.ProfilesXpp3Reader: void checkUnknownAttribute(org.codehaus.plexus.util.xml.pull.XmlPullParser,java.lang.String,java.lang.String,boolean)>
<org.apache.maven.plugin.CacheUtils: boolean dependenciesEquals(java.util.List,java.util.List)>
<org.apache.maven.lifecycle.mapping.Lifecycle: void setPhases(java.util.Map)>
<org.apache.maven.plugin.DefaultPluginArtifactsCache: void assertUniqueKey(org.apache.maven.plugin.PluginArtifactsCache$Key)>
<org.apache.maven.execution.DefaultMavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest addInactiveProfiles(java.util.List)>
<org.apache.maven.lifecycle.internal.DefaultLifecycleTaskSegmentCalculator: java.util.List calculateTaskSegments(org.apache.maven.execution.MavenSession)>
<org.apache.maven.lifecycle.internal.builder.multithreaded.ThreadOutputMuxer$ConsolePrinter: void run()>
<org.apache.maven.repository.legacy.resolver.transform.AbstractVersionTransformation: java.lang.String resolveVersion(org.apache.maven.artifact.Artifact,org.apache.maven.artifact.repository.RepositoryRequest)>
<org.apache.maven.profiles.activation.OperatingSystemProfileActivator: boolean determineArchMatch(java.lang.String)>
<org.apache.maven.extension.internal.CoreExtensionEntry: org.apache.maven.extension.internal.CoreExtensionEntry discoverFrom(org.codehaus.plexus.classworlds.realm.ClassRealm,java.util.Collection)>
<org.apache.maven.repository.legacy.LegacyRepositorySystem: void injectMirror(org.eclipse.aether.RepositorySystemSession,java.util.List)>
<org.apache.maven.artifact.resolver.filter.AndArtifactFilter: void add(org.apache.maven.artifact.resolver.filter.ArtifactFilter)>
<org.apache.maven.model.plugin.DefaultReportingConverter: org.codehaus.plexus.util.xml.Xpp3Dom convert(org.apache.maven.model.ReportPlugin)>
<org.apache.maven.model.RepositoryBase: org.apache.maven.model.InputLocation getLocation(java.lang.Object)>
<org.apache.maven.repository.internal.DefaultVersionRangeResolver: void initService(org.eclipse.aether.spi.locator.ServiceLocator)>
<org.apache.maven.model.PatternSet: java.lang.String toString()>
<org.apache.maven.project.MavenProject: java.util.List getTestArtifacts()>
<org.apache.maven.lifecycle.internal.DependencyContext: boolean isResolutionRequiredForCurrentProject()>
<org.apache.maven.settings.io.DefaultSettingsReader: boolean isStrict(java.util.Map)>
<org.apache.maven.toolchain.model.io.xpp3.MavenToolchainsXpp3Reader: org.apache.maven.toolchain.model.PersistedToolchains read(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.model.io.xpp3.MavenXpp3Reader: org.apache.maven.model.ConfigurationContainer parseConfigurationContainer(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.project.ProjectBuildingException: java.lang.String createMessage(java.util.List)>
<org.apache.maven.model.management.DefaultDependencyManagementInjector$ManagementModelMerger: void mergeDependency_Exclusions(org.apache.maven.model.Dependency,org.apache.maven.model.Dependency,boolean,java.util.Map)>
<org.apache.maven.model.Notifier: void setLocation(java.lang.Object,org.apache.maven.model.InputLocation)>
<org.apache.maven.artifact.repository.metadata.GroupRepositoryMetadata: void addPluginMapping(java.lang.String,java.lang.String,java.lang.String)>
<org.apache.maven.artifact.repository.metadata.io.DefaultMetadataReader: org.apache.maven.artifact.repository.metadata.Metadata read(java.io.InputStream,java.util.Map)>
<org.apache.maven.artifact.resolver.DebugResolutionListener: void updateScope(org.apache.maven.artifact.Artifact,java.lang.String)>
<org.apache.maven.project.MavenProject: void addScriptSourceRoot(java.lang.String)>
<org.apache.maven.settings.Settings: org.apache.maven.settings.Mirror getMirrorOf(java.lang.String)>
<org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver: org.apache.maven.plugin.version.PluginVersionResult resolve(org.apache.maven.plugin.version.PluginVersionRequest)>
<org.apache.maven.model.io.xpp3.MavenXpp3ReaderEx: org.apache.maven.model.Model read(java.io.InputStream,boolean,org.apache.maven.model.InputSource)>
<org.apache.maven.plugin.descriptor.PluginDescriptor: void addMojo(org.apache.maven.plugin.descriptor.MojoDescriptor)>
<org.apache.maven.model.io.xpp3.MavenXpp3ReaderEx: org.apache.maven.model.Site parseSite(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean,org.apache.maven.model.InputSource)>
<org.apache.maven.plugin.MavenPluginValidator: boolean hasErrors()>
<org.apache.maven.project.DefaultProjectBuildingRequest: void setInactiveProfileIds(java.util.List)>
<org.apache.maven.execution.MavenSession: java.lang.Object lookup(java.lang.String)>
<org.slf4j.impl.SimpleLoggerConfiguration: void loadProperties()>
<org.apache.maven.model.io.xpp3.MavenXpp3ReaderEx: org.apache.maven.model.PluginContainer parsePluginContainer(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean,org.apache.maven.model.InputSource)>
<org.apache.maven.model.BuildBase: void removeResource(org.apache.maven.model.Resource)>
<org.apache.maven.monitor.logging.DefaultLog: boolean isErrorEnabled()>
<org.apache.maven.model.interpolation.AbstractStringBasedModelInterpolator: java.util.List createValueSources(org.apache.maven.model.Model,java.io.File,org.apache.maven.model.building.ModelBuildingRequest,org.apache.maven.model.building.ModelProblemCollector)>
<org.apache.maven.model.io.xpp3.MavenXpp3ReaderEx: org.apache.maven.model.PatternSet parsePatternSet(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean,org.apache.maven.model.InputSource)>
<org.apache.maven.monitor.logging.DefaultLog: void debug(java.lang.CharSequence)>
<org.apache.maven.repository.MetadataResolutionResult: org.apache.maven.repository.MetadataResolutionResult addVersionRangeViolation(java.lang.Exception)>
<org.apache.maven.model.Dependency: void removeExclusion(org.apache.maven.model.Exclusion)>
<org.apache.maven.model.building.Result: boolean hasErrors(java.lang.Iterable)>
<org.apache.maven.plugin.MojoExecution: void setForkedExecutions(java.lang.String,java.util.List)>
<org.apache.maven.model.io.xpp3.MavenXpp3Writer: void writeIssueManagement(org.apache.maven.model.IssueManagement,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.model.PluginContainer: org.apache.maven.model.PluginContainer clone()>
<org.apache.maven.model.CiManagement: org.apache.maven.model.CiManagement clone()>
<org.apache.maven.toolchain.model.io.xpp3.MavenToolchainsXpp3Writer: void writePersistedToolchains(org.apache.maven.toolchain.model.PersistedToolchains,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.repository.internal.LocalSnapshotMetadata: void merge(org.apache.maven.artifact.repository.metadata.Metadata)>
<org.apache.maven.lifecycle.internal.DefaultLifecycleTaskSegmentCalculator: java.util.List calculateTaskSegments(org.apache.maven.execution.MavenSession,java.util.List)>
<org.apache.maven.repository.internal.DefaultVersionResolver: void initService(org.eclipse.aether.spi.locator.ServiceLocator)>
<org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder: void build(org.apache.maven.execution.MavenSession,org.apache.maven.lifecycle.internal.ReactorContext,org.apache.maven.lifecycle.internal.ProjectBuildList,java.util.List,org.apache.maven.lifecycle.internal.ReactorBuildStatus)>
<org.apache.maven.execution.DefaultMavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest addPluginArtifactRepository(org.apache.maven.artifact.repository.ArtifactRepository)>
<org.apache.maven.artifact.repository.metadata.io.xpp3.MetadataXpp3Reader: java.lang.String getRequiredAttributeValue(java.lang.String,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.DefaultMaven: java.util.Collection getLifecycleParticipants(java.util.Collection)>
<org.apache.maven.artifact.versioning.VersionRange: java.lang.String toString()>
<org.apache.maven.model.io.xpp3.MavenXpp3ReaderEx: org.apache.maven.model.Extension parseExtension(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean,org.apache.maven.model.InputSource)>
<org.apache.maven.model.interpolation.StringSearchModelInterpolator: org.codehaus.plexus.interpolation.Interpolator createInterpolator()>
<org.apache.maven.project.inheritance.DefaultModelInheritanceAssembler: void assembleDistributionInheritance(org.apache.maven.model.Model,org.apache.maven.model.Model,java.lang.String,boolean)>
<org.apache.maven.cli.internal.extension.model.io.xpp3.CoreExtensionsXpp3Reader: org.apache.maven.cli.internal.extension.model.CoreExtensions parseCoreExtensions(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.project.ReactorModelCache: void put(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)>
<org.apache.maven.artifact.ArtifactStatus: void <init>(java.lang.String,int)>
<org.apache.maven.model.ReportSet: org.apache.maven.model.ReportSet clone()>
<org.apache.maven.model.plugin.DefaultReportingConverter: org.apache.maven.model.Plugin findSitePlugin(org.apache.maven.model.Build)>
<org.apache.maven.project.DefaultProjectBuildingHelper: org.apache.maven.project.ProjectRealmCache$CacheRecord createProjectRealm(org.apache.maven.project.MavenProject,org.apache.maven.model.Model,org.apache.maven.project.ProjectBuildingRequest)>
<org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator: void <init>(org.apache.maven.plugin.BuildPluginManager,org.apache.maven.lifecycle.DefaultLifecycles,org.apache.maven.lifecycle.internal.MojoDescriptorCreator,org.apache.maven.lifecycle.internal.LifecyclePluginResolver)>
<org.apache.maven.model.ModelBase: void removePluginRepository(org.apache.maven.model.Repository)>
<org.apache.maven.repository.internal.DefaultArtifactDescriptorReader: org.apache.maven.repository.internal.DefaultArtifactDescriptorReader setRemoteRepositoryManager(org.eclipse.aether.impl.RemoteRepositoryManager)>
<org.apache.maven.model.profile.activation.JdkVersionProfileActivator: void addZeroTokens(java.util.List,int)>
<org.apache.maven.cli.internal.BootstrapCoreExtensionManager: java.util.List resolveCoreExtensions(org.eclipse.aether.RepositorySystemSession,java.util.List,java.util.Set,java.util.List)>
<org.apache.maven.repository.internal.MavenMetadata: void write(java.io.File,org.apache.maven.artifact.repository.metadata.Metadata)>
<org.slf4j.impl.SimpleLogger: void <init>(java.lang.String)>
<org.apache.maven.repository.internal.RelocatedArtifact: java.lang.String getClassifier()>
<org.apache.maven.monitor.logging.DefaultLog: void warn(java.lang.CharSequence)>
<org.apache.maven.repository.internal.DefaultVersionRangeResolver: org.apache.maven.repository.internal.DefaultVersionRangeResolver setSyncContextFactory(org.eclipse.aether.impl.SyncContextFactory)>
<org.apache.maven.repository.DefaultMirrorSelector: org.apache.maven.settings.Mirror getMirror(org.apache.maven.artifact.repository.ArtifactRepository,java.util.List)>
<org.apache.maven.artifact.repository.metadata.io.xpp3.MetadataXpp3Reader: byte getByteValue(java.lang.String,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.model.ConfigurationContainer: void setLocation(java.lang.Object,org.apache.maven.model.InputLocation)>
<org.apache.maven.artifact.resolver.filter.OrArtifactFilter: int hashCode()>
<org.apache.maven.settings.io.xpp3.SettingsXpp3Reader: long getLongValue(java.lang.String,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver: org.apache.maven.plugin.version.PluginVersionResult resolveFromProject(org.apache.maven.plugin.version.PluginVersionRequest,java.util.List)>
<org.apache.maven.cli.transfer.Slf4jMavenTransferListener: void <init>(org.slf4j.Logger)>
<org.apache.maven.project.DefaultProjectBuildingRequest: org.apache.maven.project.ProjectBuildingRequest setRemoteRepositories(java.util.List)>
<org.apache.maven.profiles.activation.JdkPrefixProfileActivator: boolean canDetectActivation(org.apache.maven.model.Profile)>
<org.apache.maven.classrealm.ArtifactClassRealmConstituent: java.lang.String getVersion()>
<org.apache.maven.cli.internal.extension.model.io.xpp3.CoreExtensionsXpp3Reader: void checkUnknownAttribute(org.codehaus.plexus.util.xml.pull.XmlPullParser,java.lang.String,java.lang.String,boolean)>
<org.apache.maven.repository.legacy.LegacyRepositorySystem: org.apache.maven.artifact.Artifact createDependencyArtifact(org.apache.maven.model.Dependency)>
<org.apache.maven.repository.metadata.MetadataGraphEdge: boolean objectsEqual(java.lang.Object,java.lang.Object)>
<org.apache.maven.model.Scm: void setLocation(java.lang.Object,org.apache.maven.model.InputLocation)>
<org.apache.maven.model.InputLocation: void setLocation(java.lang.Object,org.apache.maven.model.InputLocation)>
<org.apache.maven.project.artifact.DefaultMavenMetadataCache: void put(org.apache.maven.project.artifact.DefaultMavenMetadataCache$CacheKey,org.apache.maven.artifact.metadata.ResolutionGroup)>
<org.apache.maven.cli.logging.Slf4jLogger: void debug(java.lang.String,java.lang.Throwable)>
<org.apache.maven.model.plugin.DefaultPluginConfigurationExpander: void expand(java.util.List)>
<org.slf4j.impl.SimpleLoggerConfiguration: void init()>
<org.apache.maven.repository.internal.LocalSnapshotMetadataGenerator: java.util.Collection prepare(java.util.Collection)>
<org.apache.maven.repository.internal.DefaultArtifactDescriptorReader: org.apache.maven.repository.internal.DefaultArtifactDescriptorReader setLoggerFactory(org.eclipse.aether.spi.log.LoggerFactory)>
<org.apache.maven.model.io.xpp3.MavenXpp3ReaderEx: org.apache.maven.model.FileSet parseFileSet(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean,org.apache.maven.model.InputSource)>
<org.apache.maven.cli.event.ExecutionEventLogger: void mojoStarted(org.apache.maven.execution.ExecutionEvent)>
<org.apache.maven.model.io.xpp3.MavenXpp3Writer: void writeOrganization(org.apache.maven.model.Organization,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.settings.io.xpp3.SettingsXpp3Reader: float getFloatValue(java.lang.String,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.settings.io.xpp3.SettingsXpp3Reader: org.apache.maven.settings.ActivationFile parseActivationFile(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.model.io.xpp3.MavenXpp3Reader: long getLongValue(java.lang.String,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.model.io.xpp3.MavenXpp3ReaderEx: org.apache.maven.model.Activation parseActivation(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean,org.apache.maven.model.InputSource)>
<org.apache.maven.model.Contributor: void removeRole(java.lang.String)>
<org.apache.maven.profiles.io.xpp3.ProfilesXpp3Reader: void checkUnknownElement(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.model.building.Result: org.apache.maven.model.building.Result success(java.lang.Object,org.apache.maven.model.building.Result[])>
<org.apache.maven.classrealm.DefaultClassRealmManager: org.codehaus.plexus.classworlds.realm.ClassRealm createProjectRealm(org.apache.maven.model.Model,java.util.List)>
<org.apache.maven.cli.logging.Slf4jLogger: void debug(java.lang.String)>
<org.apache.maven.usability.plugin.io.xpp3.ParamdocXpp3Reader: org.apache.maven.usability.plugin.Expression parseExpression(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.repository.legacy.DefaultWagonManager: void connectWagon(org.apache.maven.wagon.Wagon,org.apache.maven.artifact.repository.ArtifactRepository)>
<org.apache.maven.artifact.repository.metadata.io.xpp3.MetadataXpp3Reader: boolean checkFieldWithDuplicate(org.codehaus.plexus.util.xml.pull.XmlPullParser,java.lang.String,java.lang.String,java.util.Set)>
<org.apache.maven.settings.io.DefaultSettingsWriter: void write(java.io.OutputStream,java.util.Map,org.apache.maven.settings.Settings)>
<org.apache.maven.model.merge.ModelMerger: void mergeModel_Licenses(org.apache.maven.model.Model,org.apache.maven.model.Model,boolean,java.util.Map)>
<org.apache.maven.lifecycle.DefaultLifecycleExecutor: org.apache.maven.lifecycle.MavenExecutionPlan calculateExecutionPlan(org.apache.maven.execution.MavenSession,boolean,java.lang.String[])>
<org.apache.maven.lifecycle.internal.ProjectBuildList: boolean isEmpty()>
<org.apache.maven.cli.logging.Slf4jLogger: void error(java.lang.String,java.lang.Throwable)>
<org.apache.maven.monitor.logging.DefaultLog: void warn(java.lang.CharSequence,java.lang.Throwable)>
<org.apache.maven.model.path.DefaultModelPathTranslator: void alignToBaseDirectory(org.apache.maven.model.Model,java.io.File,org.apache.maven.model.building.ModelBuildingRequest)>
<org.apache.maven.cli.MavenCli: void logSummary(org.apache.maven.exception.ExceptionSummary,java.util.Map,java.lang.String,boolean)>
<org.apache.maven.execution.scope.internal.MojoExecutionScopeModule: void <init>(org.apache.maven.execution.scope.internal.MojoExecutionScope)>
<org.apache.maven.repository.internal.RelocatedArtifact: java.io.File getFile()>
<org.apache.maven.repository.legacy.DefaultWagonManager: void releaseWagon(java.lang.String,org.apache.maven.wagon.Wagon)>
<org.apache.maven.plugin.lifecycle.io.xpp3.LifecycleMappingsXpp3Writer: void writeExecution(org.apache.maven.plugin.lifecycle.Execution,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.execution.ReactorManager: java.util.Map getPluginContext(org.apache.maven.plugin.descriptor.PluginDescriptor,org.apache.maven.project.MavenProject)>
<org.apache.maven.cli.MavenCli: org.codehaus.plexus.PlexusContainer container(org.apache.maven.cli.CliRequest)>
<org.apache.maven.model.ReportSet: void removeReport(java.lang.String)>
<org.apache.maven.classrealm.ArtifactClassRealmConstituent: java.io.File getFile()>
<org.apache.maven.project.inheritance.DefaultModelInheritanceAssembler: void mergeReportPluginLists(org.apache.maven.model.Reporting,org.apache.maven.model.Reporting,boolean)>
<org.apache.maven.repository.legacy.ChecksumFailedException: void <init>(java.lang.String)>
<org.apache.maven.plugin.DefaultPluginArtifactsCache: void flush()>
<org.apache.maven.settings.Profile: void addRepository(org.apache.maven.settings.Repository)>
<org.apache.maven.execution.ExecutionEvent$Type: org.apache.maven.execution.ExecutionEvent$Type[] values()>
<org.apache.maven.repository.internal.LocalSnapshotMetadata: org.eclipse.aether.metadata.Metadata$Nature getNature()>
<org.apache.maven.lifecycle.internal.LifecycleDependencyResolver: boolean areAllDependenciesInReactor(java.util.Collection,java.util.Collection)>
<org.apache.maven.model.PluginExecution: org.apache.maven.model.PluginExecution clone()>
<org.apache.maven.model.io.xpp3.MavenXpp3Reader: org.apache.maven.model.Extension parseExtension(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.toolchain.DefaultToolchain: boolean matchesRequirements(java.util.Map)>
<org.apache.maven.toolchain.model.PersistedToolchains: void removeToolchain(org.apache.maven.toolchain.model.ToolchainModel)>
<org.apache.maven.repository.legacy.DefaultWagonManager: org.apache.maven.wagon.proxy.ProxyInfo proxyInfo(org.apache.maven.artifact.repository.ArtifactRepository)>
<org.apache.maven.project.ProjectModelResolver$1: boolean apply(org.eclipse.aether.repository.RemoteRepository)>
<org.apache.maven.model.merge.ModelMerger: void mergeModel_Developers(org.apache.maven.model.Model,org.apache.maven.model.Model,boolean,java.util.Map)>
<org.apache.maven.project.path.DefaultPathTranslator: void unalignFromBaseDirectory(org.apache.maven.model.Model,java.io.File)>
<org.apache.maven.execution.DefaultMavenExecutionRequestPopulator: void localRepository(org.apache.maven.execution.MavenExecutionRequest)>
<org.apache.maven.model.io.xpp3.MavenXpp3ReaderEx: org.apache.maven.model.IssueManagement parseIssueManagement(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean,org.apache.maven.model.InputSource)>
<org.apache.maven.toolchain.model.io.xpp3.MavenToolchainsXpp3Reader: org.apache.maven.toolchain.model.TrackableBase parseTrackableBase(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.profiles.DefaultProfileManager: void explicitlyActivate(java.lang.String)>
<org.apache.maven.plugin.DefaultBuildPluginManager: void executeMojo(org.apache.maven.execution.MavenSession,org.apache.maven.plugin.MojoExecution)>
<org.apache.maven.cli.internal.extension.model.io.xpp3.CoreExtensionsXpp3Reader: java.lang.String getRequiredAttributeValue(java.lang.String,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.artifact.repository.metadata.io.xpp3.MetadataXpp3Reader: long getLongValue(java.lang.String,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.slf4j.impl.SimpleLogger: void formatAndLog(int,java.lang.String,java.lang.Object[])>
<org.apache.maven.plugin.DefaultPluginDescriptorCache$CacheKey: void <init>(org.apache.maven.model.Plugin,java.util.List,org.eclipse.aether.RepositorySystemSession)>
<org.apache.maven.lifecycle.MavenExecutionPlan: int size()>
<org.apache.maven.execution.scope.internal.MojoExecutionScopeModule: void <init>(org.codehaus.plexus.PlexusContainer)>
<org.apache.maven.model.io.xpp3.MavenXpp3Reader: org.apache.maven.model.Scm parseScm(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.model.Model: org.apache.maven.model.Model clone()>
<org.apache.maven.execution.MavenSession: java.util.Map lookupMap(java.lang.String)>
<org.apache.maven.plugin.descriptor.MojoDescriptor: void <init>()>
<org.apache.maven.model.io.xpp3.MavenXpp3ReaderEx: java.util.Date getDateValue(java.lang.String,java.lang.String,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlPullParser)>
<org.apache.maven.settings.io.xpp3.SettingsXpp3Reader: org.apache.maven.settings.Server parseServer(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.repository.internal.DefaultVersionResolver: org.apache.maven.repository.internal.DefaultVersionResolver setLoggerFactory(org.eclipse.aether.spi.log.LoggerFactory)>
<org.apache.maven.monitor.logging.DefaultLog: void info(java.lang.CharSequence)>
<org.apache.maven.artifact.repository.metadata.Metadata: boolean merge(org.apache.maven.artifact.repository.metadata.Metadata)>
<org.apache.maven.cli.internal.extension.model.io.xpp3.CoreExtensionsXpp3Reader: java.util.Date getDateValue(java.lang.String,java.lang.String,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlPullParser)>
<org.apache.maven.repository.internal.DefaultVersionResolver: org.apache.maven.artifact.repository.metadata.Versioning readVersions(org.eclipse.aether.RepositorySystemSession,org.eclipse.aether.RequestTrace,org.eclipse.aether.metadata.Metadata,org.eclipse.aether.repository.ArtifactRepository,org.eclipse.aether.resolution.VersionResult)>
<org.apache.maven.artifact.repository.DefaultArtifactRepositoryFactory: boolean isLocalRepository(org.apache.maven.artifact.repository.ArtifactRepository)>
<org.apache.maven.model.merge.MavenModelMerger: void mergeModelBase_Repositories(org.apache.maven.model.ModelBase,org.apache.maven.model.ModelBase,boolean,java.util.Map)>
<org.apache.maven.artifact.repository.LegacyLocalRepositoryManager: java.lang.String getPathForLocalArtifact(org.eclipse.aether.artifact.Artifact)>
<org.apache.maven.execution.SettingsAdapter: java.util.List getProfiles()>
<org.apache.maven.model.merge.ModelMerger: void mergeModel_Profiles(org.apache.maven.model.Model,org.apache.maven.model.Model,boolean,java.util.Map)>
<org.apache.maven.bridge.MavenRepositorySystem: void injectAuthentication(org.eclipse.aether.RepositorySystemSession,java.util.List)>
<org.apache.maven.repository.DelegatingLocalArtifactRepository: java.lang.String getId()>
<org.apache.maven.artifact.repository.metadata.io.xpp3.MetadataXpp3Reader: org.apache.maven.artifact.repository.metadata.Metadata read(java.io.InputStream,boolean)>
<org.apache.maven.model.validation.DefaultModelValidator: void validate30RawProfileActivation(org.apache.maven.model.building.ModelProblemCollector,org.apache.maven.model.Activation,java.lang.String,java.lang.String,org.apache.maven.model.building.ModelBuildingRequest)>
<org.apache.maven.model.validation.DefaultModelValidator: org.apache.maven.model.InputLocation getLocation(java.lang.String,org.apache.maven.model.InputLocationTracker)>
<org.apache.maven.model.io.xpp3.MavenXpp3ReaderEx: int nextTag(org.codehaus.plexus.util.xml.pull.XmlPullParser)>
<org.apache.maven.model.building.DefaultModelBuilder: org.apache.maven.model.Model interpolateModel(org.apache.maven.model.Model,org.apache.maven.model.building.ModelBuildingRequest,org.apache.maven.model.building.ModelProblemCollector)>
<org.apache.maven.model.building.DefaultModelBuilder: void checkPluginVersions(java.util.List,org.apache.maven.model.building.ModelBuildingRequest,org.apache.maven.model.building.ModelProblemCollector)>
<org.apache.maven.settings.merge.MavenSettingsMerger: void shallowMergeById(java.util.List,java.util.List,java.lang.String)>
<org.apache.maven.usability.plugin.io.xpp3.ParamdocXpp3Reader: float getFloatValue(java.lang.String,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.artifact.resolver.filter.ExclusionSetFilter: boolean include(org.apache.maven.artifact.Artifact)>
<org.apache.maven.session.scope.internal.SessionScopeModule: void configure()>
<org.apache.maven.artifact.repository.LegacyLocalRepositoryManager$ArtifactRepositoryAdapter: java.lang.String getUrl()>
<org.apache.maven.artifact.DefaultArtifact: void updateVersion(java.lang.String,org.apache.maven.artifact.repository.ArtifactRepository)>
<org.apache.maven.classrealm.ArtifactClassRealmConstituent: java.lang.String getType()>
<org.apache.maven.repository.MetadataGraphNode: org.apache.maven.repository.MetadataGraphNode addIncident(org.apache.maven.repository.MetadataGraphNode)>
<org.apache.maven.model.validation.DefaultModelValidator: void validate20RawDependencies(org.apache.maven.model.building.ModelProblemCollector,java.util.List,java.lang.String,org.apache.maven.model.building.ModelBuildingRequest)>
<org.slf4j.impl.MavenSimpleLogger: java.lang.String renderLevel(int)>
<org.apache.maven.project.artifact.MavenMetadataSource: boolean isNonTransferrablePom(java.lang.Exception)>
<org.apache.maven.execution.DefaultMavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest addServer(org.apache.maven.settings.Server)>
<org.apache.maven.artifact.DefaultArtifact: java.util.Collection getMetadataList()>
<org.apache.maven.model.io.xpp3.MavenXpp3Writer: void writePatternSet(org.apache.maven.model.PatternSet,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.plugin.internal.DefaultMavenPluginManager: java.lang.Object getConfiguredMojo(java.lang.Class,org.apache.maven.execution.MavenSession,org.apache.maven.plugin.MojoExecution)>
<org.apache.maven.cli.internal.extension.model.io.xpp3.CoreExtensionsXpp3Reader: int nextTag(org.codehaus.plexus.util.xml.pull.XmlPullParser)>
<org.apache.maven.settings.Settings: org.apache.maven.settings.Server getServer(java.lang.String)>
<org.apache.maven.settings.io.xpp3.SettingsXpp3Reader: int getIntegerValue(java.lang.String,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.model.ModelBase: void removeRepository(org.apache.maven.model.Repository)>
<org.apache.maven.profiles.ProfilesConversionUtils: org.apache.maven.model.Profile convertFromProfileXmlProfile(org.apache.maven.profiles.Profile)>
<org.apache.maven.repository.legacy.DefaultWagonManager: org.apache.maven.wagon.observers.ChecksumObserver addChecksumObserver(org.apache.maven.wagon.Wagon,java.lang.String)>
<org.apache.maven.bridge.MavenRepositorySystem: org.apache.maven.settings.Mirror getMirror(org.apache.maven.artifact.repository.ArtifactRepository,java.util.List)>
<org.apache.maven.graph.FilteredProjectDependencyGraph: java.util.List applyFilter(java.util.Collection)>
<org.apache.maven.model.normalization.DefaultModelNormalizer: void mergeDuplicates(org.apache.maven.model.Model,org.apache.maven.model.building.ModelBuildingRequest,org.apache.maven.model.building.ModelProblemCollector)>
<org.apache.maven.usability.plugin.io.xpp3.ParamdocXpp3Reader: boolean checkFieldWithDuplicate(org.codehaus.plexus.util.xml.pull.XmlPullParser,java.lang.String,java.lang.String,java.util.Set)>
<org.apache.maven.model.io.xpp3.MavenXpp3ReaderEx: org.apache.maven.model.Model read(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean,org.apache.maven.model.InputSource)>
<org.apache.maven.repository.internal.DefaultVersionRangeResolver: org.apache.maven.repository.internal.DefaultVersionRangeResolver setRepositoryEventDispatcher(org.eclipse.aether.impl.RepositoryEventDispatcher)>
<org.apache.maven.model.merge.ModelMerger: void mergeDependencyManagement_Dependencies(org.apache.maven.model.DependencyManagement,org.apache.maven.model.DependencyManagement,boolean,java.util.Map)>
<org.apache.maven.project.interpolation.AbstractStringBasedModelInterpolator$1: void <init>(org.apache.maven.project.interpolation.AbstractStringBasedModelInterpolator,boolean,java.io.File)>
<org.apache.maven.project.ReactorModelPool: void put(java.lang.String,java.lang.String,java.lang.String,java.io.File)>
<org.apache.maven.model.io.xpp3.MavenXpp3Writer: void writeDependency(org.apache.maven.model.Dependency,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.artifact.resolver.filter.ScopeArtifactFilter: boolean equals(java.lang.Object,java.lang.Object)>
<org.apache.maven.artifact.repository.LegacyLocalRepositoryManager$ArtifactMetadataAdapter: java.lang.String getGroupId()>
<org.apache.maven.model.io.xpp3.MavenXpp3ReaderEx: org.apache.maven.model.Dependency parseDependency(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean,org.apache.maven.model.InputSource)>
<org.apache.maven.execution.DefaultMavenExecutionResult: boolean hasExceptions()>
<org.apache.maven.settings.DefaultMavenSettingsBuilder: java.io.File getFile(java.lang.String,java.lang.String,java.lang.String)>
<org.apache.maven.artifact.repository.metadata.DefaultRepositoryMetadataManager: java.util.Date getLocalCopyLastModified(org.apache.maven.artifact.repository.ArtifactRepository,org.apache.maven.artifact.repository.metadata.RepositoryMetadata)>
<org.apache.maven.model.io.xpp3.MavenXpp3Reader: org.apache.maven.model.Plugin parsePlugin(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.model.io.xpp3.MavenXpp3ReaderEx: org.apache.maven.model.Exclusion parseExclusion(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean,org.apache.maven.model.InputSource)>
<org.apache.maven.model.io.xpp3.MavenXpp3Writer: void writeRelocation(org.apache.maven.model.Relocation,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.execution.DefaultMavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest setLocalRepository(org.apache.maven.artifact.repository.ArtifactRepository)>
<org.apache.maven.repository.internal.DefaultVersionRangeResolver: void <init>()>
<org.apache.maven.repository.legacy.resolver.transform.AbstractVersionTransformation: void <init>()>
<org.slf4j.impl.OutputChoice$OutputChoiceType: org.slf4j.impl.OutputChoice$OutputChoiceType[] values()>
<org.apache.maven.plugin.lifecycle.io.xpp3.LifecycleMappingsXpp3Reader: void checkUnknownAttribute(org.codehaus.plexus.util.xml.pull.XmlPullParser,java.lang.String,java.lang.String,boolean)>
<org.apache.maven.repository.internal.MavenMetadata: void <init>(org.apache.maven.artifact.repository.metadata.Metadata,java.io.File)>
<org.apache.maven.artifact.repository.metadata.DefaultRepositoryMetadataManager: void resolve(org.apache.maven.artifact.repository.metadata.RepositoryMetadata,org.apache.maven.artifact.repository.RepositoryRequest)>
<org.apache.maven.plugin.logging.SystemStreamLog: void error(java.lang.Throwable)>
<org.apache.maven.repository.internal.DefaultArtifactDescriptorReader: void missingDescriptor(org.eclipse.aether.RepositorySystemSession,org.eclipse.aether.RequestTrace,org.eclipse.aether.artifact.Artifact,java.lang.Exception)>
<org.apache.maven.model.Extension: boolean equal(java.lang.Object,java.lang.Object)>
<org.apache.maven.project.DefaultProjectRealmCache: org.apache.maven.project.ProjectRealmCache$CacheRecord get(org.apache.maven.project.ProjectRealmCache$Key)>
<org.apache.maven.model.io.xpp3.MavenXpp3Reader: org.apache.maven.model.DeploymentRepository parseDeploymentRepository(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.artifact.handler.manager.DefaultArtifactHandlerManager: java.util.Set getHandlerTypes()>
<org.apache.maven.model.BuildBase: void removeFilter(java.lang.String)>
<org.apache.maven.repository.internal.MavenSnapshotMetadata: org.apache.maven.artifact.repository.metadata.Metadata createRepositoryMetadata(org.eclipse.aether.artifact.Artifact,boolean)>
<org.apache.maven.model.composition.DefaultDependencyManagementImporter: void importManagement(org.apache.maven.model.Model,java.util.List,org.apache.maven.model.building.ModelBuildingRequest,org.apache.maven.model.building.ModelProblemCollector)>
<org.apache.maven.bridge.MavenRepositorySystem: void injectMirror(org.apache.maven.artifact.repository.ArtifactRepository,org.apache.maven.settings.Mirror)>
<org.apache.maven.lifecycle.internal.ProjectBuildList: int size()>
<org.apache.maven.bridge.MavenRepositorySystem: org.apache.maven.settings.Mirror getMirror(org.eclipse.aether.RepositorySystemSession,org.apache.maven.artifact.repository.ArtifactRepository)>
<org.apache.maven.plugin.logging.SystemStreamLog: void print(java.lang.String,java.lang.CharSequence)>
<org.apache.maven.toolchain.model.io.xpp3.MavenToolchainsXpp3Reader: float getFloatValue(java.lang.String,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.artifact.repository.metadata.io.xpp3.MetadataXpp3Reader: short getShortValue(java.lang.String,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.repository.legacy.LegacyRepositorySystem: org.apache.maven.artifact.resolver.ArtifactResolutionResult resolve(org.apache.maven.artifact.resolver.ArtifactResolutionRequest)>
<org.apache.maven.model.MailingList: void setLocation(java.lang.Object,org.apache.maven.model.InputLocation)>
<org.apache.maven.model.interpolation.AbstractStringBasedModelInterpolator$3: void <init>(org.apache.maven.model.interpolation.AbstractStringBasedModelInterpolator,boolean,org.apache.maven.model.building.ModelBuildingRequest)>
<org.apache.maven.project.MavenProject: void setInjectedProfileIds(java.lang.String,java.util.List)>
<org.apache.maven.plugin.descriptor.MojoDescriptor: void setLanguage(java.lang.String)>
<org.apache.maven.settings.Settings: void removeProfile(org.apache.maven.settings.Profile)>
<org.apache.maven.profiles.ProfilesRoot: void addActiveProfile(java.lang.String)>
<org.apache.maven.cli.internal.extension.model.io.xpp3.CoreExtensionsXpp3Reader: org.apache.maven.cli.internal.extension.model.CoreExtensions read(java.io.InputStream,boolean)>
<org.apache.maven.model.BuildBase: org.apache.maven.model.BuildBase clone()>
<org.apache.maven.cli.logging.Slf4jLoggerManager: org.codehaus.plexus.logging.Logger getLoggerForComponent(java.lang.String,java.lang.String)>
<org.apache.maven.artifact.repository.DefaultArtifactRepository: java.lang.String toString()>
<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange restrict(org.apache.maven.artifact.versioning.VersionRange)>
<org.apache.maven.execution.DefaultRuntimeInformation: void initialize()>
<org.apache.maven.model.io.xpp3.MavenXpp3Reader: org.apache.maven.model.RepositoryBase parseRepositoryBase(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.project.DefaultProjectDependenciesResolver: void process(org.apache.maven.project.DefaultDependencyResolutionResult,java.util.Collection)>
<org.apache.maven.eventspy.internal.EventSpyRepositoryListener: void artifactInstalled(org.eclipse.aether.RepositoryEvent)>
<org.apache.maven.model.io.xpp3.MavenXpp3Writer: void write(java.io.Writer,org.apache.maven.model.Model)>
<org.apache.maven.execution.ReactorManager: void registerBuildSuccess(org.apache.maven.project.MavenProject,long)>
<org.apache.maven.usability.plugin.io.xpp3.ParamdocXpp3Reader: org.apache.maven.usability.plugin.ExpressionDocumentation read(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.model.ModelBase: org.apache.maven.model.InputLocation getLocation(java.lang.Object)>
<org.apache.maven.artifact.repository.metadata.io.xpp3.MetadataXpp3Reader: org.apache.maven.artifact.repository.metadata.Metadata read(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.settings.crypto.DefaultSettingsDecrypter: java.lang.String decrypt(java.lang.String)>
<org.apache.maven.repository.metadata.MetadataGraph: org.apache.maven.repository.metadata.MetadataGraph addEdge(org.apache.maven.repository.metadata.MetadataGraphVertex,org.apache.maven.repository.metadata.MetadataGraphVertex,org.apache.maven.repository.metadata.MetadataGraphEdge)>
<org.apache.maven.settings.DefaultMavenSettingsBuilder: void <init>()>
<org.apache.maven.plugin.DefaultPluginRealmCache$CacheKey: void <init>(org.apache.maven.model.Plugin,java.lang.ClassLoader,java.util.Map,org.eclipse.aether.graph.DependencyFilter,java.util.List,org.eclipse.aether.RepositorySystemSession)>
<org.apache.maven.plugin.internal.DefaultPluginDependenciesResolver: org.eclipse.aether.artifact.Artifact toArtifact(org.apache.maven.model.Plugin,org.eclipse.aether.RepositorySystemSession)>
<org.apache.maven.model.profile.DefaultProfileInjector$ProfileModelMerger: void mergePluginContainer_Plugins(org.apache.maven.model.PluginContainer,org.apache.maven.model.PluginContainer,boolean,java.util.Map)>
<org.apache.maven.lifecycle.internal.LifecycleStarter: void execute(org.apache.maven.execution.MavenSession)>
<org.apache.maven.lifecycle.internal.builder.multithreaded.ThreadOutputMuxer: void setNext()>
<org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver: void mergeMetadata(org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver$Versions,org.apache.maven.artifact.repository.metadata.Metadata,org.eclipse.aether.repository.ArtifactRepository)>
<org.apache.maven.model.validation.DefaultModelValidator: void validateRawModel(org.apache.maven.model.Model,org.apache.maven.model.building.ModelBuildingRequest,org.apache.maven.model.building.ModelProblemCollector)>
<org.apache.maven.settings.io.xpp3.SettingsXpp3Writer: void writeRepositoryPolicy(org.apache.maven.settings.RepositoryPolicy,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.project.ModelUtils: java.util.List mergeRepositoryLists(java.util.List,java.util.List)>
<org.apache.maven.lifecycle.MavenExecutionPlan: void <init>(java.util.List,org.apache.maven.lifecycle.DefaultLifecycles)>
<org.apache.maven.model.io.xpp3.MavenXpp3Reader: org.apache.maven.model.Organization parseOrganization(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.model.Exclusion: org.apache.maven.model.InputLocation getLocation(java.lang.Object)>
<org.apache.maven.artifact.resolver.ArtifactResolutionResult: org.apache.maven.artifact.versioning.OverConstrainedVersionException getVersionRangeViolation(int)>
<org.apache.maven.model.building.DefaultModelBuilder: org.apache.maven.model.building.ModelData readParentExternally(org.apache.maven.model.Model,org.apache.maven.model.building.ModelBuildingRequest,org.apache.maven.model.building.DefaultModelProblemCollector)>
<org.apache.maven.model.io.DefaultModelWriter: void write(java.io.OutputStream,java.util.Map,org.apache.maven.model.Model)>
<org.apache.maven.artifact.resolver.filter.OrArtifactFilter: void add(org.apache.maven.artifact.resolver.filter.ArtifactFilter)>
<org.apache.maven.repository.legacy.resolver.conflict.DefaultConflictResolverFactory: org.apache.maven.repository.legacy.resolver.conflict.ConflictResolver getConflictResolver(java.lang.String)>
<org.apache.maven.lifecycle.internal.ProjectIndex: void <init>(java.util.List)>
<org.apache.maven.project.MavenProject: java.util.List getTestDependencies()>
<org.apache.maven.project.MavenProject: void deepCopy(org.apache.maven.project.MavenProject)>
<org.apache.maven.project.MavenProject: java.lang.String getModulePathAdjustment(org.apache.maven.project.MavenProject)>
<org.apache.maven.project.DefaultModelBuildingListener: void <init>(org.apache.maven.project.MavenProject,org.apache.maven.project.ProjectBuildingHelper,org.apache.maven.project.ProjectBuildingRequest)>
<org.apache.maven.cli.logging.impl.UnsupportedSlf4jBindingConfiguration: void activate()>
<org.apache.maven.model.inheritance.DefaultInheritanceAssembler: java.lang.String getChildPathAdjustment(org.apache.maven.model.Model,org.apache.maven.model.Model,java.lang.String)>
<org.apache.maven.plugin.PluginExecutionException: java.lang.String constructMessage(org.apache.maven.plugin.MojoExecution,java.lang.Throwable)>
<org.apache.maven.lifecycle.internal.ReactorBuildStatus: void blackList(org.apache.maven.project.MavenProject)>
<org.apache.maven.repository.ArtifactTransferEvent: boolean equals(java.lang.Object)>
<org.apache.maven.project.DefaultProjectRealmCache$CacheKey: boolean equals(java.lang.Object)>
<org.apache.maven.lifecycle.MavenExecutionPlan: java.util.Set getNonThreadSafeMojos()>
<org.apache.maven.cli.transfer.ConsoleMavenTransferListener: void transferProgressed(org.eclipse.aether.transfer.TransferEvent)>
<org.apache.maven.settings.io.xpp3.SettingsXpp3Writer: void writeProfile(org.apache.maven.settings.Profile,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.graph.DefaultProjectDependencyGraph: java.util.List getSortedProjects(java.util.Set)>
<org.apache.maven.DefaultMaven: void validatePrerequisitesForNonMavenPluginProjects(java.util.List)>
<org.apache.maven.model.Contributor: org.apache.maven.model.InputLocation getLocation(java.lang.Object)>
<org.apache.maven.artifact.repository.metadata.DefaultRepositoryMetadataManager: java.io.File getArtifactMetadataFromDeploymentRepository(org.apache.maven.artifact.metadata.ArtifactMetadata,org.apache.maven.artifact.repository.ArtifactRepository,org.apache.maven.artifact.repository.ArtifactRepository)>
<org.apache.maven.eventspy.internal.EventSpyRepositoryListener: void metadataDownloaded(org.eclipse.aether.RepositoryEvent)>
<org.apache.maven.plugin.PluginParameterException: java.lang.String format(java.util.List)>
<org.apache.maven.model.io.xpp3.MavenXpp3ReaderEx: org.apache.maven.model.Resource parseResource(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean,org.apache.maven.model.InputSource)>
<org.apache.maven.model.io.xpp3.MavenXpp3Writer: void writeExclusion(org.apache.maven.model.Exclusion,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.settings.io.xpp3.SettingsXpp3Writer: void writeRepository(org.apache.maven.settings.Repository,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.model.building.DefaultModelBuildingResult: org.apache.maven.model.building.DefaultModelBuildingResult setActiveExternalProfiles(java.util.List)>
<org.apache.maven.plugin.lifecycle.io.xpp3.LifecycleMappingsXpp3Reader: float getFloatValue(java.lang.String,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.repository.internal.DefaultArtifactDescriptorReader: org.apache.maven.repository.internal.DefaultArtifactDescriptorReader setModelBuilder(org.apache.maven.model.building.ModelBuilder)>
<org.apache.maven.model.InputLocation: org.apache.maven.model.InputLocation merge(org.apache.maven.model.InputLocation,org.apache.maven.model.InputLocation,boolean)>
<org.apache.maven.model.Notifier: org.apache.maven.model.InputLocation getLocation(java.lang.Object)>
<org.apache.maven.graph.FilteredProjectDependencyGraph: java.lang.String toString()>
<org.apache.maven.project.MavenProject: void addLifecyclePhase(java.lang.String)>
<org.apache.maven.repository.internal.DefaultVersionRangeResolver: org.apache.maven.repository.internal.DefaultVersionRangeResolver setLoggerFactory(org.eclipse.aether.spi.log.LoggerFactory)>
<org.apache.maven.repository.internal.DefaultArtifactDescriptorReader: org.apache.maven.repository.internal.DefaultArtifactDescriptorReader setArtifactResolver(org.eclipse.aether.impl.ArtifactResolver)>
<org.apache.maven.repository.legacy.LegacyRepositorySystem: org.apache.maven.artifact.repository.ArtifactRepositoryPolicy getEffectivePolicy(java.util.Collection)>
<org.apache.maven.repository.internal.ArtifactDescriptorUtils: org.eclipse.aether.repository.RemoteRepository toRemoteRepository(org.apache.maven.model.Repository)>
<org.apache.maven.model.merge.ModelMerger: void mergeMailingList_OtherArchives(org.apache.maven.model.MailingList,org.apache.maven.model.MailingList,boolean,java.util.Map)>
<org.apache.maven.model.RepositoryPolicy: org.apache.maven.model.InputLocation getLocation(java.lang.Object)>
<org.apache.maven.model.io.xpp3.MavenXpp3Reader: org.apache.maven.model.DistributionManagement parseDistributionManagement(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.model.building.DefaultModelBuildingResult: java.util.List getActivePomProfiles(java.lang.String)>
<org.apache.maven.graph.DefaultGraphBuilder: org.apache.maven.model.building.Result build(org.apache.maven.execution.MavenSession)>
<org.apache.maven.repository.legacy.ChecksumFailedException: void <init>(java.lang.String,java.lang.Throwable)>
<org.apache.maven.repository.legacy.LegacyRepositorySystem: void injectAuthentication(java.util.List,java.util.List)>
<org.apache.maven.model.PluginContainer: org.apache.maven.model.InputLocation getLocation(java.lang.Object)>
<org.apache.maven.usability.plugin.io.xpp3.ParamdocXpp3Reader: void checkUnknownAttribute(org.codehaus.plexus.util.xml.pull.XmlPullParser,java.lang.String,java.lang.String,boolean)>
<org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator: void finalizeMojoConfiguration(org.apache.maven.plugin.MojoExecution)>
<org.apache.maven.profiles.io.xpp3.ProfilesXpp3Reader: org.apache.maven.profiles.ProfilesRoot read(java.io.InputStream,boolean)>
<org.apache.maven.graph.DefaultProjectDependencyGraph: java.lang.String toString()>
<org.apache.maven.repository.MetadataResolutionResult: boolean hasMissingArtifacts()>
<org.apache.maven.model.merge.ModelMerger: void mergeContributor_Roles(org.apache.maven.model.Contributor,org.apache.maven.model.Contributor,boolean,java.util.Map)>
<org.apache.maven.eventspy.internal.EventSpyRepositoryListener: void metadataDownloading(org.eclipse.aether.RepositoryEvent)>
<org.apache.maven.repository.internal.DefaultVersionResolver: boolean resolve(org.eclipse.aether.resolution.VersionResult,java.util.Map,java.lang.String)>
<org.apache.maven.plugin.internal.WagonExcluder: boolean isWagonProvider(org.eclipse.aether.artifact.Artifact)>
<org.apache.maven.project.MavenProject: java.util.List getCompileClasspathElements()>
<org.apache.maven.profiles.DefaultProfileManager$1: void add(org.apache.maven.model.building.ModelProblemCollectorRequest)>
<org.apache.maven.artifact.repository.metadata.MetadataBridge: void merge(java.io.File,java.io.File)>
<org.apache.maven.project.inheritance.DefaultModelInheritanceAssembler: void assembleBuildInheritance(org.apache.maven.model.Build,org.apache.maven.model.Build,boolean)>
<org.apache.maven.repository.internal.DefaultVersionRangeResolver: void <init>(org.eclipse.aether.impl.MetadataResolver,org.eclipse.aether.impl.SyncContextFactory,org.eclipse.aether.impl.RepositoryEventDispatcher,org.eclipse.aether.spi.log.LoggerFactory)>
<org.apache.maven.artifact.DefaultArtifact: void addMetadata(org.apache.maven.artifact.metadata.ArtifactMetadata)>
<org.apache.maven.cli.CLIManager: org.apache.commons.cli.CommandLine parse(java.lang.String[])>
<org.apache.maven.plugin.descriptor.MojoDescriptor: java.lang.String getLanguage()>
<org.apache.maven.model.io.xpp3.MavenXpp3Reader: org.apache.maven.model.CiManagement parseCiManagement(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.classrealm.DefaultClassRealmManager: java.lang.String getId(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<org.apache.maven.artifact.resolver.DefaultResolutionErrorHandler: void throwErrors(org.apache.maven.artifact.resolver.ArtifactResolutionRequest,org.apache.maven.artifact.resolver.ArtifactResolutionResult)>
<org.apache.maven.project.MavenProject: java.util.List getSystemDependencies()>
<org.apache.maven.model.CiManagement: void addNotifier(org.apache.maven.model.Notifier)>
<org.apache.maven.model.profile.DefaultProfileInjector$ProfileModelMerger: void mergeReporting_Plugins(org.apache.maven.model.Reporting,org.apache.maven.model.Reporting,boolean,java.util.Map)>
<org.apache.maven.model.plugin.DefaultReportingConverter: org.codehaus.plexus.util.xml.Xpp3Dom convert(org.apache.maven.model.ReportSet)>
<org.apache.maven.classrealm.DefaultClassRealmManager: void <init>(org.codehaus.plexus.logging.Logger,org.codehaus.plexus.PlexusContainer,java.util.List,org.apache.maven.extension.internal.CoreExportsProvider)>
<org.apache.maven.cli.configuration.SettingsXmlConfigurationProcessor: org.apache.maven.execution.MavenExecutionRequest populateFromSettings(org.apache.maven.execution.MavenExecutionRequest,org.apache.maven.settings.Settings)>
<org.apache.maven.model.io.xpp3.MavenXpp3Writer: void write(java.io.OutputStream,org.apache.maven.model.Model)>
<org.apache.maven.artifact.repository.LegacyLocalRepositoryManager$ArtifactMetadataAdapter: boolean storedInArtifactVersionDirectory()>
<org.apache.maven.model.interpolation.ProblemDetectingValueSource: void clearFeedback()>
<org.apache.maven.model.io.xpp3.MavenXpp3Writer: void writeSite(org.apache.maven.model.Site,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.internal.aether.DefaultRepositorySystemSessionFactory: org.eclipse.aether.DefaultRepositorySystemSession newRepositorySession(org.apache.maven.execution.MavenExecutionRequest)>
<org.apache.maven.model.io.xpp3.MavenXpp3ReaderEx: org.apache.maven.model.License parseLicense(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean,org.apache.maven.model.InputSource)>
<org.apache.maven.lifecycle.internal.MojoExecutor: void execute(org.apache.maven.execution.MavenSession,org.apache.maven.plugin.MojoExecution,org.apache.maven.lifecycle.internal.ProjectIndex,org.apache.maven.lifecycle.internal.DependencyContext)>
<org.apache.maven.project.interpolation.StringSearchModelInterpolator: org.codehaus.plexus.interpolation.Interpolator createInterpolator()>
<org.apache.maven.toolchain.DefaultToolchainManager: java.util.List selectToolchains(java.util.List,java.lang.String,java.util.Map)>
<org.apache.maven.model.PatternSet: org.apache.maven.model.InputLocation getLocation(java.lang.Object)>
<org.apache.maven.project.DefaultProjectBuilder: java.lang.String inheritedGroupId(org.apache.maven.model.building.ModelBuildingResult,int)>
<org.apache.maven.eventspy.internal.EventSpyDispatcher: org.eclipse.aether.RepositoryListener chainListener(org.eclipse.aether.RepositoryListener)>
<org.apache.maven.cli.MavenCli: int doMain(org.apache.maven.cli.CliRequest)>
<org.apache.maven.repository.DefaultMirrorSelector: boolean isExternalRepo(org.apache.maven.artifact.repository.ArtifactRepository)>
<org.apache.maven.settings.io.xpp3.SettingsXpp3Reader: org.apache.maven.settings.Settings read(java.io.InputStream,boolean)>
<org.apache.maven.bridge.MavenRepositorySystem: org.apache.maven.repository.Proxy getProxy(org.eclipse.aether.RepositorySystemSession,org.apache.maven.artifact.repository.ArtifactRepository)>
<org.apache.maven.model.Contributor: void setLocation(java.lang.Object,org.apache.maven.model.InputLocation)>
<org.apache.maven.project.ProjectModelResolver: org.apache.maven.model.building.ModelSource resolveModel(org.apache.maven.model.Parent)>
<org.apache.maven.plugin.DefaultExtensionRealmCache$CacheKey: boolean equals(java.lang.Object)>
<org.apache.maven.model.InputLocation: org.apache.maven.model.InputLocation getLocation(java.lang.Object)>
<org.apache.maven.toolchain.DefaultToolchainsBuilder: org.apache.maven.toolchain.model.PersistedToolchains build(java.io.File)>
<org.apache.maven.repository.legacy.MavenArtifact: java.lang.String getName()>
<org.apache.maven.repository.internal.DefaultVersionResolver: void invalidMetadata(org.eclipse.aether.RepositorySystemSession,org.eclipse.aether.RequestTrace,org.eclipse.aether.metadata.Metadata,org.eclipse.aether.repository.ArtifactRepository,java.lang.Exception)>
<org.apache.maven.artifact.versioning.VersionRange: boolean containsVersion(org.apache.maven.artifact.versioning.ArtifactVersion)>
<org.apache.maven.repository.internal.DefaultVersionResolver: java.lang.String getKey(java.lang.String,java.lang.String)>
<org.apache.maven.lifecycle.internal.MojoDescriptorCreator: org.apache.maven.model.Plugin findPluginForPrefix(java.lang.String,org.apache.maven.execution.MavenSession)>
<org.apache.maven.settings.io.xpp3.SettingsXpp3Reader: void checkUnknownElement(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.project.DefaultProjectBuilder: boolean build(java.util.List,java.util.List,java.util.Map,java.io.File,java.util.Set,boolean,boolean,org.apache.maven.project.DefaultProjectBuilder$InternalConfig)>
<org.apache.maven.model.Reporting: java.util.Map getReportPluginsAsMap()>
<org.apache.maven.project.ModelUtils: java.util.List mergeDependencyList(java.util.List,java.util.List)>
<org.apache.maven.repository.internal.VersionsMetadata: org.apache.maven.artifact.repository.metadata.Metadata createRepositoryMetadata(org.eclipse.aether.artifact.Artifact)>
<org.apache.maven.artifact.resolver.filter.CumulativeScopeArtifactFilter: void addScope(java.lang.String)>
<org.apache.maven.repository.MetadataGraphNode: org.apache.maven.repository.MetadataGraphNode addExident(org.apache.maven.repository.MetadataGraphNode)>
<org.apache.maven.artifact.repository.MavenArtifactRepository: boolean eq(java.lang.Object,java.lang.Object)>
<org.apache.maven.model.io.xpp3.MavenXpp3ReaderEx: org.apache.maven.model.PluginManagement parsePluginManagement(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean,org.apache.maven.model.InputSource)>
<org.apache.maven.plugin.descriptor.MojoDescriptor: boolean compareObjects(java.lang.Object,java.lang.Object)>
<org.apache.maven.extension.internal.CoreExportsProvider: void <init>(org.codehaus.plexus.PlexusContainer,org.apache.maven.extension.internal.CoreExports)>
<org.apache.maven.DefaultMaven: java.util.Map getProjectMap(java.util.Collection)>
<org.apache.maven.project.MavenProject: org.codehaus.plexus.util.xml.Xpp3Dom getGoalConfiguration(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<org.apache.maven.profiles.io.xpp3.ProfilesXpp3Reader: float getFloatValue(java.lang.String,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.model.plugin.DefaultLifecycleBindingsInjector$LifecycleBindingsMerger: void mergePluginContainer_Plugins(org.apache.maven.model.PluginContainer,org.apache.maven.model.PluginContainer,boolean,java.util.Map)>
<org.apache.maven.plugin.CacheUtils: boolean repositoriesEquals(java.util.List,java.util.List)>
<org.apache.maven.lifecycle.internal.LifecycleDebugLogger: void debug(java.lang.String)>
<org.apache.maven.RepositoryUtils: org.eclipse.aether.artifact.ArtifactType newArtifactType(java.lang.String,org.apache.maven.artifact.handler.ArtifactHandler)>
<org.apache.maven.model.io.xpp3.MavenXpp3ReaderEx: org.apache.maven.model.Reporting parseReporting(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean,org.apache.maven.model.InputSource)>
<org.apache.maven.model.BuildBase: void addResource(org.apache.maven.model.Resource)>
<org.apache.maven.DefaultArtifactFilterManager: void excludeArtifact(java.lang.String)>
<org.apache.maven.model.building.DefaultModelProblemCollector: void <init>(org.apache.maven.model.building.ModelBuildingResult)>
<org.apache.maven.repository.legacy.TransferListenerAdapter: void transferError(org.apache.maven.wagon.events.TransferEvent)>
<org.apache.maven.model.io.xpp3.MavenXpp3ReaderEx: org.apache.maven.model.Contributor parseContributor(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean,org.apache.maven.model.InputSource)>
<org.apache.maven.lifecycle.internal.CompoundProjectExecutionListener: void afterProjectExecutionSuccess(org.apache.maven.execution.ProjectExecutionEvent)>
<org.apache.maven.repository.legacy.resolver.DefaultLegacyArtifactCollector: void fireEvent(int,java.util.List,org.apache.maven.artifact.resolver.ResolutionNode,org.apache.maven.artifact.Artifact,org.apache.maven.artifact.versioning.VersionRange)>
<org.apache.maven.lifecycle.internal.CompoundProjectExecutionListener: void beforeProjectExecution(org.apache.maven.execution.ProjectExecutionEvent)>
<org.apache.maven.execution.DefaultMavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest addInactiveProfile(java.lang.String)>
<org.apache.maven.execution.DefaultMavenExecutionRequestPopulator: org.apache.maven.execution.MavenExecutionRequest populateFromSettings(org.apache.maven.execution.MavenExecutionRequest,org.apache.maven.settings.Settings)>
<org.apache.maven.model.interpolation.AbstractStringBasedModelInterpolator: void <init>()>
<org.apache.maven.execution.ReactorManager: void registerBuildFailure(org.apache.maven.project.MavenProject,java.lang.Exception,java.lang.String,long)>
<org.apache.maven.artifact.resolver.ArtifactResolutionResult: org.apache.maven.artifact.resolver.ArtifactResolutionResult addMissingArtifact(org.apache.maven.artifact.Artifact)>
<org.apache.maven.repository.internal.ArtifactDescriptorReaderDelegate: void populateResult(org.eclipse.aether.RepositorySystemSession,org.eclipse.aether.resolution.ArtifactDescriptorResult,org.apache.maven.model.Model)>
<org.apache.maven.model.io.xpp3.MavenXpp3ReaderEx: org.apache.maven.model.Plugin parsePlugin(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean,org.apache.maven.model.InputSource)>
<org.apache.maven.model.building.ModelBuildingException: java.lang.String toMessage(java.lang.String,java.util.List)>
<org.apache.maven.project.DefaultProjectRealmCache: void flush()>
<org.slf4j.MavenSlf4jFriend: void reset()>
<org.apache.maven.model.Site: org.apache.maven.model.InputLocation getLocation(java.lang.Object)>
<org.apache.maven.model.Prerequisites: void setLocation(java.lang.Object,org.apache.maven.model.InputLocation)>
<org.apache.maven.artifact.repository.metadata.io.xpp3.MetadataXpp3Reader: org.apache.maven.artifact.repository.metadata.Metadata read(java.io.InputStream)>
<org.apache.maven.cli.transfer.AbstractMavenTransferListener: void transferCorrupted(org.eclipse.aether.transfer.TransferEvent)>
<org.apache.maven.internal.aether.LoggingRepositoryListener: void artifactInstalling(org.eclipse.aether.RepositoryEvent)>
<org.apache.maven.plugin.MojoExecution$Source: org.apache.maven.plugin.MojoExecution$Source[] values()>
<org.apache.maven.execution.scope.internal.MojoExecutionScope: void seed(java.lang.Class,com.google.inject.Provider)>
<org.apache.maven.ReactorReader: boolean isTestArtifact(org.eclipse.aether.artifact.Artifact)>
<org.apache.maven.artifact.repository.metadata.io.xpp3.MetadataXpp3Reader: int getIntegerValue(java.lang.String,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.lifecycle.internal.DefaultLifecyclePluginAnalyzer: java.lang.String getExecutionId(org.apache.maven.model.Plugin,java.lang.String)>
<org.apache.maven.artifact.ArtifactUtils: java.lang.String toSnapshotVersion(java.lang.String)>
<org.apache.maven.cli.CLIReportingUtils: java.util.Properties getBuildProperties()>
<org.apache.maven.model.io.xpp3.MavenXpp3Writer: void writeRepository(org.apache.maven.model.Repository,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.artifact.deployer.DefaultArtifactDeployer: void deploy(java.io.File,org.apache.maven.artifact.Artifact,org.apache.maven.artifact.repository.ArtifactRepository,org.apache.maven.artifact.repository.ArtifactRepository)>
<org.apache.maven.profiles.io.xpp3.ProfilesXpp3Reader: org.apache.maven.profiles.ProfilesRoot read(java.io.Reader,boolean)>
<org.apache.maven.execution.ReactorManager: boolean executedMultipleProjects()>
<org.apache.maven.model.io.xpp3.MavenXpp3Reader: org.apache.maven.model.Notifier parseNotifier(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.repository.internal.LocalSnapshotMetadataGenerator: void <init>(org.eclipse.aether.RepositorySystemSession,org.eclipse.aether.installation.InstallRequest)>
<org.apache.maven.model.RepositoryPolicy: void setLocation(java.lang.Object,org.apache.maven.model.InputLocation)>
<org.apache.maven.artifact.versioning.ComparableVersion$ListItem: int compareTo(org.apache.maven.artifact.versioning.ComparableVersion$Item)>
<org.apache.maven.model.BuildBase: void removeTestResource(org.apache.maven.model.Resource)>
<org.apache.maven.model.interpolation.ProblemDetectingValueSource: java.lang.Object getValue(java.lang.String)>
<org.apache.maven.plugin.MojoNotFoundException: java.lang.String toMessage(java.lang.String,org.apache.maven.plugin.descriptor.PluginDescriptor)>
<org.apache.maven.artifact.repository.metadata.DefaultRepositoryMetadataManager: boolean loadMetadata(org.apache.maven.artifact.repository.metadata.RepositoryMetadata,org.apache.maven.artifact.repository.ArtifactRepository,org.apache.maven.artifact.repository.ArtifactRepository,java.util.Map)>
<org.apache.maven.building.FileSource: void <init>(java.io.File)>
<org.apache.maven.cli.event.ExecutionEventLogger: void infoMain(java.lang.String)>
<org.apache.maven.plugin.CacheUtils: int pluginHashCode(org.apache.maven.model.Plugin)>
<org.apache.maven.repository.internal.DefaultModelResolver: void addRepository(org.apache.maven.model.Repository,boolean)>
<org.apache.maven.model.io.DefaultModelWriter: void write(java.io.Writer,java.util.Map,org.apache.maven.model.Model)>
<org.apache.maven.project.DefaultProjectRealmCache$CacheKey: void <init>(java.util.List)>
<org.apache.maven.internal.aether.LoggingRepositoryListener: void artifactDescriptorMissing(org.eclipse.aether.RepositoryEvent)>
<org.apache.maven.cli.internal.extension.model.io.xpp3.CoreExtensionsXpp3Reader: short getShortValue(java.lang.String,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.project.interpolation.PathTranslatingPostProcessor: java.lang.Object execute(java.lang.String,java.lang.Object)>
<org.apache.maven.repository.internal.DefaultVersionResolver$Key: void <init>(org.eclipse.aether.RepositorySystemSession,org.eclipse.aether.resolution.VersionRequest)>
<org.apache.maven.model.io.xpp3.MavenXpp3Writer: void writeReporting(org.apache.maven.model.Reporting,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.project.artifact.MavenMetadataSource: org.apache.maven.model.building.ModelProblem hasMissingParentPom(org.apache.maven.project.ProjectBuildingException)>
<org.apache.maven.project.DefaultProjectRealmCache$CacheKey: java.lang.String toString()>
<org.apache.maven.model.management.DefaultPluginManagementInjector$ManagementModelMerger: void mergePluginContainer_Plugins(org.apache.maven.model.PluginContainer,org.apache.maven.model.PluginContainer)>
<org.apache.maven.model.io.xpp3.MavenXpp3ReaderEx: long getLongValue(java.lang.String,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.graph.DefaultGraphBuilder: java.util.List trimResumedProjects(java.util.List,org.apache.maven.execution.MavenExecutionRequest)>
<org.apache.maven.artifact.resolver.AbstractArtifactResolutionException: java.lang.String constructMessageBase(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.List,java.util.List)>
<org.apache.maven.model.io.xpp3.MavenXpp3Reader: java.util.Date getDateValue(java.lang.String,java.lang.String,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlPullParser)>
<org.apache.maven.plugin.lifecycle.io.xpp3.LifecycleMappingsXpp3Reader: java.lang.String getRequiredAttributeValue(java.lang.String,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.execution.BuildSummary: void <init>(org.apache.maven.project.MavenProject,long)>
<org.apache.maven.plugin.internal.DefaultMavenPluginManager: void discoverPluginComponents(org.codehaus.plexus.classworlds.realm.ClassRealm,org.apache.maven.model.Plugin,org.apache.maven.plugin.descriptor.PluginDescriptor)>
<org.apache.maven.repository.legacy.DefaultUpdateCheckManager: boolean isUpdateRequired(org.apache.maven.artifact.Artifact,org.apache.maven.artifact.repository.ArtifactRepository)>
<org.apache.maven.lifecycle.internal.DefaultLifecycleMappingDelegate: void addMojoExecution(java.util.Map,org.apache.maven.plugin.MojoExecution,int)>
<org.apache.maven.artifact.resolver.filter.AndArtifactFilter: boolean equals(java.lang.Object)>
<org.apache.maven.cli.logging.Slf4jLogger: boolean isErrorEnabled()>
<org.apache.maven.model.MailingList: org.apache.maven.model.InputLocation getLocation(java.lang.Object)>
<org.apache.maven.settings.io.xpp3.SettingsXpp3Reader: java.lang.String getRequiredAttributeValue(java.lang.String,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.model.io.xpp3.MavenXpp3ReaderEx: org.apache.maven.model.ReportPlugin parseReportPlugin(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean,org.apache.maven.model.InputSource)>
<org.apache.maven.project.inheritance.DefaultModelInheritanceAssembler: void mergeExtensionLists(org.apache.maven.model.Build,org.apache.maven.model.Build)>
<org.apache.maven.settings.Profile: void removeRepository(org.apache.maven.settings.Repository)>
<org.apache.maven.repository.legacy.DefaultUpdateCheckManager: boolean isUpdateRequired(org.apache.maven.artifact.repository.metadata.RepositoryMetadata,org.apache.maven.artifact.repository.ArtifactRepository,java.io.File)>
<org.apache.maven.model.ModelBase: void setLocation(java.lang.Object,org.apache.maven.model.InputLocation)>
<org.apache.maven.usability.plugin.io.xpp3.ParamdocXpp3Reader: int nextTag(org.codehaus.plexus.util.xml.pull.XmlPullParser)>
<org.apache.maven.artifact.resolver.filter.CumulativeScopeArtifactFilter: int hashCode()>
<org.apache.maven.profiles.io.xpp3.ProfilesXpp3Reader: java.lang.String getRequiredAttributeValue(java.lang.String,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.classrealm.ClassRealmRequest$RealmType: org.apache.maven.classrealm.ClassRealmRequest$RealmType[] values()>
<org.apache.maven.profiles.io.xpp3.ProfilesXpp3Writer: void write(java.io.Writer,org.apache.maven.profiles.ProfilesRoot)>
<org.apache.maven.artifact.installer.DefaultArtifactInstaller: void install(java.io.File,org.apache.maven.artifact.Artifact,org.apache.maven.artifact.repository.ArtifactRepository)>
<org.apache.maven.project.DefaultModelBuildingListener: void buildExtensionsAssembled(org.apache.maven.model.building.ModelBuildingEvent)>
<org.apache.maven.profiles.Profile: void addRepository(org.apache.maven.profiles.Repository)>
<org.apache.maven.repository.internal.DefaultVersionResolver: void merge(java.util.Map,java.lang.String,java.lang.String)>
<org.apache.maven.model.io.xpp3.MavenXpp3ReaderEx: org.apache.maven.model.Model read(java.io.Reader,boolean,org.apache.maven.model.InputSource)>
<org.apache.maven.project.ProjectSorter: void addEdge(java.util.Map,java.util.Map,org.apache.maven.project.MavenProject,org.codehaus.plexus.util.dag.Vertex,java.lang.String,java.lang.String,java.lang.String,boolean,boolean)>
<org.apache.maven.model.merge.ModelMerger: void mergeBuild_Extensions(org.apache.maven.model.Build,org.apache.maven.model.Build,boolean,java.util.Map)>
<org.apache.maven.plugin.internal.DefaultPluginManager: java.util.Map getPluginComponents(org.apache.maven.model.Plugin,java.lang.String)>
<org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator: java.util.Map calculateLifecycleMappings(org.apache.maven.execution.MavenSession,org.apache.maven.project.MavenProject,java.lang.String)>
<org.apache.maven.model.profile.activation.JdkVersionProfileActivator: boolean isInRange(java.lang.String,java.util.List)>
<org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator: java.util.List calculateForkedLifecycle(org.apache.maven.plugin.MojoExecution,org.apache.maven.execution.MavenSession,org.apache.maven.project.MavenProject,java.util.Collection)>
<org.apache.maven.cli.event.ExecutionEventLogger: void mojoSkipped(org.apache.maven.execution.ExecutionEvent)>
<org.apache.maven.model.merge.MavenModelMerger: void mergeBuildBase_TestResources(org.apache.maven.model.BuildBase,org.apache.maven.model.BuildBase,boolean,java.util.Map)>
<org.apache.maven.cli.logging.Slf4jLogger: void warn(java.lang.String)>
<org.apache.maven.settings.io.DefaultSettingsWriter: void write(java.io.Writer,java.util.Map,org.apache.maven.settings.Settings)>
<org.apache.maven.plugin.PluginParameterException: void decomposeParameterIntoUserInstructions(org.apache.maven.plugin.descriptor.MojoDescriptor,org.apache.maven.plugin.descriptor.Parameter,java.lang.StringBuilder)>
<org.apache.maven.project.artifact.MavenMetadataSource: boolean isMissingPom(java.lang.Exception)>
<org.apache.maven.model.io.xpp3.MavenXpp3Writer: void writeResource(org.apache.maven.model.Resource,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.model.io.xpp3.MavenXpp3ReaderEx: short getShortValue(java.lang.String,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.cli.event.ExecutionEventLogger: void projectStarted(org.apache.maven.execution.ExecutionEvent)>
<org.apache.maven.repository.legacy.LegacyRepositorySystem: org.apache.maven.artifact.repository.ArtifactRepository createArtifactRepository(java.lang.String,java.lang.String,org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout,org.apache.maven.artifact.repository.ArtifactRepositoryPolicy,org.apache.maven.artifact.repository.ArtifactRepositoryPolicy)>
<org.apache.maven.repository.legacy.LegacyRepositorySystem: org.apache.maven.artifact.Artifact createExtensionArtifact(java.lang.String,java.lang.String,java.lang.String)>
<org.apache.maven.model.profile.DefaultProfileInjector$ProfileModelMerger: void mergeReportPlugin_ReportSets(org.apache.maven.model.ReportPlugin,org.apache.maven.model.ReportPlugin,boolean,java.util.Map)>
<org.apache.maven.repository.internal.DefaultVersionRangeResolver: org.apache.maven.repository.internal.DefaultVersionRangeResolver setMetadataResolver(org.eclipse.aether.impl.MetadataResolver)>
<org.apache.maven.repository.internal.RemoteSnapshotMetadata: java.lang.String getExpandedVersion(org.eclipse.aether.artifact.Artifact)>
<org.apache.maven.model.io.xpp3.MavenXpp3Writer: void writePluginConfiguration(org.apache.maven.model.PluginConfiguration,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.lifecycle.LifecycleExecutionException: java.lang.String createMessage(org.apache.maven.plugin.MojoExecution,org.apache.maven.project.MavenProject,java.lang.Throwable)>
<org.apache.maven.repository.legacy.resolver.conflict.DefaultConflictResolverFactory: void contextualize(org.codehaus.plexus.context.Context)>
<org.apache.maven.plugin.internal.PluginDependencyResolutionListener: void startProcessChildren(org.apache.maven.artifact.Artifact)>
<org.apache.maven.lifecycle.internal.LifecycleDebugLogger: void info(java.lang.String)>
<org.apache.maven.session.scope.internal.SessionScope$ScopeState: void <init>()>
<org.apache.maven.plugin.CompoundMojoExecutionListener: void afterExecutionFailure(org.apache.maven.execution.MojoExecutionEvent)>
<org.apache.maven.model.merge.MavenModelMerger: void mergeReportPlugin_ReportSets(org.apache.maven.model.ReportPlugin,org.apache.maven.model.ReportPlugin,boolean,java.util.Map)>
<org.apache.maven.model.merge.ModelMerger: void merge(org.apache.maven.model.Model,org.apache.maven.model.Model,boolean,java.util.Map)>
<org.apache.maven.building.DefaultProblem: java.lang.String getMessage()>
<org.apache.maven.plugin.DefaultPluginArtifactsCache$CacheKey: void <init>(org.apache.maven.model.Plugin,org.eclipse.aether.graph.DependencyFilter,java.util.List,org.eclipse.aether.RepositorySystemSession)>
<org.apache.maven.settings.io.xpp3.SettingsXpp3Reader: org.apache.maven.settings.ActivationProperty parseActivationProperty(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.project.DefaultProjectBuildingHelper: java.util.List createArtifactRepositories(java.util.List,java.util.List,org.apache.maven.project.ProjectBuildingRequest)>
<org.apache.maven.repository.legacy.TransferListenerAdapter: org.apache.maven.repository.ArtifactTransferResource wrap(org.apache.maven.wagon.repository.Repository,org.apache.maven.wagon.resource.Resource)>
<org.apache.maven.execution.DefaultMavenExecutionRequestPopulator: org.apache.maven.execution.MavenExecutionRequest populateFromToolchains(org.apache.maven.execution.MavenExecutionRequest,org.apache.maven.toolchain.model.PersistedToolchains)>
<org.apache.maven.eventspy.internal.EventSpyDispatcher: void onEvent(java.lang.Object)>
<org.apache.maven.cli.event.ExecutionEventLogger: void logReactorSummary(org.apache.maven.execution.MavenSession)>
<org.apache.maven.cli.internal.extension.model.CoreExtensions: void addExtension(org.apache.maven.cli.internal.extension.model.CoreExtension)>
<org.apache.maven.session.scope.internal.SessionScope$Memento: void <init>(java.util.Map)>
<org.apache.maven.project.DefaultProjectBuilder: boolean build(java.util.List,java.util.List,java.util.Map,java.util.List,org.apache.maven.project.ProjectBuildingRequest,java.util.Map)>
<org.apache.maven.repository.internal.MavenResolverModule: void <init>()>
<org.apache.maven.profiles.Profile: void removePluginRepository(org.apache.maven.profiles.Repository)>
<org.apache.maven.model.merge.ModelMerger: void mergeModelBase_Modules(org.apache.maven.model.ModelBase,org.apache.maven.model.ModelBase,boolean,java.util.Map)>
<org.apache.maven.plugin.internal.ValidatingConfigurationListener: java.util.Collection getMissingParameters()>
<org.apache.maven.settings.io.xpp3.SettingsXpp3Reader: org.apache.maven.settings.ActivationOS parseActivationOS(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.cli.event.ExecutionEventLogger: void logResult(org.apache.maven.execution.MavenSession)>
<org.apache.maven.cli.MavenCli: org.apache.commons.cli.CommandLine cliMerge(org.apache.commons.cli.CommandLine,org.apache.commons.cli.CommandLine)>
<org.apache.maven.toolchain.model.io.xpp3.MavenToolchainsXpp3Reader: long getLongValue(java.lang.String,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.RepositoryUtils: java.util.Collection toArtifacts(java.util.Collection)>
<org.apache.maven.graph.DefaultGraphBuilder: java.util.List trimSelectedProjects(java.util.List,org.apache.maven.execution.ProjectDependencyGraph,org.apache.maven.execution.MavenExecutionRequest)>
<org.apache.maven.model.PluginContainer: void setLocation(java.lang.Object,org.apache.maven.model.InputLocation)>
<org.apache.maven.lifecycle.internal.ProjectBuildList: java.util.Set getReactorProjectKeys()>
<org.apache.maven.repository.MetadataResolutionResult: org.apache.maven.repository.MetadataResolutionResult addMissingArtifact(org.apache.maven.artifact.Artifact)>
<org.apache.maven.cli.logging.BaseSlf4jConfiguration: void <init>()>
<org.apache.maven.repository.internal.MavenResolverModule: void configure()>
<org.apache.maven.artifact.versioning.ComparableVersion$StringItem: void <clinit>()>
<org.apache.maven.eventspy.internal.EventSpyRepositoryListener: void artifactDeploying(org.eclipse.aether.RepositoryEvent)>
<org.apache.maven.lifecycle.DefaultLifecycles: java.util.Map getPhaseToLifecycleMap()>
<org.apache.maven.RepositoryUtils: org.apache.maven.artifact.handler.ArtifactHandler newHandler(org.eclipse.aether.artifact.Artifact)>
<org.apache.maven.model.interpolation.AbstractStringBasedModelInterpolator$2: void <init>(org.apache.maven.model.interpolation.AbstractStringBasedModelInterpolator,boolean,java.io.File)>
<org.apache.maven.settings.building.DefaultSettingsProblem: java.lang.String getMessage()>
<org.apache.maven.repository.legacy.DefaultWagonManager: void putRemoteFile(org.apache.maven.artifact.repository.ArtifactRepository,java.io.File,java.lang.String,org.apache.maven.wagon.events.TransferListener)>
<org.apache.maven.model.DependencyManagement: org.apache.maven.model.InputLocation getLocation(java.lang.Object)>
<org.apache.maven.cli.logging.Slf4jLoggerManager: void <init>()>
<org.apache.maven.cli.internal.extension.model.io.xpp3.CoreExtensionsXpp3Writer: void write(java.io.OutputStream,org.apache.maven.cli.internal.extension.model.CoreExtensions)>
<org.apache.maven.model.building.DefaultModelBuildingResult: org.apache.maven.model.building.DefaultModelBuildingResult setActivePomProfiles(java.lang.String,java.util.List)>
<org.apache.maven.model.building.DefaultModelBuildingResult: org.apache.maven.model.building.DefaultModelBuildingResult setProblems(java.util.List)>
<org.apache.maven.project.MavenProject: org.codehaus.plexus.util.xml.Xpp3Dom getReportConfiguration(java.lang.String,java.lang.String,java.lang.String)>
<org.apache.maven.profiles.ProfilesRoot: void removeProfile(org.apache.maven.profiles.Profile)>
<org.apache.maven.model.Activation: void setLocation(java.lang.Object,org.apache.maven.model.InputLocation)>
<org.apache.maven.project.interpolation.AbstractStringBasedModelInterpolator: java.lang.String interpolateInternal(java.lang.String,java.util.List,java.util.List,boolean)>
<org.apache.maven.model.ActivationProperty: void setLocation(java.lang.Object,org.apache.maven.model.InputLocation)>
<org.apache.maven.plugin.lifecycle.io.xpp3.LifecycleMappingsXpp3Writer: void write(java.io.Writer,org.apache.maven.plugin.lifecycle.LifecycleConfiguration)>
<org.apache.maven.cli.logging.Slf4jLogger: boolean isWarnEnabled()>
<org.apache.maven.lifecycle.internal.MojoExecutor: java.util.List executeForkedExecutions(org.apache.maven.plugin.MojoExecution,org.apache.maven.execution.MavenSession,org.apache.maven.lifecycle.internal.ProjectIndex)>
<org.apache.maven.RepositoryUtils: org.eclipse.aether.repository.RepositoryPolicy toPolicy(org.apache.maven.artifact.repository.ArtifactRepositoryPolicy)>
<org.apache.maven.repository.legacy.WagonConfigurationException: void <init>(java.lang.String,java.lang.String,java.lang.Throwable)>
<org.apache.maven.execution.ReactorManager: boolean isBlackListed(org.apache.maven.project.MavenProject)>
<org.apache.maven.lifecycle.mapping.LifecyclePhase: java.lang.String toString()>
<org.apache.maven.model.io.xpp3.MavenXpp3ReaderEx: org.apache.maven.model.ActivationOS parseActivationOS(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean,org.apache.maven.model.InputSource)>
<org.apache.maven.project.MavenProject: java.util.List getCompileDependencies()>
<org.apache.maven.model.Prerequisites: org.apache.maven.model.InputLocation getLocation(java.lang.Object)>
<org.apache.maven.DefaultMaven: void validateLocalRepository(org.apache.maven.execution.MavenExecutionRequest)>
<org.apache.maven.plugin.internal.DefaultMavenPluginManager: void validateParameters(org.apache.maven.plugin.descriptor.MojoDescriptor,org.codehaus.plexus.configuration.PlexusConfiguration,org.codehaus.plexus.component.configurator.expression.ExpressionEvaluator)>
<org.apache.maven.eventspy.internal.EventSpyRepositoryListener: void metadataDeployed(org.eclipse.aether.RepositoryEvent)>
<org.apache.maven.eventspy.internal.EventSpyRepositoryListener: void artifactResolving(org.eclipse.aether.RepositoryEvent)>
<org.apache.maven.artifact.ArtifactScopeEnum: org.apache.maven.artifact.ArtifactScopeEnum[] values()>
<org.apache.maven.model.io.xpp3.MavenXpp3Writer: void writeParent(org.apache.maven.model.Parent,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.repository.legacy.DefaultUpdateCheckManager: java.lang.String getRepositoryKey(org.apache.maven.artifact.repository.ArtifactRepository)>
<org.apache.maven.model.io.xpp3.MavenXpp3Reader: org.apache.maven.model.ActivationProperty parseActivationProperty(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.plugin.lifecycle.io.xpp3.LifecycleMappingsXpp3Writer: void writeLifecycle(org.apache.maven.plugin.lifecycle.Lifecycle,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.artifact.versioning.ManagedVersionMap: java.lang.String toString()>
<org.apache.maven.profiles.io.xpp3.ProfilesXpp3Reader: org.apache.maven.profiles.ActivationOS parseActivationOS(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator: org.apache.maven.lifecycle.MojoExecutionConfigurator mojoExecutionConfigurator(org.apache.maven.plugin.MojoExecution)>
<org.apache.maven.building.StringSource: void <init>(java.lang.CharSequence,java.lang.String)>
<org.apache.maven.DefaultMaven: org.apache.maven.execution.MavenExecutionResult execute(org.apache.maven.execution.MavenExecutionRequest)>
<org.apache.maven.project.ExtensionDescriptorBuilder: java.util.List parseStrings(org.codehaus.plexus.util.xml.Xpp3Dom)>
<org.apache.maven.model.io.xpp3.MavenXpp3ReaderEx: org.apache.maven.model.Model parseModel(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean,org.apache.maven.model.InputSource)>
<org.apache.maven.model.building.DefaultModelBuilder: void assembleInheritance(java.util.List,org.apache.maven.model.building.ModelBuildingRequest,org.apache.maven.model.building.ModelProblemCollector)>
<org.apache.maven.lifecycle.MavenExecutionPlan: java.util.Set getNonThreadSafePlugins()>
<org.apache.maven.lifecycle.internal.builder.multithreaded.MultiThreadedBuilder: void multiThreadedProjectTaskSegmentBuild(org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph,org.apache.maven.lifecycle.internal.ReactorContext,org.apache.maven.execution.MavenSession,java.util.concurrent.CompletionService,org.apache.maven.lifecycle.internal.TaskSegment,java.util.Map,org.apache.maven.lifecycle.internal.builder.multithreaded.ThreadOutputMuxer)>
<org.apache.maven.plugin.internal.DefaultPluginDependenciesResolver: org.eclipse.aether.artifact.Artifact resolve(org.apache.maven.model.Plugin,java.util.List,org.eclipse.aether.RepositorySystemSession)>
<org.apache.maven.project.DefaultProjectBuilder: boolean build(java.util.List,java.util.List,java.util.Map,java.util.List,java.util.Set,boolean,boolean,org.apache.maven.project.DefaultProjectBuilder$InternalConfig)>
<org.apache.maven.plugin.descriptor.PluginDescriptor: org.apache.maven.plugin.descriptor.MojoDescriptor getMojo(java.lang.String)>
<org.apache.maven.artifact.resolver.ArtifactResolutionResult: org.apache.maven.artifact.resolver.ArtifactResolutionException getMetadataResolutionException(int)>
<org.apache.maven.profiles.io.xpp3.ProfilesXpp3Writer: void write(java.io.OutputStream,org.apache.maven.profiles.ProfilesRoot)>
<org.apache.maven.execution.DefaultMavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest addPluginGroups(java.util.List)>
<org.apache.maven.repository.internal.DefaultArtifactDescriptorReader: int getPolicy(org.eclipse.aether.RepositorySystemSession,org.eclipse.aether.artifact.Artifact,org.eclipse.aether.resolution.ArtifactDescriptorRequest)>
<org.apache.maven.model.io.xpp3.MavenXpp3Reader: org.apache.maven.model.Contributor parseContributor(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.plugin.lifecycle.Lifecycle: void addPhase(org.apache.maven.plugin.lifecycle.Phase)>
<org.apache.maven.artifact.repository.metadata.MetadataBridge: void <init>(org.apache.maven.artifact.metadata.ArtifactMetadata)>
<org.apache.maven.artifact.resolver.ResolutionNode: void addDependencies(java.util.Set,java.util.List,org.apache.maven.artifact.resolver.filter.ArtifactFilter)>
<org.apache.maven.execution.ReactorManager: boolean hasBuildFailure(org.apache.maven.project.MavenProject)>
<org.apache.maven.ReactorReader: boolean hasArtifactFileFromPackagePhase(org.eclipse.aether.artifact.Artifact)>
<org.apache.maven.lifecycle.mapping.Lifecycle: java.util.Map getPhases()>
<org.apache.maven.cli.logging.Slf4jLogger: boolean isFatalErrorEnabled()>
<org.apache.maven.model.DependencyManagement: void setLocation(java.lang.Object,org.apache.maven.model.InputLocation)>
<org.apache.maven.cli.MavenCli: void repository(org.apache.maven.cli.CliRequest)>
<org.apache.maven.settings.building.SettingsProblem$Severity: org.apache.maven.settings.building.SettingsProblem$Severity[] values()>
<org.apache.maven.execution.DefaultMavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest addActiveProfile(java.lang.String)>
<org.apache.maven.profiles.io.xpp3.ProfilesXpp3Reader: boolean checkFieldWithDuplicate(org.codehaus.plexus.util.xml.pull.XmlPullParser,java.lang.String,java.lang.String,java.util.Set)>
<org.slf4j.impl.SimpleLogger: void formatAndLog(int,java.lang.String,java.lang.Object,java.lang.Object)>
<org.apache.maven.model.PluginContainer: void removePlugin(org.apache.maven.model.Plugin)>
<org.apache.maven.repository.internal.VersionsMetadata: org.eclipse.aether.metadata.Metadata$Nature getNature()>
<org.apache.maven.plugin.internal.DefaultMavenPluginManager: java.util.List toMavenArtifacts(org.eclipse.aether.graph.DependencyNode,org.eclipse.aether.util.graph.visitor.PreorderNodeListGenerator)>
<org.apache.maven.plugin.lifecycle.io.xpp3.LifecycleMappingsXpp3Reader: org.apache.maven.plugin.lifecycle.LifecycleConfiguration parseLifecycleConfiguration(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.settings.io.xpp3.SettingsXpp3Writer: void writeActivationFile(org.apache.maven.settings.ActivationFile,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.artifact.resolver.filter.CumulativeScopeArtifactFilter: boolean equals(java.lang.Object)>
<org.apache.maven.plugin.logging.SystemStreamLog: void error(java.lang.CharSequence,java.lang.Throwable)>
<org.apache.maven.cli.MavenCli$2: void <init>(org.apache.maven.cli.MavenCli)>
<org.apache.maven.settings.building.DefaultSettingsProblemCollector: void add(org.apache.maven.settings.building.SettingsProblem$Severity,java.lang.String,int,int,java.lang.Exception)>
<org.apache.maven.repository.legacy.DefaultWagonManager: void getRemoteFile(org.apache.maven.artifact.repository.ArtifactRepository,java.io.File,java.lang.String,org.apache.maven.wagon.events.TransferListener,java.lang.String,boolean)>
<org.apache.maven.lifecycle.MavenExecutionPlan: java.lang.Iterable getDistinctPhasesInOrderOfExecutionPlanAppearance(java.util.List)>
<org.apache.maven.settings.validation.DefaultSettingsValidator: void validate(org.apache.maven.settings.Settings,org.apache.maven.settings.building.SettingsProblemCollector)>
<org.apache.maven.DefaultProjectDependenciesResolver: java.util.Set getIgnorableArtifacts(java.lang.Iterable)>
<org.apache.maven.toolchain.io.DefaultToolchainsReader: boolean isStrict(java.util.Map)>
<org.apache.maven.model.Extension: org.apache.maven.model.InputLocation getLocation(java.lang.Object)>
<org.apache.maven.repository.legacy.DefaultWagonManager: org.apache.maven.wagon.Wagon getWagon(java.lang.String)>
<org.apache.maven.classrealm.DefaultClassRealmManager: org.codehaus.plexus.classworlds.realm.ClassRealm createExtensionRealm(org.apache.maven.model.Plugin,java.util.List)>
<org.apache.maven.repository.internal.DefaultModelResolver$1: boolean apply(org.eclipse.aether.repository.RemoteRepository)>
<org.apache.maven.model.interpolation.StringSearchModelInterpolator: void interpolateObject(java.lang.Object,org.apache.maven.model.Model,java.io.File,org.apache.maven.model.building.ModelBuildingRequest,org.apache.maven.model.building.ModelProblemCollector)>
<org.apache.maven.lifecycle.internal.BuildListCalculator: org.apache.maven.lifecycle.internal.ProjectBuildList calculateProjectBuilds(org.apache.maven.execution.MavenSession,java.util.List)>
<org.apache.maven.repository.internal.MavenRepositorySystemUtils: org.eclipse.aether.impl.DefaultServiceLocator newServiceLocator()>
<org.apache.maven.eventspy.internal.EventSpyDispatcher: org.apache.maven.execution.ExecutionListener chainListener(org.apache.maven.execution.ExecutionListener)>
<org.apache.maven.building.UrlSource: void <init>(java.net.URL)>
<org.apache.maven.cli.CLIReportingUtils: java.lang.String showVersion()>
<org.apache.maven.model.ActivationProperty: org.apache.maven.model.InputLocation getLocation(java.lang.Object)>
<org.apache.maven.model.io.xpp3.MavenXpp3Writer: void writeActivation(org.apache.maven.model.Activation,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.project.artifact.MavenMetadataSource: java.util.Set createArtifacts(org.apache.maven.artifact.factory.ArtifactFactory,java.util.List,java.lang.String,org.apache.maven.artifact.resolver.filter.ArtifactFilter,org.apache.maven.project.MavenProject)>
<org.apache.maven.cli.transfer.Slf4jMavenTransferListener: void transferSucceeded(org.eclipse.aether.transfer.TransferEvent)>
<org.apache.maven.plugin.DefaultProjectArtifactsCache$CacheKey: boolean eq(java.lang.Object,java.lang.Object)>
<org.apache.maven.repository.internal.VersionsMetadataGenerator: void <init>(org.eclipse.aether.RepositorySystemSession,org.eclipse.aether.deployment.DeployRequest)>
<org.apache.maven.graph.DefaultProjectDependencyGraph: void getDownstreamProjects(java.lang.String,java.util.Set,boolean)>
<org.apache.maven.cli.transfer.AbstractMavenTransferListener: void transferInitiated(org.eclipse.aether.transfer.TransferEvent)>
<org.apache.maven.model.io.xpp3.MavenXpp3Writer: void writeExtension(org.apache.maven.model.Extension,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.plugin.lifecycle.Lifecycle: void removePhase(org.apache.maven.plugin.lifecycle.Phase)>
<org.apache.maven.repository.DelegatingLocalArtifactRepository: java.lang.String getBasedir()>
<org.apache.maven.repository.internal.DefaultModelCache: void <init>(org.eclipse.aether.RepositorySystemSession)>
<org.apache.maven.model.ModelBase: void removeModule(java.lang.String)>
<org.apache.maven.profiles.io.xpp3.ProfilesXpp3Reader: org.apache.maven.profiles.ProfilesRoot parseProfilesRoot(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.model.building.Result: org.apache.maven.model.building.Result addProblems(org.apache.maven.model.building.Result,java.lang.Iterable)>
<org.apache.maven.bridge.MavenRepositorySystem: boolean matchesLayout(java.lang.String,java.lang.String)>
<org.apache.maven.model.io.xpp3.MavenXpp3Writer: void writePluginExecution(org.apache.maven.model.PluginExecution,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.execution.scope.internal.MojoExecutionScope: void beforeMojoExecution(org.apache.maven.execution.MojoExecutionEvent)>
<org.apache.maven.model.io.xpp3.MavenXpp3Writer: void writeMailingList(org.apache.maven.model.MailingList,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.profiles.Profile: void removeRepository(org.apache.maven.profiles.Repository)>
<org.apache.maven.model.io.xpp3.MavenXpp3Writer: void writePluginManagement(org.apache.maven.model.PluginManagement,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.repository.legacy.resolver.transform.DefaultArtifactTransformationManager: void transformForDeployment(org.apache.maven.artifact.Artifact,org.apache.maven.artifact.repository.ArtifactRepository,org.apache.maven.artifact.repository.ArtifactRepository)>
<org.apache.maven.internal.aether.LoggingRepositoryListener: void metadataInvalid(org.eclipse.aether.RepositoryEvent)>
<org.apache.maven.plugin.internal.DefaultLegacySupport: org.apache.maven.execution.MavenSession getSession()>
<org.apache.maven.cli.MavenCli: java.util.List parseExtClasspath(org.apache.maven.cli.CliRequest)>
<org.apache.maven.model.io.xpp3.MavenXpp3Reader: org.apache.maven.model.ReportSet parseReportSet(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.repository.internal.RelocatedArtifact: java.lang.String getExtension()>
<org.apache.maven.plugin.PluginResolutionException: void <init>(org.apache.maven.model.Plugin,java.lang.Throwable)>
<org.apache.maven.model.merge.ModelMerger: void mergePlugin_Dependencies(org.apache.maven.model.Plugin,org.apache.maven.model.Plugin,boolean,java.util.Map)>
<org.apache.maven.settings.io.xpp3.SettingsXpp3Writer: void writeProxy(org.apache.maven.settings.Proxy,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.project.ProjectModelResolver: void <init>(org.eclipse.aether.RepositorySystemSession,org.eclipse.aether.RequestTrace,org.eclipse.aether.RepositorySystem,org.eclipse.aether.impl.RemoteRepositoryManager,java.util.List,org.apache.maven.project.ProjectBuildingRequest$RepositoryMerging,org.apache.maven.project.ReactorModelPool)>
<org.apache.maven.toolchain.building.ToolchainsBuildingException: java.lang.String toMessage(java.util.List)>
<org.apache.maven.project.inheritance.DefaultModelInheritanceAssembler: void assembleDependencyInheritance(org.apache.maven.model.Model,org.apache.maven.model.Model)>
<org.apache.maven.settings.io.xpp3.SettingsXpp3Reader: double getDoubleValue(java.lang.String,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.plugin.DefaultPluginDescriptorCache$CacheKey: boolean eq(java.lang.Object,java.lang.Object)>
<org.apache.maven.monitor.logging.DefaultLog: void error(java.lang.CharSequence)>
<org.apache.maven.bridge.MavenRepositorySystem: org.apache.maven.artifact.repository.ArtifactRepository createArtifactRepository(java.lang.String,java.lang.String,java.lang.String,org.apache.maven.artifact.repository.ArtifactRepositoryPolicy,org.apache.maven.artifact.repository.ArtifactRepositoryPolicy)>
<org.apache.maven.RepositoryUtils: org.apache.maven.artifact.Artifact toArtifact(org.eclipse.aether.graph.Dependency)>
<org.apache.maven.model.io.xpp3.MavenXpp3ReaderEx: org.apache.maven.model.ActivationFile parseActivationFile(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean,org.apache.maven.model.InputSource)>
<org.apache.maven.toolchain.model.io.xpp3.MavenToolchainsXpp3Reader: org.apache.maven.toolchain.model.PersistedToolchains read(java.io.InputStream)>
<org.apache.maven.repository.metadata.ClasspathContainer: java.lang.String toString()>
<org.apache.maven.settings.io.xpp3.SettingsXpp3Writer: void writeActivationProperty(org.apache.maven.settings.ActivationProperty,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.cli.MavenCli: int main(java.lang.String[],org.codehaus.plexus.classworlds.ClassWorld)>
<org.slf4j.impl.MavenSimpleLoggerFactory: org.slf4j.Logger getLogger(java.lang.String)>
<org.apache.maven.model.License: org.apache.maven.model.InputLocation getLocation(java.lang.Object)>
<org.apache.maven.plugin.CacheUtils: boolean policyEquals(org.eclipse.aether.repository.RepositoryPolicy,org.eclipse.aether.repository.RepositoryPolicy)>
<org.apache.maven.usability.plugin.io.xpp3.ParamdocXpp3Reader: org.apache.maven.usability.plugin.ExpressionDocumentation read(java.io.InputStream)>
<org.apache.maven.execution.DefaultMavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest addPluginGroup(java.lang.String)>
<org.apache.maven.classrealm.DefaultClassRealmManager: java.lang.String getId(org.eclipse.aether.artifact.Artifact)>
<org.apache.maven.repository.internal.LocalSnapshotMetadata: java.lang.Object getKey(org.eclipse.aether.artifact.Artifact)>
<org.apache.maven.profiles.io.xpp3.ProfilesXpp3Reader: byte getByteValue(java.lang.String,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.cli.CLIReportingUtils: java.lang.String createMavenVersionString(java.util.Properties)>
<org.apache.maven.model.building.DefaultModelBuildingResult: org.apache.maven.model.Model getRawModel()>
<org.apache.maven.artifact.resolver.ArtifactResolutionResult: java.lang.String toString()>
<org.apache.maven.cli.internal.BootstrapCoreExtensionManager: void <init>(org.codehaus.plexus.logging.Logger,org.apache.maven.plugin.internal.DefaultPluginDependenciesResolver,org.apache.maven.internal.aether.DefaultRepositorySystemSessionFactory,org.codehaus.plexus.PlexusContainer)>
<org.apache.maven.artifact.resolver.DefaultArtifactResolver: void resolve(org.apache.maven.artifact.Artifact,java.util.List,org.eclipse.aether.RepositorySystemSession)>
<org.apache.maven.usability.plugin.io.xpp3.ParamdocXpp3Reader: void checkUnknownElement(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.toolchain.DefaultToolchainManagerPrivate: org.apache.maven.toolchain.ToolchainPrivate[] getToolchainsForType(java.lang.String,org.apache.maven.execution.MavenSession)>
<org.apache.maven.RepositoryUtils: org.eclipse.aether.graph.Dependency toDependency(org.apache.maven.model.Dependency,org.eclipse.aether.artifact.ArtifactTypeRegistry)>
<org.apache.maven.settings.Settings: void removePluginGroup(java.lang.String)>
<org.apache.maven.profiles.DefaultProfileManager: void explicitlyDeactivate(java.lang.String)>
<org.apache.maven.model.io.xpp3.MavenXpp3ReaderEx: boolean checkFieldWithDuplicate(org.codehaus.plexus.util.xml.pull.XmlPullParser,java.lang.String,java.lang.String,java.util.Set)>
<org.apache.maven.model.io.xpp3.MavenXpp3Reader: double getDoubleValue(java.lang.String,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.lifecycle.internal.ProjectBuildList: java.util.Iterator iterator()>
<org.apache.maven.eventspy.internal.EventSpyDispatcher: void init(org.apache.maven.eventspy.EventSpy$Context)>
<org.apache.maven.plugin.internal.PlexusUtilsInjector: org.eclipse.aether.graph.DependencyNode transformGraph(org.eclipse.aether.graph.DependencyNode,org.eclipse.aether.collection.DependencyGraphTransformationContext)>
<org.apache.maven.model.building.DefaultModelProblemCollector: boolean hasErrors()>
<org.apache.maven.plugin.DebugConfigurationListener: void notifyFieldChangeUsingSetter(java.lang.String,java.lang.Object,java.lang.Object)>
<org.apache.maven.model.merge.MavenModelMerger: void mergeModel(org.apache.maven.model.Model,org.apache.maven.model.Model,boolean,java.util.Map)>
<org.apache.maven.repository.internal.MavenMetadata: org.apache.maven.artifact.repository.metadata.Metadata read(java.io.File)>
<org.apache.maven.settings.Server: org.apache.maven.settings.Server clone()>
<org.apache.maven.toolchain.model.io.xpp3.MavenToolchainsXpp3Writer: void write(java.io.Writer,org.apache.maven.toolchain.model.PersistedToolchains)>
<org.apache.maven.project.inheritance.DefaultModelInheritanceAssembler: void assembleReportingInheritance(org.apache.maven.model.Model,org.apache.maven.model.Model)>
<org.apache.maven.model.io.xpp3.MavenXpp3Writer: void writeDeveloper(org.apache.maven.model.Developer,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.model.interpolation.PathTranslatingPostProcessor: java.lang.Object execute(java.lang.String,java.lang.Object)>
<org.apache.maven.toolchain.model.io.xpp3.MavenToolchainsXpp3Reader: byte getByteValue(java.lang.String,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.repository.DefaultMirrorSelector: boolean matchesLayout(java.lang.String,java.lang.String)>
<org.apache.maven.model.io.xpp3.MavenXpp3Writer: void writeReportPlugin(org.apache.maven.model.ReportPlugin,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.extension.internal.CoreExtensionEntry: void <init>(org.codehaus.plexus.classworlds.realm.ClassRealm,java.util.Collection,java.util.Collection)>
<org.apache.maven.toolchain.model.io.xpp3.MavenToolchainsXpp3Writer: void write(java.io.OutputStream,org.apache.maven.toolchain.model.PersistedToolchains)>
<org.apache.maven.artifact.resolver.ArtifactResolutionResult: boolean hasMissingArtifacts()>
<org.apache.maven.model.io.xpp3.MavenXpp3ReaderEx: int getIntegerValue(java.lang.String,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.profiles.DefaultProfileManager: void explicitlyActivate(java.util.List)>
<org.apache.maven.artifact.resolver.filter.CumulativeScopeArtifactFilter: void addScopes(java.util.Collection)>
<org.slf4j.impl.SimpleLoggerFactory: org.slf4j.Logger getLogger(java.lang.String)>
<org.apache.maven.project.MavenProject: java.util.List getRuntimeDependencies()>
<org.apache.maven.plugin.DefaultPluginDescriptorCache: org.apache.maven.plugin.descriptor.PluginDescriptor clone(org.apache.maven.plugin.descriptor.PluginDescriptor)>
<org.apache.maven.eventspy.internal.EventSpyRepositoryListener: void artifactDescriptorInvalid(org.eclipse.aether.RepositoryEvent)>
<org.apache.maven.session.scope.internal.SessionScope$2: java.lang.Object get()>
<org.apache.maven.cli.internal.extension.model.CoreExtensions: void removeExtension(org.apache.maven.cli.internal.extension.model.CoreExtension)>
<org.apache.maven.toolchain.model.io.xpp3.MavenToolchainsXpp3Reader: org.apache.maven.toolchain.model.PersistedToolchains parsePersistedToolchains(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.plugin.lifecycle.io.xpp3.LifecycleMappingsXpp3Reader: double getDoubleValue(java.lang.String,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.settings.Settings: void removeMirror(org.apache.maven.settings.Mirror)>
<org.apache.maven.plugin.lifecycle.io.xpp3.LifecycleMappingsXpp3Reader: byte getByteValue(java.lang.String,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.profiles.io.xpp3.ProfilesXpp3Reader: int getIntegerValue(java.lang.String,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.internal.aether.LoggingRepositoryListener: void metadataInstalling(org.eclipse.aether.RepositoryEvent)>
<org.apache.maven.artifact.repository.metadata.MetadataBridge: org.eclipse.aether.metadata.Metadata$Nature getNature()>
<org.apache.maven.profiles.DefaultProfileManager: java.util.List getActiveProfiles()>
<org.apache.maven.artifact.ArtifactUtils: java.util.Map copyArtifacts(java.util.Map,java.util.Map)>
<org.apache.maven.toolchain.model.io.xpp3.MavenToolchainsXpp3Writer: void writeTrackableBase(org.apache.maven.toolchain.model.TrackableBase,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.execution.scope.internal.MojoExecutionScope: java.util.Collection getProvidedListeners()>
<org.apache.maven.artifact.repository.metadata.Versioning: void removeSnapshotVersion(org.apache.maven.artifact.repository.metadata.SnapshotVersion)>
<org.apache.maven.cli.transfer.ConsoleMavenTransferListener: void transferSucceeded(org.eclipse.aether.transfer.TransferEvent)>
<org.apache.maven.project.artifact.MavenMetadataSource: java.util.List retrieveAvailableVersionsFromMetadata(org.apache.maven.artifact.repository.metadata.Metadata,java.util.List)>
<org.apache.maven.model.io.xpp3.MavenXpp3Writer: void writePrerequisites(org.apache.maven.model.Prerequisites,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.plugin.DefaultPluginRealmCache: org.apache.maven.plugin.PluginRealmCache$CacheRecord get(org.apache.maven.plugin.PluginRealmCache$Key)>
<org.apache.maven.project.inheritance.DefaultModelInheritanceAssembler: void mergeReportPluginDefinitions(org.apache.maven.model.ReportPlugin,org.apache.maven.model.ReportPlugin,boolean)>
<org.apache.maven.project.interpolation.RegexBasedModelInterpolator: org.codehaus.plexus.interpolation.Interpolator createInterpolator()>
<org.apache.maven.artifact.resolver.AbstractArtifactResolutionException: java.lang.String constructArtifactPath(java.util.List,java.lang.String)>
<org.apache.maven.model.io.xpp3.MavenXpp3Writer: void writeFileSet(org.apache.maven.model.FileSet,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.model.Dependency: org.apache.maven.model.Dependency clone()>
<org.apache.maven.model.merge.ModelMerger: void mergeCiManagement_Notifiers(org.apache.maven.model.CiManagement,org.apache.maven.model.CiManagement,boolean,java.util.Map)>
<org.apache.maven.model.Site: void setLocation(java.lang.Object,org.apache.maven.model.InputLocation)>
<org.apache.maven.execution.DefaultMavenExecutionResult: org.apache.maven.execution.BuildSummary getBuildSummary(org.apache.maven.project.MavenProject)>
<org.apache.maven.model.ModelBase: void addPluginRepository(org.apache.maven.model.Repository)>
<org.apache.maven.profiles.DefaultProfileManager: void activateAsDefault(java.lang.String)>
<org.apache.maven.cli.MavenCli: void encryption(org.apache.maven.cli.CliRequest)>
<org.apache.maven.lifecycle.internal.DefaultLifecycleMappingDelegate: java.util.Map calculateLifecycleMappings(org.apache.maven.execution.MavenSession,org.apache.maven.project.MavenProject,org.apache.maven.lifecycle.Lifecycle,java.lang.String)>
<org.apache.maven.artifact.resolver.filter.OrArtifactFilter: boolean include(org.apache.maven.artifact.Artifact)>
<org.apache.maven.graph.DefaultGraphBuilder: org.apache.maven.model.building.Result reactorDependencyGraph(org.apache.maven.execution.MavenSession,java.util.List)>
<org.apache.maven.project.MavenProject: java.util.List getTestClasspathElements()>
<org.apache.maven.model.PluginContainer: java.util.Map getPluginsAsMap()>
<org.apache.maven.model.inheritance.DefaultInheritanceAssembler$InheritanceModelMerger: java.lang.String extrapolateChildUrl(java.lang.String,java.util.Map)>
<org.apache.maven.plugin.descriptor.InvalidPluginDescriptorException: void <init>(java.lang.String,java.lang.Throwable)>
<org.apache.maven.plugin.internal.DefaultMavenPluginManager: void releaseMojo(java.lang.Object,org.apache.maven.plugin.MojoExecution)>
<org.apache.maven.toolchain.model.io.xpp3.MavenToolchainsXpp3Reader: boolean checkFieldWithDuplicate(org.codehaus.plexus.util.xml.pull.XmlPullParser,java.lang.String,java.lang.String,java.util.Set)>
<org.apache.maven.repository.legacy.resolver.DefaultLegacyArtifactCollector: void recurse(org.apache.maven.artifact.resolver.ArtifactResolutionResult,org.apache.maven.artifact.resolver.ResolutionNode,java.util.Map,org.apache.maven.artifact.versioning.ManagedVersionMap,org.apache.maven.artifact.resolver.ArtifactResolutionRequest,org.apache.maven.artifact.metadata.ArtifactMetadataSource,org.apache.maven.artifact.resolver.filter.ArtifactFilter,java.util.List,java.util.List)>
<org.apache.maven.bridge.MavenRepositorySystem: void injectProxy(org.eclipse.aether.RepositorySystemSession,java.util.List)>
<org.apache.maven.usability.plugin.ExpressionDocumenter: java.util.Map load()>
<org.apache.maven.model.ModelBase: org.apache.maven.model.ModelBase clone()>
<org.apache.maven.plugin.internal.ValidatingConfigurationListener: void <init>(java.lang.Object,org.apache.maven.plugin.descriptor.MojoDescriptor,org.codehaus.plexus.component.configurator.ConfigurationListener)>
<org.apache.maven.internal.aether.LoggingRepositoryListener: void metadataResolved(org.eclipse.aether.RepositoryEvent)>
<org.apache.maven.plugin.DefaultPluginArtifactsCache: org.apache.maven.plugin.PluginArtifactsCache$CacheRecord get(org.apache.maven.plugin.PluginArtifactsCache$Key)>
<org.apache.maven.repository.legacy.DefaultWagonManager: org.apache.maven.wagon.authentication.AuthenticationInfo authenticationInfo(org.apache.maven.artifact.repository.ArtifactRepository)>
<org.apache.maven.classrealm.DefaultClassRealmManager: org.codehaus.plexus.classworlds.realm.ClassRealm newRealm(java.lang.String)>
<org.apache.maven.repository.metadata.MetadataResolutionResult: void initTreeProcessing(org.codehaus.plexus.PlexusContainer)>
<org.apache.maven.model.merge.MavenModelMerger: void mergeModel_Contributors(org.apache.maven.model.Model,org.apache.maven.model.Model,boolean,java.util.Map)>
<org.apache.maven.repository.internal.RemoteSnapshotMetadata: void merge(org.apache.maven.artifact.repository.metadata.Metadata)>
<org.apache.maven.project.interpolation.StringSearchModelInterpolator: void interpolateObject(java.lang.Object,org.apache.maven.model.Model,java.io.File,org.apache.maven.project.ProjectBuilderConfiguration,boolean)>
<org.apache.maven.model.ActivationFile: org.apache.maven.model.InputLocation getLocation(java.lang.Object)>
<org.apache.maven.lifecycle.internal.MojoExecutor: org.apache.maven.artifact.resolver.filter.ArtifactFilter getArtifactFilter(org.apache.maven.plugin.descriptor.MojoDescriptor)>
<org.apache.maven.model.io.xpp3.MavenXpp3Reader: int nextTag(org.codehaus.plexus.util.xml.pull.XmlPullParser)>
<org.apache.maven.profiles.activation.OperatingSystemProfileActivator: boolean determineVersionMatch(java.lang.String)>
<org.apache.maven.project.ProjectSorter: void <init>(java.util.Collection)>
<org.apache.maven.plugin.lifecycle.io.xpp3.LifecycleMappingsXpp3Reader: boolean checkFieldWithDuplicate(org.codehaus.plexus.util.xml.pull.XmlPullParser,java.lang.String,java.lang.String,java.util.Set)>
<org.apache.maven.plugin.DefaultExtensionRealmCache: org.apache.maven.plugin.ExtensionRealmCache$CacheRecord put(org.apache.maven.plugin.ExtensionRealmCache$Key,org.codehaus.plexus.classworlds.realm.ClassRealm,org.apache.maven.project.ExtensionDescriptor,java.util.List)>
<org.apache.maven.settings.Settings: org.apache.maven.settings.Proxy getActiveProxy()>
<org.apache.maven.model.ModelBase: void addRepository(org.apache.maven.model.Repository)>
<org.apache.maven.RepositoryUtils: java.util.List toRepos(java.util.List)>
<org.apache.maven.ReactorReader: void <init>(org.apache.maven.execution.MavenSession)>
<org.apache.maven.repository.metadata.ClasspathContainer: org.apache.maven.repository.metadata.MetadataTreeNode getClasspathAsTree()>
<org.apache.maven.model.PatternSet: void setLocation(java.lang.Object,org.apache.maven.model.InputLocation)>
<org.apache.maven.settings.Settings: void removeActiveProfile(java.lang.String)>
<org.apache.maven.settings.io.xpp3.SettingsXpp3Reader: boolean checkFieldWithDuplicate(org.codehaus.plexus.util.xml.pull.XmlPullParser,java.lang.String,java.lang.String,java.util.Set)>
<org.apache.maven.model.validation.DefaultModelValidator: boolean validateEnum(java.lang.String,org.apache.maven.model.building.ModelProblemCollector,org.apache.maven.model.building.ModelProblem$Severity,org.apache.maven.model.building.ModelProblem$Version,java.lang.String,java.lang.String,org.apache.maven.model.InputLocationTracker,java.lang.String[])>
<org.apache.maven.plugin.lifecycle.io.xpp3.LifecycleMappingsXpp3Writer: void write(java.io.OutputStream,org.apache.maven.plugin.lifecycle.LifecycleConfiguration)>
<org.apache.maven.artifact.repository.metadata.DefaultRepositoryMetadataManager: void resolveAlways(org.apache.maven.artifact.repository.metadata.RepositoryMetadata,org.apache.maven.artifact.repository.ArtifactRepository,org.apache.maven.artifact.repository.ArtifactRepository)>
<org.apache.maven.lifecycle.internal.LifecycleDependencyResolver: java.util.Set getDependencies(org.apache.maven.project.MavenProject,java.util.Collection,java.util.Collection,org.apache.maven.execution.MavenSession,boolean,java.util.Set)>
<org.apache.maven.repository.internal.DefaultVersionResolver$Key: boolean equals(java.lang.Object)>
<org.apache.maven.model.merge.ModelMerger: void mergeModel_MailingLists(org.apache.maven.model.Model,org.apache.maven.model.Model,boolean,java.util.Map)>
<org.apache.maven.repository.internal.RelocatedArtifact: java.util.Map getProperties()>
<org.apache.maven.artifact.resolver.ResolutionNode: void disable()>
<org.apache.maven.repository.internal.MavenSnapshotMetadata: void bind(org.eclipse.aether.artifact.Artifact)>
<org.apache.maven.cli.MavenCli$1: void <init>(org.apache.maven.cli.MavenCli,org.apache.maven.extension.internal.CoreExports)>
<org.apache.maven.cli.transfer.AbstractMavenTransferListener$FileSizeFormat$ScaleUnit: org.apache.maven.cli.transfer.AbstractMavenTransferListener$FileSizeFormat$ScaleUnit[] values()>
<org.apache.maven.model.Reporting: void addPlugin(org.apache.maven.model.ReportPlugin)>
<org.apache.maven.exception.DefaultExceptionHandler: org.apache.maven.exception.ExceptionSummary handle(org.apache.maven.model.building.ModelProblem,java.lang.String)>
<org.apache.maven.lifecycle.internal.DefaultMojoExecutionConfigurator: org.apache.maven.model.PluginExecution findPluginExecution(java.lang.String,java.util.Collection)>
<org.apache.maven.repository.internal.RemoteSnapshotMetadataGenerator: org.eclipse.aether.artifact.Artifact transformArtifact(org.eclipse.aether.artifact.Artifact)>
<org.apache.maven.profiles.io.xpp3.ProfilesXpp3Writer: void writeActivationFile(org.apache.maven.profiles.ActivationFile,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.artifact.repository.metadata.io.xpp3.MetadataXpp3Reader: org.apache.maven.artifact.repository.metadata.Metadata read(java.io.Reader,boolean)>
<org.apache.maven.artifact.repository.metadata.io.xpp3.MetadataXpp3Reader: float getFloatValue(java.lang.String,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.model.io.xpp3.MavenXpp3ReaderEx: org.apache.maven.model.Repository parseRepository(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean,org.apache.maven.model.InputSource)>
<org.apache.maven.cli.logging.Slf4jLogger: boolean isDebugEnabled()>
<org.apache.maven.model.io.xpp3.MavenXpp3Reader: org.apache.maven.model.ModelBase parseModelBase(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.artifact.handler.manager.DefaultArtifactHandlerManager: org.apache.maven.artifact.handler.ArtifactHandler getArtifactHandler(java.lang.String)>
<org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph: java.util.List getSchedulableNewProcesses(org.apache.maven.project.MavenProject)>
<org.apache.maven.repository.internal.RelocatedArtifact: java.lang.String getVersion()>
<org.apache.maven.model.merge.ModelMerger: void mergeModel_Contributors(org.apache.maven.model.Model,org.apache.maven.model.Model,boolean,java.util.Map)>
<org.apache.maven.model.PatternSet: void addInclude(java.lang.String)>
<org.apache.maven.plugin.lifecycle.io.xpp3.LifecycleMappingsXpp3Writer: void writeLifecycleConfiguration(org.apache.maven.plugin.lifecycle.LifecycleConfiguration,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.repository.internal.DefaultArtifactDescriptorReader: void <init>()>
<org.apache.maven.repository.internal.DefaultVersionRangeResolver: void invalidMetadata(org.eclipse.aether.RepositorySystemSession,org.eclipse.aether.RequestTrace,org.eclipse.aether.metadata.Metadata,org.eclipse.aether.repository.ArtifactRepository,java.lang.Exception)>
<org.apache.maven.plugin.DefaultExtensionRealmCache: org.apache.maven.plugin.ExtensionRealmCache$CacheRecord get(org.apache.maven.plugin.ExtensionRealmCache$Key)>
<org.apache.maven.project.artifact.DefaultMavenMetadataCache: boolean repositoryEquals(org.apache.maven.artifact.repository.ArtifactRepository,org.apache.maven.artifact.repository.ArtifactRepository)>
<org.apache.maven.plugin.internal.ValidatingConfigurationListener: void notify(java.lang.String,java.lang.Object)>
<org.apache.maven.model.merge.MavenModelMerger: void mergeModel_Developers(org.apache.maven.model.Model,org.apache.maven.model.Model,boolean,java.util.Map)>
<org.apache.maven.settings.io.xpp3.SettingsXpp3Reader: org.apache.maven.settings.RepositoryPolicy parseRepositoryPolicy(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.project.MavenProject: java.lang.Object getContextValue(java.lang.String)>
<org.apache.maven.profiles.ProfilesRoot: void addProfile(org.apache.maven.profiles.Profile)>
<org.apache.maven.eventspy.internal.EventSpyRepositoryListener: void artifactDescriptorMissing(org.eclipse.aether.RepositoryEvent)>
<org.apache.maven.cli.MavenCli: org.apache.maven.model.building.ModelProcessor createModelProcessor(org.codehaus.plexus.PlexusContainer)>
<org.apache.maven.graph.DefaultProjectDependencyGraph: void getUpstreamProjects(java.lang.String,java.util.Collection,boolean)>
<org.apache.maven.artifact.manager.DefaultWagonManager: org.apache.maven.wagon.proxy.ProxyInfo getProxy(java.lang.String)>
<org.apache.maven.model.io.xpp3.MavenXpp3ReaderEx: org.apache.maven.model.Organization parseOrganization(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean,org.apache.maven.model.InputSource)>
<org.apache.maven.model.management.DefaultDependencyManagementInjector$ManagementModelMerger: void mergeManagedDependencies(org.apache.maven.model.Model)>
<org.apache.maven.project.artifact.DefaultMavenMetadataCache: org.apache.maven.artifact.metadata.ResolutionGroup get(org.apache.maven.artifact.Artifact,boolean,org.apache.maven.artifact.repository.ArtifactRepository,java.util.List)>
<org.apache.maven.project.MavenProject: void addProjectReference(org.apache.maven.project.MavenProject)>
<org.apache.maven.toolchain.model.io.xpp3.MavenToolchainsXpp3Reader: java.lang.String getRequiredAttributeValue(java.lang.String,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.plugin.descriptor.MojoDescriptor: void setParameters(java.util.List)>
<org.apache.maven.cli.internal.extension.model.io.xpp3.CoreExtensionsXpp3Reader: double getDoubleValue(java.lang.String,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.model.merge.ModelMerger: void mergeModelBase_PluginRepositories(org.apache.maven.model.ModelBase,org.apache.maven.model.ModelBase,boolean,java.util.Map)>
<org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver: void mergeMetadata(org.eclipse.aether.RepositorySystemSession,org.eclipse.aether.RequestTrace,org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver$Versions,org.eclipse.aether.metadata.Metadata,org.eclipse.aether.repository.ArtifactRepository)>
<org.apache.maven.cli.MavenCli: java.util.List loadCoreExtensions(org.apache.maven.cli.CliRequest,org.codehaus.plexus.classworlds.realm.ClassRealm,java.util.Set)>
<org.apache.maven.configuration.internal.DefaultBeanConfigurator$BeanExpressionEvaluator: java.lang.Object evaluate(java.lang.String,java.lang.Class)>
<org.apache.maven.repository.metadata.ClasspathContainer: org.apache.maven.repository.metadata.ClasspathContainer add(org.apache.maven.repository.metadata.ArtifactMetadata)>
<org.apache.maven.model.io.xpp3.MavenXpp3Reader: org.apache.maven.model.DependencyManagement parseDependencyManagement(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.project.artifact.DefaultMavenMetadataCache: boolean eq(java.lang.Object,java.lang.Object)>
<org.apache.maven.plugin.internal.DefaultMavenPluginManager: org.apache.maven.plugin.descriptor.PluginDescriptor parsePluginDescriptor(java.io.InputStream,org.apache.maven.model.Plugin,java.lang.String)>
<org.apache.maven.repository.internal.DefaultVersionResolver: org.apache.maven.repository.internal.DefaultVersionResolver setSyncContextFactory(org.eclipse.aether.impl.SyncContextFactory)>
<org.apache.maven.artifact.resolver.DefaultArtifactResolver$1: void execute(java.lang.Runnable)>
<org.apache.maven.artifact.resolver.ResolutionNode: boolean filterTrail(org.apache.maven.artifact.resolver.filter.ArtifactFilter)>
<org.apache.maven.project.validation.ModelValidationResult: void addMessage(java.lang.String)>
<org.apache.maven.artifact.repository.metadata.Versioning: org.apache.maven.artifact.repository.metadata.Versioning clone()>
<org.apache.maven.profiles.io.xpp3.ProfilesXpp3Reader: org.apache.maven.profiles.ActivationFile parseActivationFile(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.plugin.lifecycle.io.xpp3.LifecycleMappingsXpp3Reader: java.util.Date getDateValue(java.lang.String,java.lang.String,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlPullParser)>
<org.apache.maven.lifecycle.internal.DependencyContext: boolean isResolutionRequiredForAggregatedProjects(java.util.Collection,java.util.Collection)>
<org.apache.maven.plugin.lifecycle.io.xpp3.LifecycleMappingsXpp3Reader: org.apache.maven.plugin.lifecycle.Phase parsePhase(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.repository.internal.VersionsMetadata: java.lang.String getArtifactId()>
<org.apache.maven.toolchain.merge.MavenToolchainMerger: void shallowMerge(java.util.List,java.util.List,java.lang.String)>
<org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator: java.util.List calculateMojoExecutions(org.apache.maven.execution.MavenSession,org.apache.maven.project.MavenProject,java.util.List)>
<org.apache.maven.exception.DefaultExceptionHandler: java.lang.String getReference(java.lang.Throwable)>
<org.apache.maven.artifact.resolver.DebugResolutionListener: void manageArtifactVersion(org.apache.maven.artifact.Artifact,org.apache.maven.artifact.Artifact)>
<org.apache.maven.plugin.descriptor.PluginDescriptorBuilder: org.apache.maven.plugin.descriptor.PluginDescriptor build(java.io.Reader,java.lang.String)>
<org.apache.maven.settings.Settings: java.util.Map getProfilesAsMap()>
<org.apache.maven.model.Dependency: void setLocation(java.lang.Object,org.apache.maven.model.InputLocation)>
<org.apache.maven.model.io.xpp3.MavenXpp3ReaderEx: org.apache.maven.model.BuildBase parseBuildBase(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean,org.apache.maven.model.InputSource)>
<org.apache.maven.project.ProjectSorter: java.util.List getDependents(java.lang.String)>
<org.apache.maven.toolchain.building.DefaultToolchainsBuilder: boolean hasErrors(java.util.List)>
<org.apache.maven.repository.metadata.MetadataGraph: java.util.List getIncidentEdges(org.apache.maven.repository.metadata.MetadataGraphVertex)>
<org.apache.maven.eventspy.internal.EventSpyRepositoryListener: void artifactResolved(org.eclipse.aether.RepositoryEvent)>
<org.apache.maven.model.io.xpp3.MavenXpp3Reader: java.lang.String getRequiredAttributeValue(java.lang.String,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.model.io.xpp3.MavenXpp3Reader: org.apache.maven.model.Build parseBuild(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.settings.io.DefaultSettingsReader: org.apache.maven.settings.Settings read(java.io.InputStream,java.util.Map)>
<org.apache.maven.cli.internal.extension.model.io.xpp3.CoreExtensionsXpp3Reader: int getIntegerValue(java.lang.String,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.artifact.repository.LegacyLocalRepositoryManager: org.eclipse.aether.repository.LocalMetadataResult find(org.eclipse.aether.RepositorySystemSession,org.eclipse.aether.repository.LocalMetadataRequest)>
<org.apache.maven.model.ActivationOS: void setLocation(java.lang.Object,org.apache.maven.model.InputLocation)>
<org.apache.maven.execution.ReactorManager: boolean hasBuildFailures()>
<org.apache.maven.repository.legacy.LegacyRepositorySystem: void injectMirror(java.util.List,java.util.List)>
<org.apache.maven.plugin.lifecycle.Execution: void addGoal(java.lang.String)>
<org.apache.maven.project.DefaultDependencyResolutionResult: void setResolutionErrors(org.eclipse.aether.graph.Dependency,java.util.List)>
<org.apache.maven.model.building.DefaultModelBuildingResult: org.apache.maven.model.building.DefaultModelBuildingResult addModelId(java.lang.String)>
<org.apache.maven.model.PatternSet: org.apache.maven.model.PatternSet clone()>
<org.apache.maven.cli.MavenCli: void configure(org.apache.maven.cli.CliRequest)>
<org.apache.maven.repository.internal.DefaultArtifactDescriptorReader: void <init>(org.eclipse.aether.impl.RemoteRepositoryManager,org.eclipse.aether.impl.VersionResolver,org.eclipse.aether.impl.VersionRangeResolver,org.eclipse.aether.impl.ArtifactResolver,org.apache.maven.model.building.ModelBuilder,org.eclipse.aether.impl.RepositoryEventDispatcher,org.eclipse.aether.spi.log.LoggerFactory)>
<org.apache.maven.repository.legacy.DefaultWagonManager: org.apache.maven.wagon.Wagon getWagon(org.apache.maven.wagon.repository.Repository)>
<org.apache.maven.lifecycle.internal.LifecycleDebugLogger: void debugMojoExecution(org.apache.maven.plugin.MojoExecution)>
<org.apache.maven.profiles.io.xpp3.ProfilesXpp3Writer: void writeProfilesRoot(org.apache.maven.profiles.ProfilesRoot,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.graph.DefaultGraphBuilder: void collectProjects(java.util.List,java.util.List,org.apache.maven.execution.MavenExecutionRequest)>
<org.apache.maven.plugin.lifecycle.io.xpp3.LifecycleMappingsXpp3Reader: org.apache.maven.plugin.lifecycle.LifecycleConfiguration read(java.io.InputStream,boolean)>
<org.apache.maven.artifact.repository.metadata.io.DefaultMetadataReader: boolean isStrict(java.util.Map)>
<org.apache.maven.lifecycle.MavenExecutionPlan: java.util.Iterator iterator()>
<org.apache.maven.cli.MavenCli: org.apache.maven.execution.MavenExecutionRequest populateRequest(org.apache.maven.cli.CliRequest,org.apache.maven.execution.MavenExecutionRequest)>
<org.apache.maven.project.artifact.MavenMetadataSource: void injectSession(org.apache.maven.repository.legacy.metadata.MetadataResolutionRequest)>
<org.apache.maven.artifact.repository.metadata.io.xpp3.MetadataXpp3Reader: org.apache.maven.artifact.repository.metadata.Metadata parseMetadata(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.repository.internal.RelocatedArtifact: void <init>(org.eclipse.aether.artifact.Artifact,java.lang.String,java.lang.String,java.lang.String)>
<org.apache.maven.execution.DefaultMavenExecutionRequest: java.util.Map getData()>
<org.apache.maven.model.RepositoryBase: void setLocation(java.lang.Object,org.apache.maven.model.InputLocation)>
<org.apache.maven.profiles.io.xpp3.ProfilesXpp3Reader: long getLongValue(java.lang.String,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.artifact.resolver.ArtifactResolutionResult: org.apache.maven.artifact.resolver.ArtifactResolutionResult addVersionRangeViolation(java.lang.Exception)>
<org.apache.maven.model.plugin.DefaultReportingConverter: void addDom(org.codehaus.plexus.util.xml.Xpp3Dom,java.lang.String,java.lang.String)>
<org.apache.maven.settings.Settings: org.apache.maven.settings.Settings clone()>
<org.apache.maven.lifecycle.internal.DefaultMojoExecutionConfigurator: org.apache.maven.model.Plugin findPlugin(java.lang.String,java.lang.String,java.util.Collection)>
<org.apache.maven.lifecycle.internal.MojoExecutor: void collectDependencyRequirements(java.util.Set,java.util.Set,java.util.Collection)>
<org.apache.maven.toolchain.model.io.xpp3.MavenToolchainsXpp3Writer: void writeToolchainModel(org.apache.maven.toolchain.model.ToolchainModel,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.model.io.xpp3.MavenXpp3Writer: void writeModel(org.apache.maven.model.Model,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.cli.internal.extension.model.io.xpp3.CoreExtensionsXpp3Writer: void writeCoreExtension(org.apache.maven.cli.internal.extension.model.CoreExtension,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.cli.event.ExecutionEventLogger: void sessionEnded(org.apache.maven.execution.ExecutionEvent)>
<org.apache.maven.settings.Profile: void removePluginRepository(org.apache.maven.settings.Repository)>
<org.apache.maven.lifecycle.internal.DefaultLifecycleTaskSegmentCalculator: boolean requiresProject(org.apache.maven.execution.MavenSession)>
<org.apache.maven.classrealm.ArtifactClassRealmConstituent: java.lang.String getGroupId()>
<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.VersionRange cloneOf()>
<org.apache.maven.model.interpolation.StringSearchModelInterpolator$InterpolateObjectAction: org.apache.maven.model.interpolation.StringSearchModelInterpolator$InterpolateObjectAction$CacheItem getCacheEntry(java.lang.Class)>
<org.apache.maven.repository.legacy.MavenArtifact: long getContentLength()>
<org.apache.maven.repository.internal.VersionsMetadataGenerator: void <init>(org.eclipse.aether.RepositorySystemSession,org.eclipse.aether.installation.InstallRequest)>
<org.apache.maven.eventspy.internal.EventSpyDispatcher: void close()>
<org.apache.maven.model.interpolation.ProblemDetectingValueSource: java.util.List getFeedback()>
<org.apache.maven.plugin.DefaultProjectArtifactsCache$CacheKey: void <init>(org.apache.maven.project.MavenProject,java.util.List,java.util.Collection,java.util.Collection,boolean,org.eclipse.aether.RepositorySystemSession)>
<org.apache.maven.profiles.DefaultProfileManager: void addProfile(org.apache.maven.model.Profile)>
<org.apache.maven.repository.legacy.DefaultUpdateCheckManager: java.util.Properties read(java.io.File)>
<org.apache.maven.profiles.io.xpp3.ProfilesXpp3Reader: org.apache.maven.profiles.ProfilesRoot read(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.cli.MavenCli: void commands(org.apache.maven.cli.CliRequest)>
<org.apache.maven.project.DefaultProjectDependenciesResolver: org.apache.maven.project.DependencyResolutionResult resolve(org.apache.maven.project.DependencyResolutionRequest)>
<org.apache.maven.model.io.xpp3.MavenXpp3ReaderEx: org.apache.maven.model.ModelBase parseModelBase(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean,org.apache.maven.model.InputSource)>
<org.apache.maven.artifact.resolver.ArtifactResolutionResult: org.apache.maven.artifact.resolver.ArtifactResolutionResult addMetadataResolutionException(org.apache.maven.artifact.resolver.ArtifactResolutionException)>
<org.apache.maven.model.ReportSet: void addReport(java.lang.String)>
<org.apache.maven.model.Reporting: void setLocation(java.lang.Object,org.apache.maven.model.InputLocation)>
<org.apache.maven.execution.scope.internal.MojoExecutionScope$ScopeState: void <init>()>
<org.apache.maven.repository.legacy.DefaultWagonManager: void disconnectWagon(org.apache.maven.wagon.Wagon)>
<org.apache.maven.repository.internal.DefaultVersionResolver: void <init>()>
<org.apache.maven.plugin.internal.PluginDependencyResolutionListener: void removeBannedDependencies(java.util.Collection)>
<org.apache.maven.model.io.xpp3.MavenXpp3Reader: org.apache.maven.model.Relocation parseRelocation(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.model.io.xpp3.MavenXpp3Reader: org.apache.maven.model.Parent parseParent(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.toolchain.model.io.xpp3.MavenToolchainsXpp3Reader: void checkUnknownAttribute(org.codehaus.plexus.util.xml.pull.XmlPullParser,java.lang.String,java.lang.String,boolean)>
<org.apache.maven.model.merge.ModelMerger: void mergePluginContainer_Plugins(org.apache.maven.model.PluginContainer,org.apache.maven.model.PluginContainer,boolean,java.util.Map)>
<org.apache.maven.model.building.Result: org.apache.maven.model.building.Result error(org.apache.maven.model.building.Result[])>
<org.apache.maven.repository.internal.RelocatedArtifact: java.lang.String getArtifactId()>
<org.apache.maven.model.io.xpp3.MavenXpp3Reader: org.apache.maven.model.PluginManagement parsePluginManagement(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.repository.internal.RemoteSnapshotMetadataGenerator: java.util.Collection prepare(java.util.Collection)>
<org.apache.maven.artifact.installer.DefaultArtifactInstaller: void <init>()>
<org.apache.maven.artifact.resolver.filter.ExclusionSetFilter: boolean equals(java.lang.Object)>
<org.apache.maven.model.Plugin: void addDependency(org.apache.maven.model.Dependency)>
<org.apache.maven.model.io.xpp3.MavenXpp3Reader: org.apache.maven.model.Reporting parseReporting(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.execution.scope.internal.MojoExecutionScope: void afterMojoExecutionSuccess(org.apache.maven.execution.MojoExecutionEvent)>
<org.apache.maven.model.building.ModelProblem$Version: org.apache.maven.model.building.ModelProblem$Version[] values()>
<org.apache.maven.artifact.repository.metadata.DefaultRepositoryMetadataManager: void <init>()>
<org.apache.maven.model.io.xpp3.MavenXpp3ReaderEx: org.apache.maven.model.Notifier parseNotifier(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean,org.apache.maven.model.InputSource)>
<org.apache.maven.project.MavenProject: java.util.List getSystemClasspathElements()>
<org.apache.maven.model.building.DefaultModelProblemCollector: org.apache.maven.model.building.ModelBuildingException newModelBuildingException()>
<org.apache.maven.model.io.xpp3.MavenXpp3Writer: void writeBuildBase(org.apache.maven.model.BuildBase,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.model.merge.MavenModelMerger: void mergeBuildBase_Resources(org.apache.maven.model.BuildBase,org.apache.maven.model.BuildBase,boolean,java.util.Map)>
<org.apache.maven.project.ModelUtils: java.util.List orderAfterMerge(java.util.List,java.util.List,java.util.List)>
<org.apache.maven.artifact.repository.metadata.DefaultRepositoryMetadataManager: void deploy(org.apache.maven.artifact.metadata.ArtifactMetadata,org.apache.maven.artifact.repository.ArtifactRepository,org.apache.maven.artifact.repository.ArtifactRepository)>
<org.apache.maven.plugin.prefix.internal.DefaultPluginPrefixResolver: org.apache.maven.plugin.prefix.PluginPrefixResult resolveFromRepository(org.apache.maven.plugin.prefix.PluginPrefixRequest,org.eclipse.aether.RequestTrace,java.lang.String,org.eclipse.aether.metadata.Metadata,org.eclipse.aether.repository.ArtifactRepository)>
<org.apache.maven.model.io.xpp3.MavenXpp3Reader: short getShortValue(java.lang.String,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.usability.plugin.io.xpp3.ParamdocXpp3Reader: java.util.Date getDateValue(java.lang.String,java.lang.String,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlPullParser)>
<org.apache.maven.cli.event.ExecutionEventLogger: void append(org.apache.maven.shared.utils.logging.MessageBuilder,org.apache.maven.plugin.MojoExecution)>
<org.apache.maven.model.merge.ModelMerger: void mergeReporting_Plugins(org.apache.maven.model.Reporting,org.apache.maven.model.Reporting,boolean,java.util.Map)>
<org.apache.maven.usability.plugin.ExpressionDocumentation: void addExpression(org.apache.maven.usability.plugin.Expression)>
<org.apache.maven.model.io.xpp3.MavenXpp3Reader: byte getByteValue(java.lang.String,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.model.io.xpp3.MavenXpp3ReaderEx: void checkUnknownAttribute(org.codehaus.plexus.util.xml.pull.XmlPullParser,java.lang.String,java.lang.String,boolean)>
<org.apache.maven.repository.legacy.repository.DefaultArtifactRepositoryFactory: org.apache.maven.artifact.repository.ArtifactRepository createDeploymentArtifactRepository(java.lang.String,java.lang.String,java.lang.String,boolean)>
<org.apache.maven.plugin.descriptor.PluginDescriptorBuilder: org.apache.maven.plugin.descriptor.MojoDescriptor buildComponentDescriptor(org.codehaus.plexus.configuration.PlexusConfiguration,org.apache.maven.plugin.descriptor.PluginDescriptor)>
<org.apache.maven.artifact.repository.LegacyLocalRepositoryManager$ArtifactMetadataAdapter: java.lang.String getArtifactId()>
<org.apache.maven.artifact.repository.metadata.io.xpp3.MetadataXpp3Reader: org.apache.maven.artifact.repository.metadata.Plugin parsePlugin(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.artifact.versioning.VersionRange: boolean hasRestrictions()>
<org.apache.maven.artifact.repository.metadata.io.xpp3.MetadataXpp3Writer: void writePlugin(org.apache.maven.artifact.repository.metadata.Plugin,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.cli.event.ExecutionEventLogger: void <init>(org.slf4j.Logger)>
<org.apache.maven.artifact.repository.metadata.Metadata: void removePlugin(org.apache.maven.artifact.repository.metadata.Plugin)>
<org.apache.maven.model.io.xpp3.MavenXpp3Writer: void writeModelBase(org.apache.maven.model.ModelBase,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.model.DistributionManagement: org.apache.maven.model.InputLocation getLocation(java.lang.Object)>
<org.apache.maven.model.io.xpp3.MavenXpp3ReaderEx: org.apache.maven.model.DeploymentRepository parseDeploymentRepository(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean,org.apache.maven.model.InputSource)>
<org.apache.maven.model.IssueManagement: void setLocation(java.lang.Object,org.apache.maven.model.InputLocation)>
<org.apache.maven.eventspy.internal.EventSpyRepositoryListener: void metadataInvalid(org.eclipse.aether.RepositoryEvent)>
<org.apache.maven.project.ReactorModelCache: java.lang.Object get(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<org.apache.maven.project.DefaultDependencyResolutionResult: java.util.List getResolutionErrors(org.eclipse.aether.graph.Dependency)>
<org.apache.maven.project.MavenProject: void setContextValue(java.lang.String,java.lang.Object)>
<org.apache.maven.classrealm.DefaultClassRealmManager: org.codehaus.plexus.classworlds.realm.ClassRealm createRealm(java.lang.String,org.apache.maven.classrealm.ClassRealmRequest$RealmType,java.lang.ClassLoader,java.util.List,java.util.Map,java.util.List)>
<org.apache.maven.artifact.resolver.DefaultArtifactResolver: org.apache.maven.artifact.resolver.ArtifactResolutionResult resolve(org.apache.maven.artifact.resolver.ArtifactResolutionRequest)>
<org.apache.maven.project.interpolation.AbstractStringBasedModelInterpolator: void <init>(org.apache.maven.project.path.PathTranslator)>
<org.apache.maven.eventspy.internal.EventSpyRepositoryListener: void artifactDeployed(org.eclipse.aether.RepositoryEvent)>
<org.apache.maven.toolchain.java.JavaToolchainImpl: java.io.File findTool(java.lang.String,java.io.File)>
<org.apache.maven.model.merge.MavenModelMerger: void mergeModel_MailingLists(org.apache.maven.model.Model,org.apache.maven.model.Model,boolean,java.util.Map)>
<org.apache.maven.cli.configuration.SettingsXmlConfigurationProcessor: void process(org.apache.maven.cli.CliRequest)>
<org.apache.maven.cli.logging.Slf4jConfigurationFactory: org.apache.maven.cli.logging.Slf4jConfiguration getConfiguration(org.slf4j.ILoggerFactory)>
<org.apache.maven.classrealm.ArtifactClassRealmConstituent: java.lang.String getClassifier()>
<org.apache.maven.artifact.resolver.filter.ExclusionSetFilter: int hashCode()>
<org.apache.maven.artifact.versioning.ComparableVersion$StringItem: java.lang.String comparableQualifier(java.lang.String)>
<org.apache.maven.model.Reporting: org.apache.maven.model.InputLocation getLocation(java.lang.Object)>
<org.apache.maven.artifact.resolver.DebugResolutionListener: void manageArtifact(org.apache.maven.artifact.Artifact,org.apache.maven.artifact.Artifact)>
<org.apache.maven.model.profile.DefaultProfileSelector: org.apache.maven.model.profile.DefaultProfileSelector addProfileActivator(org.apache.maven.model.profile.activation.ProfileActivator)>
<org.apache.maven.cli.internal.extension.model.io.xpp3.CoreExtensionsXpp3Reader: org.apache.maven.cli.internal.extension.model.CoreExtensions read(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.profiles.activation.SystemPropertyProfileActivator: boolean isActive(org.apache.maven.model.Profile)>
<org.apache.maven.plugin.prefix.internal.DefaultPluginPrefixResolver: org.apache.maven.plugin.prefix.PluginPrefixResult resolveFromRepository(org.apache.maven.plugin.prefix.PluginPrefixRequest)>
<org.apache.maven.plugin.lifecycle.io.xpp3.LifecycleMappingsXpp3Reader: int getIntegerValue(java.lang.String,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.repository.legacy.LegacyRepositorySystem: org.apache.maven.settings.Proxy getProxy(org.apache.maven.artifact.repository.ArtifactRepository,java.util.List)>
<org.apache.maven.model.PluginExecution: void removeGoal(java.lang.String)>
<org.apache.maven.session.scope.internal.SessionScopeModule: void <init>(org.apache.maven.session.scope.internal.SessionScope)>
<org.apache.maven.project.MavenProject: java.util.List getCompileArtifacts()>
<org.apache.maven.artifact.versioning.VersionRange: int hashCode()>
<org.apache.maven.model.io.DefaultModelReader: org.apache.maven.model.Model read(java.io.Reader,boolean,org.apache.maven.model.InputSource)>
<org.apache.maven.project.DefaultProjectBuilder: void populateReactorModelPool(org.apache.maven.project.ReactorModelPool,java.util.List)>
<org.apache.maven.repository.internal.DefaultModelCache: java.lang.Object get(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<org.apache.maven.repository.DelegatingLocalArtifactRepository: java.lang.String getUrl()>
<org.apache.maven.model.io.DefaultModelReader: org.apache.maven.model.Model read(java.io.File,java.util.Map)>
<org.apache.maven.project.validation.ModelValidationResult: java.lang.String render(java.lang.String)>
<org.apache.maven.repository.legacy.repository.DefaultArtifactRepositoryFactory: org.apache.maven.artifact.repository.ArtifactRepository createArtifactRepository(java.lang.String,java.lang.String,java.lang.String,org.apache.maven.artifact.repository.ArtifactRepositoryPolicy,org.apache.maven.artifact.repository.ArtifactRepositoryPolicy)>
<org.apache.maven.settings.io.xpp3.SettingsXpp3Writer: void writeMirror(org.apache.maven.settings.Mirror,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.settings.io.xpp3.SettingsXpp3Reader: org.apache.maven.settings.Profile parseProfile(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.repository.metadata.MetadataGraph: java.util.List getExcidentEdges(org.apache.maven.repository.metadata.MetadataGraphVertex)>
<org.apache.maven.repository.MetadataResolutionResult: java.lang.String toString()>
<org.apache.maven.model.profile.DefaultProfileActivationContext: java.util.Map toMap(java.util.Properties)>
<org.apache.maven.settings.io.xpp3.SettingsXpp3Writer: void writeServer(org.apache.maven.settings.Server,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.plugin.lifecycle.io.xpp3.LifecycleMappingsXpp3Reader: short getShortValue(java.lang.String,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.lifecycle.internal.MojoDescriptorCreator: org.codehaus.plexus.util.xml.Xpp3Dom convert(org.apache.maven.plugin.descriptor.MojoDescriptor)>
<org.apache.maven.plugin.CompoundMojoExecutionListener: void afterMojoExecutionSuccess(org.apache.maven.execution.MojoExecutionEvent)>
<org.apache.maven.toolchain.DefaultToolchain: java.lang.String toString()>
<org.apache.maven.lifecycle.mapping.LifecyclePhase: java.util.Map toLegacyMap(java.util.Map)>
<org.apache.maven.eventspy.internal.EventSpyRepositoryListener: void artifactDownloaded(org.eclipse.aether.RepositoryEvent)>
<org.apache.maven.exception.DefaultExceptionHandler: java.lang.String join(java.lang.String,java.lang.String)>
<org.apache.maven.lifecycle.internal.ProjectBuildList: org.apache.maven.lifecycle.internal.ProjectSegment get(int)>
<org.apache.maven.project.DefaultProjectBuildingRequest: void setActiveProfileIds(java.util.List)>
<org.apache.maven.plugin.lifecycle.io.xpp3.LifecycleMappingsXpp3Reader: int nextTag(org.codehaus.plexus.util.xml.pull.XmlPullParser)>
<org.apache.maven.settings.building.DefaultSettingsBuilder$1: java.lang.Object execute(java.lang.String,java.lang.Object)>
<org.apache.maven.plugin.internal.WagonExcluder: org.eclipse.aether.collection.DependencySelector deriveChildSelector(org.eclipse.aether.collection.DependencyCollectionContext)>
<org.apache.maven.project.ProjectModelResolver: void addRepository(org.apache.maven.model.Repository,boolean)>
<org.apache.maven.eventspy.internal.EventSpyRepositoryListener: void artifactInstalling(org.eclipse.aether.RepositoryEvent)>
<org.apache.maven.artifact.repository.metadata.io.xpp3.MetadataXpp3Reader: void checkUnknownAttribute(org.codehaus.plexus.util.xml.pull.XmlPullParser,java.lang.String,java.lang.String,boolean)>
<org.apache.maven.repository.legacy.LegacyRepositorySystem: org.apache.maven.artifact.repository.Authentication getAuthentication(org.eclipse.aether.RepositorySystemSession,org.apache.maven.artifact.repository.ArtifactRepository)>
<org.apache.maven.model.profile.DefaultProfileSelector: java.util.List getActiveProfiles(java.util.Collection,org.apache.maven.model.profile.ProfileActivationContext,org.apache.maven.model.building.ModelProblemCollector)>
<org.apache.maven.artifact.repository.metadata.io.xpp3.MetadataXpp3Reader: org.apache.maven.artifact.repository.metadata.Snapshot parseSnapshot(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.model.merge.ModelMerger: void mergeDependency_Exclusions(org.apache.maven.model.Dependency,org.apache.maven.model.Dependency,boolean,java.util.Map)>
<org.apache.maven.project.DefaultProjectRealmCache: org.apache.maven.project.ProjectRealmCache$CacheRecord put(org.apache.maven.project.ProjectRealmCache$Key,org.codehaus.plexus.classworlds.realm.ClassRealm,org.eclipse.aether.graph.DependencyFilter)>
<org.apache.maven.toolchain.model.PersistedToolchains: org.apache.maven.toolchain.model.PersistedToolchains clone()>
<org.apache.maven.plugin.lifecycle.LifecycleConfiguration: void addLifecycle(org.apache.maven.plugin.lifecycle.Lifecycle)>
<org.apache.maven.project.ProjectBuildingRequest$RepositoryMerging: org.apache.maven.project.ProjectBuildingRequest$RepositoryMerging[] values()>
<org.apache.maven.model.building.ModelProblem$Severity: org.apache.maven.model.building.ModelProblem$Severity[] values()>
<org.apache.maven.monitor.logging.DefaultLog: void debug(java.lang.Throwable)>
<org.apache.maven.project.MavenProject: boolean eq(java.lang.Object,java.lang.Object)>
<org.apache.maven.model.validation.DefaultModelValidator: void validate20RawPlugins(org.apache.maven.model.building.ModelProblemCollector,java.util.List,java.lang.String,org.apache.maven.model.building.ModelBuildingRequest)>
<org.apache.maven.plugin.CacheUtils: boolean exclusionsEquals(java.util.List,java.util.List)>
<org.apache.maven.profiles.io.xpp3.ProfilesXpp3Reader: short getShortValue(java.lang.String,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.plugin.internal.DefaultMavenPluginManager: org.apache.maven.plugin.descriptor.PluginDescriptor getPluginDescriptor(org.apache.maven.model.Plugin,java.util.List,org.eclipse.aether.RepositorySystemSession)>
<org.apache.maven.repository.legacy.LegacyRepositorySystem: void injectMirror(org.apache.maven.artifact.repository.ArtifactRepository,org.apache.maven.settings.Mirror)>
<org.apache.maven.classrealm.DefaultClassRealmManager: java.lang.String getId(java.lang.ClassLoader)>
<org.apache.maven.model.Reporting: org.apache.maven.model.Reporting clone()>
<org.apache.maven.plugin.DefaultProjectArtifactsCache: org.apache.maven.plugin.ProjectArtifactsCache$CacheRecord put(org.apache.maven.plugin.ProjectArtifactsCache$Key,java.util.Set)>
<org.apache.maven.project.DefaultProjectBuilder: org.apache.maven.project.DependencyResolutionResult resolveDependencies(org.apache.maven.project.MavenProject,org.eclipse.aether.RepositorySystemSession)>
<org.apache.maven.classrealm.DefaultClassRealmManager: void callDelegates(org.codehaus.plexus.classworlds.realm.ClassRealm,org.apache.maven.classrealm.ClassRealmRequest$RealmType,java.lang.ClassLoader,java.util.List,java.util.Map,java.util.List)>
<org.apache.maven.cli.transfer.AbstractMavenTransferListener$FileSizeFormat$ScaleUnit: org.apache.maven.cli.transfer.AbstractMavenTransferListener$FileSizeFormat$ScaleUnit getScaleUnit(long)>
<org.apache.maven.model.inheritance.DefaultInheritanceAssembler$InheritanceModelMerger: void mergePluginContainer_Plugins(org.apache.maven.model.PluginContainer,org.apache.maven.model.PluginContainer,boolean,java.util.Map)>
<org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver: void invalidMetadata(org.eclipse.aether.RepositorySystemSession,org.eclipse.aether.RequestTrace,org.eclipse.aether.metadata.Metadata,org.eclipse.aether.repository.ArtifactRepository,java.lang.Exception)>
<org.apache.maven.eventspy.internal.EventSpyRepositoryListener: void metadataDeploying(org.eclipse.aether.RepositoryEvent)>
<org.apache.maven.internal.aether.DefaultRepositorySystemSessionFactory: java.lang.String getMavenVersion()>
<org.apache.maven.repository.MetadataResolutionResult: void addArtifact(org.apache.maven.artifact.Artifact)>
<org.apache.maven.plugin.lifecycle.io.xpp3.LifecycleMappingsXpp3Reader: long getLongValue(java.lang.String,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.model.inheritance.DefaultInheritanceAssembler$InheritanceModelMerger: void putAll(java.util.Map,java.util.Map,java.lang.Object)>
<org.apache.maven.usability.plugin.io.xpp3.ParamdocXpp3Reader: long getLongValue(java.lang.String,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.model.building.ModelProblemCollectorRequest: void <init>(org.apache.maven.model.building.ModelProblem$Severity,org.apache.maven.model.building.ModelProblem$Version)>
<org.apache.maven.settings.building.SettingsBuildingException: void <init>(java.util.List)>
<org.apache.maven.model.io.xpp3.MavenXpp3Reader: org.apache.maven.model.PluginContainer parsePluginContainer(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.model.merge.ModelMerger: void mergeReportPlugin_ReportSets(org.apache.maven.model.ReportPlugin,org.apache.maven.model.ReportPlugin,boolean,java.util.Map)>
<org.apache.maven.model.Model: void addDeveloper(org.apache.maven.model.Developer)>
<org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator: void setupMojoExecutions(org.apache.maven.execution.MavenSession,org.apache.maven.project.MavenProject,java.util.List)>
<org.apache.maven.model.DistributionManagement: void setLocation(java.lang.Object,org.apache.maven.model.InputLocation)>
<org.apache.maven.settings.io.xpp3.SettingsXpp3Reader: org.apache.maven.settings.Settings read(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.project.DefaultProjectBuilder: org.apache.maven.project.ProjectBuildingResult build(org.apache.maven.artifact.Artifact,boolean,org.apache.maven.project.ProjectBuildingRequest)>
<org.apache.maven.execution.DefaultMavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest addActiveProfiles(java.util.List)>
<org.apache.maven.plugin.lifecycle.io.xpp3.LifecycleMappingsXpp3Reader: org.apache.maven.plugin.lifecycle.LifecycleConfiguration read(java.io.Reader,boolean)>
<org.apache.maven.model.profile.activation.FileProfileActivator: boolean isActive(org.apache.maven.model.Profile,org.apache.maven.model.profile.ProfileActivationContext,org.apache.maven.model.building.ModelProblemCollector)>
<org.apache.maven.ReactorReader: java.io.File find(org.apache.maven.project.MavenProject,org.eclipse.aether.artifact.Artifact)>
<org.apache.maven.plugin.descriptor.InvalidPluginDescriptorException: void <init>(java.lang.String)>
<org.apache.maven.cli.transfer.QuietMavenTransferListener: void <init>()>
<org.apache.maven.cli.event.ExecutionEventLogger: void append(org.apache.maven.shared.utils.logging.MessageBuilder,org.apache.maven.project.MavenProject)>
<org.apache.maven.repository.internal.DefaultVersionRangeResolver: java.util.Map getVersions(org.eclipse.aether.RepositorySystemSession,org.eclipse.aether.resolution.VersionRangeResult,org.eclipse.aether.resolution.VersionRangeRequest)>
<org.apache.maven.plugin.internal.DefaultPluginDependenciesResolver$GraphLogger: boolean visitEnter(org.eclipse.aether.graph.DependencyNode)>
<org.apache.maven.model.io.xpp3.MavenXpp3Reader: org.apache.maven.model.ActivationOS parseActivationOS(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.settings.merge.MavenSettingsMerger: java.util.Map mapById(java.util.List)>
<org.apache.maven.artifact.resolver.ArtifactResolutionRequest: org.apache.maven.artifact.resolver.ArtifactResolutionRequest addListener(org.apache.maven.artifact.resolver.ResolutionListener)>
<org.apache.maven.lifecycle.internal.MojoExecutor: void execute(org.apache.maven.execution.MavenSession,java.util.List,org.apache.maven.lifecycle.internal.ProjectIndex)>
<org.apache.maven.model.io.xpp3.MavenXpp3Reader: org.apache.maven.model.MailingList parseMailingList(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.project.ModelUtils: void mergeFilterLists(java.util.List,java.util.List)>
<org.apache.maven.model.building.DefaultModelProblemCollector: boolean hasFatalErrors()>
<org.apache.maven.repository.internal.DefaultArtifactDescriptorReader: org.apache.maven.model.Model loadPom(org.eclipse.aether.RepositorySystemSession,org.eclipse.aether.resolution.ArtifactDescriptorRequest,org.eclipse.aether.resolution.ArtifactDescriptorResult)>
<org.apache.maven.settings.io.xpp3.SettingsXpp3Reader: int nextTag(org.codehaus.plexus.util.xml.pull.XmlPullParser)>
<org.apache.maven.cli.event.ExecutionEventLogger: void projectSkipped(org.apache.maven.execution.ExecutionEvent)>
<org.apache.maven.model.validation.DefaultModelValidator: void validate20RawDependenciesSelfReferencing(org.apache.maven.model.building.ModelProblemCollector,org.apache.maven.model.Model,java.util.List,java.lang.String,org.apache.maven.model.building.ModelBuildingRequest)>
<org.apache.maven.artifact.handler.manager.DefaultArtifactHandlerManager: void addHandlers(java.util.Map)>
<org.apache.maven.repository.internal.DefaultArtifactDescriptorReader: org.apache.maven.repository.internal.DefaultArtifactDescriptorReader setRepositoryEventDispatcher(org.eclipse.aether.impl.RepositoryEventDispatcher)>
<org.apache.maven.execution.scope.internal.MojoExecutionScope: void seed(java.lang.Class,java.lang.Object)>
<org.apache.maven.bridge.MavenRepositorySystem: void injectMirror(org.eclipse.aether.RepositorySystemSession,java.util.List)>
<org.apache.maven.artifact.repository.LegacyLocalRepositoryManager: org.eclipse.aether.RepositorySystemSession overlay(org.apache.maven.artifact.repository.ArtifactRepository,org.eclipse.aether.RepositorySystemSession,org.eclipse.aether.RepositorySystem)>
<org.apache.maven.settings.io.xpp3.SettingsXpp3Reader: org.apache.maven.settings.Proxy parseProxy(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.configuration.internal.DefaultBeanConfigurator: void configureBean(org.apache.maven.configuration.BeanConfigurationRequest)>
<org.apache.maven.profiles.io.xpp3.ProfilesXpp3Reader: org.apache.maven.profiles.RepositoryBase parseRepositoryBase(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.cli.transfer.Slf4jMavenTransferListener: void transferCorrupted(org.eclipse.aether.transfer.TransferEvent)>
<org.apache.maven.artifact.resolver.filter.IncludesArtifactFilter: boolean include(org.apache.maven.artifact.Artifact)>
<org.apache.maven.toolchain.model.io.xpp3.MavenToolchainsXpp3Reader: int nextTag(org.codehaus.plexus.util.xml.pull.XmlPullParser)>
<org.apache.maven.plugin.logging.SystemStreamLog: void print(java.lang.String,java.lang.CharSequence,java.lang.Throwable)>
<org.apache.maven.project.interpolation.StringSearchModelInterpolator$InterpolateObjectAction: void traverseObjectWithParents(java.lang.Class,java.lang.Object)>
<org.apache.maven.plugin.DefaultProjectArtifactsCache: org.apache.maven.plugin.ProjectArtifactsCache$CacheRecord put(org.apache.maven.plugin.ProjectArtifactsCache$Key,org.apache.maven.lifecycle.LifecycleExecutionException)>
<org.apache.maven.lifecycle.internal.LifecycleDebugLogger: void debugDependencyRequirements(java.util.List)>
<org.apache.maven.project.artifact.MavenMetadataSource: org.apache.maven.artifact.metadata.ResolutionGroup retrieve(org.apache.maven.repository.legacy.metadata.MetadataResolutionRequest)>
<org.apache.maven.repository.legacy.DefaultUpdateCheckManager: void writeLastUpdated(java.io.File,java.lang.String,java.lang.String)>
<org.apache.maven.repository.internal.DefaultModelResolver: org.apache.maven.model.building.ModelSource resolveModel(java.lang.String,java.lang.String,java.lang.String)>
<org.apache.maven.RepositoryUtils: org.eclipse.aether.repository.Proxy toProxy(org.apache.maven.repository.Proxy)>
<org.apache.maven.model.io.DefaultModelReader: org.apache.maven.model.InputSource getSource(java.util.Map)>
<org.apache.maven.model.plugin.DefaultReportConfigurationExpander: void expandPluginConfiguration(org.apache.maven.model.Model,org.apache.maven.model.building.ModelBuildingRequest,org.apache.maven.model.building.ModelProblemCollector)>
<org.apache.maven.artifact.resolver.filter.AndArtifactFilter: boolean include(org.apache.maven.artifact.Artifact)>
<org.apache.maven.RepositoryUtils: org.eclipse.aether.graph.Dependency toDependency(org.apache.maven.artifact.Artifact,java.util.Collection)>
<org.apache.maven.model.io.xpp3.MavenXpp3Reader: org.apache.maven.model.PatternSet parsePatternSet(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.configuration.DefaultBeanConfigurationRequest: org.apache.maven.model.Plugin findPlugin(org.apache.maven.model.Model,java.lang.String,java.lang.String)>
<org.apache.maven.artifact.repository.LegacyLocalRepositoryManager$ArtifactRepositoryAdapter: java.lang.String getId()>
<org.apache.maven.execution.DefaultMavenExecutionRequestPopulator: org.apache.maven.artifact.repository.ArtifactRepository createLocalRepository(org.apache.maven.execution.MavenExecutionRequest)>
<org.apache.maven.cli.event.ExecutionEventLogger: void forkedProjectStarted(org.apache.maven.execution.ExecutionEvent)>
<org.apache.maven.profiles.DefaultMavenProfilesBuilder: org.apache.maven.profiles.ProfilesRoot buildProfiles(java.io.File)>
<org.apache.maven.plugin.PluginDescriptorParsingException: java.lang.String createMessage(org.apache.maven.model.Plugin,java.lang.String,java.lang.Throwable)>
<org.apache.maven.artifact.repository.metadata.io.xpp3.MetadataXpp3Writer: void writeVersioning(org.apache.maven.artifact.repository.metadata.Versioning,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.model.io.xpp3.MavenXpp3Reader: void checkUnknownElement(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.artifact.versioning.VersionRange: java.util.List intersection(java.util.List,java.util.List)>
<org.apache.maven.artifact.repository.metadata.io.xpp3.MetadataXpp3Reader: org.apache.maven.artifact.repository.metadata.SnapshotVersion parseSnapshotVersion(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.plugin.lifecycle.Execution: void removeGoal(java.lang.String)>
<org.apache.maven.artifact.repository.LegacyLocalRepositoryManager$ArtifactMetadataAdapter: java.lang.String extendedToString()>
<org.apache.maven.model.io.xpp3.MavenXpp3ReaderEx: org.apache.maven.model.ReportSet parseReportSet(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean,org.apache.maven.model.InputSource)>
<org.apache.maven.settings.io.xpp3.SettingsXpp3Reader: java.util.Date getDateValue(java.lang.String,java.lang.String,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlPullParser)>
<org.apache.maven.model.profile.activation.OperatingSystemProfileActivator: boolean determineArchMatch(java.lang.String)>
<org.apache.maven.project.artifact.DefaultMavenMetadataCache: void flush()>
<org.apache.maven.eventspy.internal.EventSpyRepositoryListener: void metadataInstalling(org.eclipse.aether.RepositoryEvent)>
<org.apache.maven.artifact.resolver.MultipleArtifactsNotFoundException: java.lang.String constructMessage(java.util.List)>
<org.apache.maven.cli.MavenCli$2: void configure()>
<org.apache.maven.ReactorReader: org.eclipse.aether.artifact.Artifact findMatchingArtifact(org.apache.maven.project.MavenProject,org.eclipse.aether.artifact.Artifact)>
<org.apache.maven.plugin.internal.DefaultMavenPluginManager: void checkRequiredMavenVersion(org.apache.maven.plugin.descriptor.PluginDescriptor)>
<org.apache.maven.profiles.io.xpp3.ProfilesXpp3Writer: void writeActivation(org.apache.maven.profiles.Activation,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.settings.building.DefaultSettingsBuilder: boolean hasErrors(java.util.List)>
<org.apache.maven.profiles.activation.OperatingSystemProfileActivator: boolean determineNameMatch(java.lang.String)>
<org.apache.maven.model.CiManagement: void removeNotifier(org.apache.maven.model.Notifier)>
<org.apache.maven.model.io.xpp3.MavenXpp3Writer: void writeScm(org.apache.maven.model.Scm,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.profiles.io.xpp3.ProfilesXpp3Writer: void writeRepositoryBase(org.apache.maven.profiles.RepositoryBase,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.lifecycle.internal.MojoExecutor: void ensureDependenciesAreResolved(org.apache.maven.plugin.descriptor.MojoDescriptor,org.apache.maven.execution.MavenSession,org.apache.maven.lifecycle.internal.DependencyContext)>
<org.apache.maven.model.Relocation: void setLocation(java.lang.Object,org.apache.maven.model.InputLocation)>
<org.apache.maven.cli.transfer.ConsoleMavenTransferListener: java.lang.String getStatus(java.lang.String,long,long)>
<org.apache.maven.model.io.xpp3.MavenXpp3ReaderEx: java.lang.String getRequiredAttributeValue(java.lang.String,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.repository.MetadataResolutionResult: void addRequestedArtifact(org.apache.maven.artifact.Artifact)>
<org.apache.maven.artifact.ArtifactUtils: java.lang.String versionlessKey(java.lang.String,java.lang.String)>
<org.apache.maven.plugin.DefaultProjectArtifactsCache: org.apache.maven.plugin.ProjectArtifactsCache$CacheRecord get(org.apache.maven.plugin.ProjectArtifactsCache$Key)>
<org.apache.maven.repository.legacy.DefaultUpdateCheckManager: java.lang.String getMetadataKey(org.apache.maven.artifact.repository.ArtifactRepository,java.io.File)>
<org.apache.maven.model.MailingList: void removeOtherArchive(java.lang.String)>
<org.apache.maven.model.io.xpp3.MavenXpp3Reader: org.apache.maven.model.Dependency parseDependency(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.artifact.repository.metadata.io.xpp3.MetadataXpp3Reader: java.util.Date getDateValue(java.lang.String,java.lang.String,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlPullParser)>
<org.apache.maven.artifact.versioning.VersionRange: boolean isSelectedVersionKnown(org.apache.maven.artifact.Artifact)>
<org.apache.maven.cli.event.ExecutionEventLogger: void projectDiscoveryStarted(org.apache.maven.execution.ExecutionEvent)>
<org.apache.maven.model.Model: void removeContributor(org.apache.maven.model.Contributor)>
<org.apache.maven.model.io.xpp3.MavenXpp3Reader: org.apache.maven.model.Model parseModel(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.model.License: void setLocation(java.lang.Object,org.apache.maven.model.InputLocation)>
<org.apache.maven.project.DefaultProjectBuilder: org.apache.maven.model.building.ModelBuildingRequest getModelBuildingRequest(org.apache.maven.project.DefaultProjectBuilder$InternalConfig)>
<org.apache.maven.plugin.MavenPluginValidator: void validate(org.apache.maven.plugin.descriptor.PluginDescriptor)>
<org.apache.maven.settings.Settings: void removeServer(org.apache.maven.settings.Server)>
<org.apache.maven.project.inheritance.DefaultModelInheritanceAssembler: void assembleScmInheritance(org.apache.maven.model.Model,org.apache.maven.model.Model,java.lang.String,boolean)>
<org.apache.maven.model.io.xpp3.MavenXpp3ReaderEx: float getFloatValue(java.lang.String,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.project.validation.ModelValidationResult: int getMessageCount()>
<org.apache.maven.artifact.repository.metadata.io.xpp3.MetadataXpp3Reader: void checkUnknownElement(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.artifact.repository.metadata.io.xpp3.MetadataXpp3Writer: void write(java.io.Writer,org.apache.maven.artifact.repository.metadata.Metadata)>
<org.apache.maven.model.interpolation.AbstractStringBasedModelInterpolator: java.lang.String interpolateInternal(java.lang.String,java.util.List,java.util.List,org.apache.maven.model.building.ModelProblemCollector)>
<org.apache.maven.DefaultMaven: org.apache.maven.execution.MavenExecutionResult doExecute(org.apache.maven.execution.MavenExecutionRequest,org.apache.maven.execution.MavenSession,org.apache.maven.execution.MavenExecutionResult,org.eclipse.aether.DefaultRepositorySystemSession)>
<org.apache.maven.toolchain.merge.MavenToolchainMerger: void mergeToolchainModel_Configuration(org.apache.maven.toolchain.model.ToolchainModel,org.apache.maven.toolchain.model.ToolchainModel)>
<org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver: org.apache.maven.plugin.version.PluginVersionResult resolveFromRepository(org.apache.maven.plugin.version.PluginVersionRequest)>
<org.apache.maven.settings.crypto.DefaultSettingsDecryptionResult: org.apache.maven.settings.Proxy getProxy()>
<org.apache.maven.artifact.repository.DefaultArtifactRepository: java.lang.String getKey()>
<org.apache.maven.model.io.xpp3.MavenXpp3Reader: org.apache.maven.model.Prerequisites parsePrerequisites(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.project.DefaultMavenProjectHelper: void <init>()>
<org.apache.maven.model.building.DefaultModelBuildingResult: org.apache.maven.model.building.DefaultModelBuildingResult setRawModel(java.lang.String,org.apache.maven.model.Model)>
<org.apache.maven.model.merge.MavenModelMerger: void mergeModel_Licenses(org.apache.maven.model.Model,org.apache.maven.model.Model,boolean,java.util.Map)>
<org.apache.maven.toolchain.io.DefaultToolchainsReader: org.apache.maven.toolchain.model.PersistedToolchains read(java.io.InputStream,java.util.Map)>
<org.apache.maven.properties.internal.EnvironmentUtils: void addEnvVars(java.util.Properties)>
<org.apache.maven.model.merge.MavenModelMerger: void mergePluginExecution_Goals(org.apache.maven.model.PluginExecution,org.apache.maven.model.PluginExecution,boolean,java.util.Map)>
<org.apache.maven.lifecycle.internal.ProjectBuildList: org.apache.maven.lifecycle.internal.ProjectSegment findByMavenProject(org.apache.maven.project.MavenProject)>
<org.apache.maven.artifact.repository.metadata.io.DefaultMetadataReader: org.apache.maven.artifact.repository.metadata.Metadata read(java.io.File,java.util.Map)>
<org.apache.maven.profiles.io.xpp3.ProfilesXpp3Writer: void writeRepositoryPolicy(org.apache.maven.profiles.RepositoryPolicy,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.artifact.resolver.filter.OrArtifactFilter: boolean equals(java.lang.Object)>
<org.apache.maven.model.profile.activation.FileProfileActivator$1: void <init>(org.apache.maven.model.profile.activation.FileProfileActivator,boolean,java.io.File)>
<org.apache.maven.monitor.logging.DefaultLog: void info(java.lang.Throwable)>
<org.apache.maven.repository.internal.MavenSnapshotMetadata: java.lang.Object getKey(org.eclipse.aether.artifact.Artifact)>
<org.apache.maven.settings.Profile: org.apache.maven.settings.Profile clone()>
<org.apache.maven.eventspy.internal.EventSpyRepositoryListener: void <init>(org.apache.maven.eventspy.internal.EventSpyDispatcher,org.eclipse.aether.RepositoryListener)>
<org.apache.maven.rtinfo.internal.DefaultRuntimeInformation: java.lang.String getMavenVersion()>
<org.apache.maven.monitor.logging.DefaultLog: boolean isInfoEnabled()>
<org.apache.maven.model.io.xpp3.MavenXpp3Writer: void writeNotifier(org.apache.maven.model.Notifier,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.model.io.xpp3.MavenXpp3ReaderEx: org.apache.maven.model.ConfigurationContainer parseConfigurationContainer(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean,org.apache.maven.model.InputSource)>
<org.apache.maven.toolchain.io.DefaultToolchainsReader: org.apache.maven.toolchain.model.PersistedToolchains read(java.io.File,java.util.Map)>
<org.apache.maven.settings.io.xpp3.SettingsXpp3Writer: void writeActivationOS(org.apache.maven.settings.ActivationOS,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.lifecycle.internal.builder.multithreaded.ConcurrencyDependencyGraph: java.util.List getActiveDependencies(org.apache.maven.project.MavenProject)>
<org.apache.maven.project.interpolation.AbstractStringBasedModelInterpolator: java.util.List createValueSources(org.apache.maven.model.Model,java.io.File,org.apache.maven.project.ProjectBuilderConfiguration)>
<org.apache.maven.repository.legacy.TransferListenerAdapter: org.apache.maven.repository.ArtifactTransferEvent wrap(org.apache.maven.wagon.events.TransferEvent)>
<org.apache.maven.toolchain.io.DefaultToolchainsReader: org.apache.maven.toolchain.model.PersistedToolchains read(java.io.Reader,java.util.Map)>
<org.apache.maven.ReactorReader: org.apache.maven.model.Model findModel(org.eclipse.aether.artifact.Artifact)>
<org.apache.maven.profiles.ProfilesRoot: void removeActiveProfile(java.lang.String)>
<org.apache.maven.model.ReportPlugin: void removeReportSet(org.apache.maven.model.ReportSet)>
<org.apache.maven.settings.io.xpp3.SettingsXpp3Writer: void writeActivation(org.apache.maven.settings.Activation,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.repository.metadata.MetadataGraph: org.apache.maven.repository.metadata.MetadataGraphVertex findVertex(org.apache.maven.repository.metadata.ArtifactMetadata)>
<org.apache.maven.plugin.DefaultPluginArtifactsCache$CacheKey: boolean eq(java.lang.Object,java.lang.Object)>
<org.apache.maven.repository.internal.DefaultVersionRangeResolver: org.apache.maven.artifact.repository.metadata.Versioning readVersions(org.eclipse.aether.RepositorySystemSession,org.eclipse.aether.RequestTrace,org.eclipse.aether.metadata.Metadata,org.eclipse.aether.repository.ArtifactRepository,org.eclipse.aether.resolution.VersionRangeResult)>
<org.apache.maven.plugin.DefaultExtensionRealmCache$CacheKey: void <init>(java.util.List)>
<org.apache.maven.project.MavenProject: boolean hasLifecyclePhase(java.lang.String)>
<org.apache.maven.settings.io.xpp3.SettingsXpp3Writer: void write(java.io.OutputStream,org.apache.maven.settings.Settings)>
<org.apache.maven.model.Plugin: void removeDependency(org.apache.maven.model.Dependency)>
<org.apache.maven.lifecycle.internal.DefaultMojoExecutionConfigurator: void configure(org.apache.maven.project.MavenProject,org.apache.maven.plugin.MojoExecution,boolean)>
<org.apache.maven.cli.internal.extension.model.io.xpp3.CoreExtensionsXpp3Reader: org.apache.maven.cli.internal.extension.model.CoreExtension parseCoreExtension(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.cli.transfer.Slf4jMavenTransferListener: void transferInitiated(org.eclipse.aether.transfer.TransferEvent)>
<org.apache.maven.model.BuildBase: void addTestResource(org.apache.maven.model.Resource)>
<org.apache.maven.plugin.lifecycle.Phase: void removeExecution(org.apache.maven.plugin.lifecycle.Execution)>
<org.apache.maven.cli.logging.BaseSlf4jConfiguration: void activate()>
<org.apache.maven.model.io.xpp3.MavenXpp3ReaderEx: org.apache.maven.model.ActivationProperty parseActivationProperty(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean,org.apache.maven.model.InputSource)>
<org.apache.maven.monitor.logging.DefaultLog: void error(java.lang.CharSequence,java.lang.Throwable)>
<org.apache.maven.model.profile.activation.PropertyProfileActivator: boolean isActive(org.apache.maven.model.Profile,org.apache.maven.model.profile.ProfileActivationContext,org.apache.maven.model.building.ModelProblemCollector)>
<org.apache.maven.RepositoryUtils: org.eclipse.aether.artifact.Artifact toArtifact(org.apache.maven.artifact.Artifact)>
<org.apache.maven.plugin.internal.DefaultMavenPluginManager: void setupPluginRealm(org.apache.maven.plugin.descriptor.PluginDescriptor,org.apache.maven.execution.MavenSession,java.lang.ClassLoader,java.util.List,org.eclipse.aether.graph.DependencyFilter)>
<org.apache.maven.settings.Profile: void addPluginRepository(org.apache.maven.settings.Repository)>
<org.apache.maven.repository.metadata.MetadataGraph: java.util.List getEdgesBetween(org.apache.maven.repository.metadata.MetadataGraphVertex,org.apache.maven.repository.metadata.MetadataGraphVertex)>
<org.apache.maven.repository.metadata.DefaultGraphConflictResolver: org.apache.maven.repository.metadata.MetadataGraph findLinkedSubgraph(org.apache.maven.repository.metadata.MetadataGraph)>
<org.apache.maven.project.artifact.DefaultMavenMetadataCache: boolean repositoriesEquals(java.util.List,java.util.List)>
<org.apache.maven.profiles.io.xpp3.ProfilesXpp3Writer: void writeActivationOS(org.apache.maven.profiles.ActivationOS,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.project.MavenProject: java.util.List getSystemArtifacts()>
<org.apache.maven.profiles.activation.SystemPropertyProfileActivator: void contextualize(org.codehaus.plexus.context.Context)>
<org.apache.maven.model.io.xpp3.MavenXpp3Writer: void writeActivationProperty(org.apache.maven.model.ActivationProperty,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.cli.logging.Slf4jLoggerManager: org.codehaus.plexus.logging.Logger getLoggerForComponent(java.lang.String)>
<org.apache.maven.model.io.xpp3.MavenXpp3Reader: org.apache.maven.model.ReportPlugin parseReportPlugin(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.settings.io.xpp3.SettingsXpp3Reader: org.apache.maven.settings.Settings read(java.io.Reader,boolean)>
<org.apache.maven.toolchain.DefaultToolchainManagerPrivate: void storeToolchainToBuildContext(org.apache.maven.toolchain.ToolchainPrivate,org.apache.maven.execution.MavenSession)>
<org.apache.maven.model.io.xpp3.MavenXpp3ReaderEx: org.apache.maven.model.DependencyManagement parseDependencyManagement(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean,org.apache.maven.model.InputSource)>
<org.apache.maven.artifact.versioning.VersionRange: org.apache.maven.artifact.versioning.ArtifactVersion getSelectedVersion(org.apache.maven.artifact.Artifact)>
<org.apache.maven.artifact.repository.LegacyLocalRepositoryManager$ArtifactMetadataAdapter: java.lang.Object getKey()>
<org.apache.maven.toolchain.DefaultToolchain: void addProvideToken(java.lang.String,org.apache.maven.toolchain.RequirementMatcher)>
<org.apache.maven.artifact.repository.metadata.io.xpp3.MetadataXpp3Writer: void writeMetadata(org.apache.maven.artifact.repository.metadata.Metadata,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.model.io.xpp3.MavenXpp3Writer: void writeActivationOS(org.apache.maven.model.ActivationOS,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.project.MavenProject: void addArtifactPath(org.apache.maven.artifact.Artifact,java.util.List)>
<org.apache.maven.settings.io.xpp3.SettingsXpp3Reader: byte getByteValue(java.lang.String,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.model.Plugin: java.util.Map getExecutionsAsMap()>
<org.apache.maven.settings.io.xpp3.SettingsXpp3Reader: org.apache.maven.settings.Settings read(java.io.InputStream)>
<org.apache.maven.plugin.CacheUtils: boolean eq(java.lang.Object,java.lang.Object)>
<org.apache.maven.plugin.CompoundMojoExecutionListener: void beforeMojoExecution(org.apache.maven.execution.MojoExecutionEvent)>
<org.apache.maven.repository.internal.MavenSnapshotMetadata: org.eclipse.aether.metadata.Metadata$Nature getNature()>
<org.apache.maven.ReactorReader: java.util.List findVersions(org.eclipse.aether.artifact.Artifact)>
<org.apache.maven.model.building.ModelBuildingException: java.lang.String toMessage(org.apache.maven.model.building.ModelBuildingResult)>
<org.apache.maven.plugin.prefix.NoPluginFoundForPrefixException: java.lang.String format(org.eclipse.aether.repository.LocalRepository,java.util.List)>
<org.apache.maven.cli.logging.Slf4jStdoutLogger: void error(java.lang.String,java.lang.Throwable)>
<org.apache.maven.execution.DefaultMavenExecutionResult: org.apache.maven.execution.MavenExecutionResult addException(java.lang.Throwable)>
<org.apache.maven.profiles.io.xpp3.ProfilesXpp3Writer: void writeProfile(org.apache.maven.profiles.Profile,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.project.ExtensionDescriptorBuilder: org.apache.maven.project.ExtensionDescriptor build(java.io.File)>
<org.apache.maven.lifecycle.internal.ProjectBuildList: java.util.Set getProjects()>
<org.apache.maven.settings.merge.MavenSettingsMerger: void merge(org.apache.maven.settings.Settings,org.apache.maven.settings.Settings,java.lang.String)>
<org.apache.maven.model.io.xpp3.MavenXpp3ReaderEx: org.apache.maven.model.DistributionManagement parseDistributionManagement(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean,org.apache.maven.model.InputSource)>
<org.apache.maven.lifecycle.internal.LifecyclePluginResolver: void resolveMissingPluginVersions(org.apache.maven.project.MavenProject,org.apache.maven.execution.MavenSession)>
<org.apache.maven.model.io.xpp3.MavenXpp3ReaderEx: org.apache.maven.model.Build parseBuild(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean,org.apache.maven.model.InputSource)>
<org.apache.maven.plugin.version.PluginVersionResolutionException: java.lang.String format(org.eclipse.aether.repository.LocalRepository,java.util.List)>
<org.apache.maven.execution.ReactorManager: void blackList(java.lang.String)>
<org.apache.maven.toolchain.model.ToolchainModel: org.apache.maven.toolchain.model.ToolchainModel clone()>
<org.apache.maven.settings.SettingsUtils: org.apache.maven.model.Profile convertFromSettingsProfile(org.apache.maven.settings.Profile)>
<org.apache.maven.RepositoryUtils: org.eclipse.aether.repository.Authentication toAuthentication(org.apache.maven.artifact.repository.Authentication)>
<org.apache.maven.model.building.DefaultModelBuilder: java.util.Map getProfileActivations(org.apache.maven.model.Model,boolean)>
<org.apache.maven.cli.CLIManager: void displayHelp(java.io.PrintStream)>
<org.apache.maven.project.ModelUtils: void mergePluginDefinitions(org.apache.maven.model.Plugin,org.apache.maven.model.Plugin,boolean)>
<org.apache.maven.model.building.DefaultModelBuildingResult: org.apache.maven.model.Model getRawModel(java.lang.String)>
<org.apache.maven.repository.legacy.LegacyRepositorySystem: java.lang.String getMessage(java.lang.Throwable,java.lang.String)>
<org.apache.maven.plugin.CacheUtils: org.eclipse.aether.repository.WorkspaceRepository getWorkspace(org.eclipse.aether.RepositorySystemSession)>
<org.apache.maven.cli.MavenCli: void cli(org.apache.maven.cli.CliRequest)>
<org.apache.maven.artifact.repository.metadata.DefaultRepositoryMetadataManager: void updateSnapshotMetadata(org.apache.maven.artifact.repository.metadata.RepositoryMetadata,java.util.Map,org.apache.maven.artifact.repository.ArtifactRepository,org.apache.maven.artifact.repository.ArtifactRepository)>
<org.apache.maven.model.Extension: void setLocation(java.lang.Object,org.apache.maven.model.InputLocation)>
<org.apache.maven.classrealm.DefaultClassRealmManager: org.codehaus.plexus.classworlds.realm.ClassRealm createPluginRealm(org.apache.maven.model.Plugin,java.lang.ClassLoader,java.util.List,java.util.Map,java.util.List)>
<org.apache.maven.DefaultProjectDependenciesResolver: java.util.Set getIgnorableArtifacts(java.util.Collection)>
<org.apache.maven.plugin.PluginParameterExpressionEvaluator: java.lang.Object evaluate(java.lang.String,java.lang.Class)>
<org.apache.maven.lifecycle.DefaultLifecycles: org.apache.maven.lifecycle.Lifecycle get(java.lang.String)>
<org.apache.maven.DefaultProjectDependenciesResolver: java.util.Set resolveImpl(java.util.Collection,java.util.Collection,java.util.Collection,org.apache.maven.execution.MavenSession,java.util.Set)>
<org.apache.maven.model.interpolation.StringSearchModelInterpolator$InterpolateObjectAction$MapField: void doInterpolate(java.lang.Object,org.apache.maven.model.interpolation.StringSearchModelInterpolator$InterpolateObjectAction)>
<org.apache.maven.artifact.deployer.DefaultArtifactDeployer: void <init>()>
<org.apache.maven.model.io.xpp3.MavenXpp3Reader: org.apache.maven.model.BuildBase parseBuildBase(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.settings.io.xpp3.SettingsXpp3Reader: org.apache.maven.settings.RepositoryBase parseRepositoryBase(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.model.io.xpp3.MavenXpp3ReaderEx: org.apache.maven.model.Scm parseScm(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean,org.apache.maven.model.InputSource)>
<org.apache.maven.artifact.repository.DefaultArtifactRepository: void <init>(java.lang.String,java.lang.String,org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout,boolean)>
<org.apache.maven.cli.logging.Slf4jLogger: void fatalError(java.lang.String,java.lang.Throwable)>
<org.apache.maven.cli.logging.Slf4jLogger: boolean isInfoEnabled()>
<org.apache.maven.DefaultArtifactFilterManager: java.util.Set getCoreArtifactExcludes()>
<org.apache.maven.model.io.xpp3.MavenXpp3ReaderEx: org.apache.maven.model.CiManagement parseCiManagement(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean,org.apache.maven.model.InputSource)>
<org.apache.maven.repository.internal.LocalSnapshotMetadataGenerator: java.util.Collection finish(java.util.Collection)>
<org.apache.maven.model.Activation: org.apache.maven.model.InputLocation getLocation(java.lang.Object)>
<org.apache.maven.lifecycle.internal.MojoDescriptorCreator: org.apache.maven.model.Plugin findPlugin(java.lang.String,java.lang.String,java.util.Collection)>
<org.apache.maven.profiles.io.xpp3.ProfilesXpp3Reader: org.apache.maven.profiles.ProfilesRoot read(java.io.InputStream)>
<org.apache.maven.plugin.DebugConfigurationListener: void notifyFieldChangeUsingReflection(java.lang.String,java.lang.Object,java.lang.Object)>
<org.apache.maven.profiles.DefaultMavenProfilesBuilder: void <init>()>
<org.apache.maven.model.io.xpp3.MavenXpp3ReaderEx: org.apache.maven.model.RepositoryBase parseRepositoryBase(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean,org.apache.maven.model.InputSource)>
<org.apache.maven.model.Build: void removeExtension(org.apache.maven.model.Extension)>
<org.apache.maven.lifecycle.internal.ProjectBuildList: void closeAll()>
<org.apache.maven.model.validation.DefaultModelValidator: void validateRawRepositories(org.apache.maven.model.building.ModelProblemCollector,java.util.List,java.lang.String,org.apache.maven.model.building.ModelBuildingRequest)>
<org.apache.maven.profiles.io.xpp3.ProfilesXpp3Reader: org.apache.maven.profiles.ActivationProperty parseActivationProperty(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.model.io.DefaultModelReader: boolean isStrict(java.util.Map)>
<org.apache.maven.settings.Settings: void removeProxy(org.apache.maven.settings.Proxy)>
<org.apache.maven.model.merge.ModelMerger: void mergePatternSet_Includes(org.apache.maven.model.PatternSet,org.apache.maven.model.PatternSet,boolean,java.util.Map)>
<org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator: java.util.List calculateForkedGoal(org.apache.maven.plugin.MojoExecution,org.apache.maven.execution.MavenSession,org.apache.maven.project.MavenProject,java.util.Collection)>
<org.apache.maven.repository.internal.DefaultArtifactDescriptorReader: org.apache.maven.repository.internal.DefaultArtifactDescriptorReader setVersionRangeResolver(org.eclipse.aether.impl.VersionRangeResolver)>
<org.apache.maven.repository.metadata.DefaultClasspathTransformation$ClasspathGraphVisitor: void visit(org.apache.maven.repository.metadata.MetadataGraphVertex)>
<org.apache.maven.repository.legacy.LegacyRepositorySystem: org.apache.maven.settings.Mirror getMirror(org.eclipse.aether.RepositorySystemSession,org.apache.maven.artifact.repository.ArtifactRepository)>
<org.apache.maven.repository.internal.DefaultVersionRangeResolver: org.eclipse.aether.resolution.VersionRangeResult resolveVersionRange(org.eclipse.aether.RepositorySystemSession,org.eclipse.aether.resolution.VersionRangeRequest)>
<org.apache.maven.project.interpolation.AbstractStringBasedModelInterpolator$2: void <init>(org.apache.maven.project.interpolation.AbstractStringBasedModelInterpolator,boolean,java.io.File)>
<org.apache.maven.model.merge.ModelMerger: void mergeBuildBase_Resources(org.apache.maven.model.BuildBase,org.apache.maven.model.BuildBase,boolean,java.util.Map)>
<org.apache.maven.model.merge.ModelMerger: void mergeModelBase_Repositories(org.apache.maven.model.ModelBase,org.apache.maven.model.ModelBase,boolean,java.util.Map)>
<org.apache.maven.model.ConfigurationContainer: org.apache.maven.model.ConfigurationContainer clone()>
<org.apache.maven.usability.plugin.ExpressionDocumenter: java.util.Map parseExpressionDocumentation(java.io.InputStream)>
<org.apache.maven.model.io.xpp3.MavenXpp3Writer: void writeRepositoryPolicy(org.apache.maven.model.RepositoryPolicy,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.model.io.DefaultModelReader: org.apache.maven.model.Model read(java.io.InputStream,java.util.Map)>
<org.apache.maven.repository.internal.DefaultModelResolver: void removeMatchingRepository(java.lang.Iterable,java.lang.String)>
<org.apache.maven.usability.plugin.io.xpp3.ParamdocXpp3Writer: void write(java.io.OutputStream,org.apache.maven.usability.plugin.ExpressionDocumentation)>
<org.apache.maven.repository.legacy.DefaultWagonManager: void getArtifact(org.apache.maven.artifact.Artifact,org.apache.maven.artifact.repository.ArtifactRepository,org.apache.maven.wagon.events.TransferListener,boolean)>
<org.apache.maven.repository.legacy.LegacyRepositorySystem: org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout getLayout(java.lang.String)>
<org.apache.maven.model.profile.DefaultProfileSelector: boolean isActive(org.apache.maven.model.Profile,org.apache.maven.model.profile.ProfileActivationContext,org.apache.maven.model.building.ModelProblemCollector)>
<org.apache.maven.model.building.Result: org.apache.maven.model.building.Result newResultSet(java.lang.Iterable)>
<org.apache.maven.model.io.xpp3.MavenXpp3Reader: org.apache.maven.model.Activation parseActivation(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.repository.internal.DefaultVersionResolver: org.apache.maven.repository.internal.DefaultVersionResolver setRepositoryEventDispatcher(org.eclipse.aether.impl.RepositoryEventDispatcher)>
<org.apache.maven.graph.DefaultProjectDependencyGraph: java.util.List getDownstreamProjects(org.apache.maven.project.MavenProject,boolean)>
<org.apache.maven.plugin.internal.WagonExcluder: boolean isLegacyCoreArtifact(org.eclipse.aether.artifact.Artifact)>
<org.apache.maven.project.ProjectSorter: java.util.List getDependencies(java.lang.String)>
<org.apache.maven.artifact.resolver.DebugResolutionListener: void updateScopeCurrentPom(org.apache.maven.artifact.Artifact,java.lang.String)>
<org.apache.maven.DefaultMaven: org.apache.maven.execution.MavenExecutionResult addExceptionToResult(org.apache.maven.execution.MavenExecutionResult,java.lang.Throwable)>
<org.apache.maven.lifecycle.internal.DefaultLifecyclePluginAnalyzer: void parseLifecyclePhaseDefinitions(java.util.Map,java.lang.String,org.apache.maven.lifecycle.mapping.LifecyclePhase)>
<org.apache.maven.artifact.ArtifactStatus: org.apache.maven.artifact.ArtifactStatus valueOf(java.lang.String)>
<org.apache.maven.usability.plugin.io.xpp3.ParamdocXpp3Reader: java.lang.String getRequiredAttributeValue(java.lang.String,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.model.io.xpp3.MavenXpp3Reader: org.apache.maven.model.Model read(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.lifecycle.internal.builder.BuilderCommon: org.apache.maven.lifecycle.MavenExecutionPlan resolveBuildPlan(org.apache.maven.execution.MavenSession,org.apache.maven.project.MavenProject,org.apache.maven.lifecycle.internal.TaskSegment,java.util.Set)>
<org.apache.maven.repository.legacy.LegacyRepositorySystem: org.apache.maven.artifact.Artifact createPluginArtifact(org.apache.maven.model.Plugin)>
<org.apache.maven.ReactorReader: boolean attachedArtifactComparison(org.eclipse.aether.artifact.Artifact,org.eclipse.aether.artifact.Artifact)>
<org.apache.maven.plugin.internal.DefaultMavenPluginManager: org.apache.maven.plugin.ExtensionRealmCache$CacheRecord setupExtensionsRealm(org.apache.maven.project.MavenProject,org.apache.maven.model.Plugin,org.eclipse.aether.RepositorySystemSession)>
<org.apache.maven.cli.internal.extension.model.io.xpp3.CoreExtensionsXpp3Writer: void writeCoreExtensions(org.apache.maven.cli.internal.extension.model.CoreExtensions,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.model.validation.DefaultModelValidator: void validateEffectiveDependency(org.apache.maven.model.building.ModelProblemCollector,org.apache.maven.model.Dependency,boolean,java.lang.String,org.apache.maven.model.building.ModelBuildingRequest)>
<org.apache.maven.model.interpolation.StringSearchModelInterpolator$InterpolateObjectAction$ListField: void doInterpolate(java.lang.Object,org.apache.maven.model.interpolation.StringSearchModelInterpolator$InterpolateObjectAction)>
<org.apache.maven.model.plugin.DefaultReportingConverter: org.codehaus.plexus.util.xml.Xpp3Dom newDom(java.lang.String,java.lang.String)>
<org.apache.maven.usability.plugin.io.xpp3.ParamdocXpp3Reader: int getIntegerValue(java.lang.String,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.model.io.xpp3.MavenXpp3ReaderEx: org.apache.maven.model.MailingList parseMailingList(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean,org.apache.maven.model.InputSource)>
<org.apache.maven.settings.Settings: void addProfile(org.apache.maven.settings.Profile)>
<org.apache.maven.model.io.xpp3.MavenXpp3Writer: void writePlugin(org.apache.maven.model.Plugin,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.lifecycle.mapping.DefaultLifecycleMapping: java.util.Map getLifecyclePhases(java.lang.String)>
<org.apache.maven.usability.plugin.io.xpp3.ParamdocXpp3Writer: void writeExpressionDocumentation(org.apache.maven.usability.plugin.ExpressionDocumentation,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.model.ConfigurationContainer: org.apache.maven.model.InputLocation getLocation(java.lang.Object)>
<org.apache.maven.cli.MavenCli: void populateProperties(org.apache.commons.cli.CommandLine,java.util.Properties,java.util.Properties)>
<org.apache.maven.artifact.resolver.ArtifactResolutionResult: org.apache.maven.artifact.resolver.CyclicDependencyException getCircularDependencyException(int)>
<org.apache.maven.settings.io.xpp3.SettingsXpp3Reader: void checkUnknownAttribute(org.codehaus.plexus.util.xml.pull.XmlPullParser,java.lang.String,java.lang.String,boolean)>
<org.apache.maven.model.Build: void addExtension(org.apache.maven.model.Extension)>
<org.apache.maven.repository.internal.MavenAetherModule: void <init>()>
<org.apache.maven.repository.internal.VersionsMetadata: java.lang.String getGroupId()>
<org.apache.maven.project.artifact.DefaultMavenMetadataCache$CacheRecord: boolean isStale()>
<org.apache.maven.artifact.repository.metadata.io.xpp3.MetadataXpp3Reader: org.apache.maven.artifact.repository.metadata.Versioning parseVersioning(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.profiles.activation.FileProfileActivator: boolean isActive(org.apache.maven.model.Profile)>
<org.apache.maven.model.management.DefaultPluginManagementInjector$ManagementModelMerger: void mergePlugin_Executions(org.apache.maven.model.Plugin,org.apache.maven.model.Plugin,boolean,java.util.Map)>
<org.apache.maven.cli.internal.extension.model.io.xpp3.CoreExtensionsXpp3Writer: void write(java.io.Writer,org.apache.maven.cli.internal.extension.model.CoreExtensions)>
<org.apache.maven.artifact.manager.DefaultWagonManager: org.apache.maven.wagon.authentication.AuthenticationInfo getAuthenticationInfo(java.lang.String)>
<org.apache.maven.repository.legacy.DefaultWagonManager: void verifyChecksum(org.apache.maven.wagon.observers.ChecksumObserver,java.io.File,java.io.File,java.lang.String,java.lang.String,org.apache.maven.wagon.Wagon)>
<org.apache.maven.cli.MavenCli: void version(org.apache.maven.cli.CliRequest)>
<org.apache.maven.repository.MetadataGraph: void addNode(org.apache.maven.repository.MetadataGraphNode)>
<org.apache.maven.repository.internal.RelocatedArtifact: java.lang.String getGroupId()>
<org.apache.maven.lifecycle.internal.builder.BuilderCommon: void handleBuildError(org.apache.maven.lifecycle.internal.ReactorContext,org.apache.maven.execution.MavenSession,org.apache.maven.execution.MavenSession,org.apache.maven.project.MavenProject,java.lang.Throwable,long)>
<org.apache.maven.project.inheritance.DefaultModelInheritanceAssembler: void assembleDependencyManagementInheritance(org.apache.maven.model.Model,org.apache.maven.model.Model)>
<org.apache.maven.model.io.xpp3.MavenXpp3ReaderEx: org.apache.maven.model.PluginConfiguration parsePluginConfiguration(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean,org.apache.maven.model.InputSource)>
<org.apache.maven.repository.legacy.resolver.transform.DefaultArtifactTransformationManager: void transformForInstall(org.apache.maven.artifact.Artifact,org.apache.maven.artifact.repository.ArtifactRepository)>
<org.apache.maven.model.Model: void removeMailingList(org.apache.maven.model.MailingList)>
<org.apache.maven.repository.legacy.TransferListenerAdapter: void transferProgress(org.apache.maven.wagon.events.TransferEvent,byte[],int)>
<org.apache.maven.project.path.DefaultPathTranslator: void alignToBaseDirectory(org.apache.maven.model.Model,java.io.File)>
<org.apache.maven.lifecycle.internal.LifecycleDependencyResolver: java.util.Set getReactorProjectKeys(java.util.Collection)>
<org.apache.maven.model.io.xpp3.MavenXpp3Reader: org.apache.maven.model.Exclusion parseExclusion(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.model.Model: void addMailingList(org.apache.maven.model.MailingList)>
<org.apache.maven.model.Parent: org.apache.maven.model.InputLocation getLocation(java.lang.Object)>
<org.apache.maven.monitor.logging.DefaultLog: java.lang.String toString(java.lang.CharSequence)>
<org.apache.maven.settings.io.xpp3.SettingsXpp3Writer: void writeTrackableBase(org.apache.maven.settings.TrackableBase,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.execution.MavenSession: java.util.Map getPluginContext(org.apache.maven.plugin.descriptor.PluginDescriptor,org.apache.maven.project.MavenProject)>
<org.apache.maven.plugin.DefaultExtensionRealmCache: void flush()>
<org.apache.maven.lifecycle.internal.ExecutionPlanItem: java.util.List createExecutionPlanItems(org.apache.maven.project.MavenProject,java.util.List)>
<org.apache.maven.artifact.ArtifactUtils: java.util.Map artifactMapByVersionlessId(java.util.Collection)>
<org.apache.maven.project.inheritance.DefaultModelInheritanceAssembler: void mergeReportSetDefinitions(org.apache.maven.model.ReportSet,org.apache.maven.model.ReportSet)>
<org.apache.maven.cli.internal.extension.model.io.xpp3.CoreExtensionsXpp3Reader: org.apache.maven.cli.internal.extension.model.CoreExtensions read(java.io.Reader,boolean)>
<org.apache.maven.project.artifact.MavenMetadataSource: org.apache.maven.project.artifact.MavenMetadataSource$ProjectRelocation retrieveRelocatedProject(org.apache.maven.artifact.Artifact,org.apache.maven.repository.legacy.metadata.MetadataResolutionRequest)>
<org.apache.maven.repository.internal.ArtifactDescriptorReaderDelegate: org.eclipse.aether.graph.Dependency convert(org.apache.maven.model.Dependency,org.eclipse.aether.artifact.ArtifactTypeRegistry)>
<org.apache.maven.lifecycle.internal.LifecycleDebugLogger: void debugReactorPlan(org.apache.maven.lifecycle.internal.ProjectBuildList)>
<org.apache.maven.plugin.logging.SystemStreamLog: void print(java.lang.String,java.lang.Throwable)>
<org.apache.maven.model.Contributor: void addRole(java.lang.String)>
<org.apache.maven.cli.logging.Slf4jLogger: void warn(java.lang.String,java.lang.Throwable)>
<org.apache.maven.plugin.DefaultPluginRealmCache: void flush()>
<org.apache.maven.model.io.xpp3.MavenXpp3Reader: org.apache.maven.model.Model read(java.io.Reader,boolean)>
<org.apache.maven.model.profile.activation.OperatingSystemProfileActivator: boolean determineNameMatch(java.lang.String)>
<org.apache.maven.plugin.descriptor.PluginDescriptor: org.apache.maven.plugin.lifecycle.Lifecycle getLifecycleMapping(java.lang.String)>
<org.apache.maven.artifact.repository.metadata.io.xpp3.MetadataXpp3Writer: void writeSnapshot(org.apache.maven.artifact.repository.metadata.Snapshot,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.model.CiManagement: void setLocation(java.lang.Object,org.apache.maven.model.InputLocation)>
<org.apache.maven.model.DependencyManagement: org.apache.maven.model.DependencyManagement clone()>
<org.apache.maven.artifact.repository.LegacyLocalRepositoryManager$ArtifactRepositoryAdapter: java.lang.String getProtocol()>
<org.apache.maven.artifact.manager.DefaultWagonManager: org.apache.maven.artifact.repository.ArtifactRepository getMirrorRepository(org.apache.maven.artifact.repository.ArtifactRepository)>
<org.apache.maven.lifecycle.internal.MojoExecutor: java.util.Collection toScopes(java.lang.String)>
<org.apache.maven.profiles.io.xpp3.ProfilesXpp3Reader: int nextTag(org.codehaus.plexus.util.xml.pull.XmlPullParser)>
<org.apache.maven.plugin.DefaultPluginRealmCache$CacheKey: boolean eq(java.lang.Object,java.lang.Object)>
<org.apache.maven.cli.logging.Slf4jLogger: void info(java.lang.String)>
<org.apache.maven.model.io.xpp3.MavenXpp3Writer: void writeDistributionManagement(org.apache.maven.model.DistributionManagement,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.artifact.repository.metadata.io.xpp3.MetadataXpp3Writer: void writeSnapshotVersion(org.apache.maven.artifact.repository.metadata.SnapshotVersion,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.extension.internal.CoreExports: void <init>(org.codehaus.plexus.classworlds.realm.ClassRealm,java.util.Set,java.util.Set)>
<org.apache.maven.settings.io.xpp3.SettingsXpp3Writer: void writeSettings(org.apache.maven.settings.Settings,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.artifact.repository.metadata.io.xpp3.MetadataXpp3Reader: int nextTag(org.codehaus.plexus.util.xml.pull.XmlPullParser)>
<org.apache.maven.model.building.DefaultModelProblem: java.lang.String getMessage()>
<org.apache.maven.artifact.resolver.ResolutionNode: java.util.Iterator getChildrenIterator()>
<org.apache.maven.repository.legacy.resolver.DefaultLegacyArtifactCollector: org.apache.maven.artifact.resolver.ArtifactResolutionResult collect(java.util.Set,org.apache.maven.artifact.Artifact,java.util.Map,org.apache.maven.artifact.resolver.ArtifactResolutionRequest,org.apache.maven.artifact.metadata.ArtifactMetadataSource,org.apache.maven.artifact.resolver.filter.ArtifactFilter,java.util.List,java.util.List)>
<org.apache.maven.plugin.internal.DefaultMavenPluginManager: java.util.List resolveExtensionArtifacts(org.apache.maven.model.Plugin,java.util.List,org.eclipse.aether.RepositorySystemSession)>
<org.apache.maven.model.io.xpp3.MavenXpp3Writer: void writeRepositoryBase(org.apache.maven.model.RepositoryBase,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.bridge.MavenRepositorySystem: org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout getLayout(java.lang.String)>
<org.apache.maven.project.interpolation.AbstractStringBasedModelInterpolator: void <init>()>
<org.apache.maven.lifecycle.internal.LifecycleDependencyResolver$ReactorDependencyFilter: void <init>(java.util.Collection)>
<org.apache.maven.plugin.logging.SystemStreamLog: void error(java.lang.CharSequence)>
<org.apache.maven.plugin.DefaultProjectArtifactsCache: void assertUniqueKey(org.apache.maven.plugin.ProjectArtifactsCache$Key)>
<org.apache.maven.model.building.DefaultModelProblemCollector: void add(org.apache.maven.model.building.ModelProblem)>
<org.apache.maven.model.merge.MavenModelMerger: void mergeModelBase_Modules(org.apache.maven.model.ModelBase,org.apache.maven.model.ModelBase,boolean,java.util.Map)>
<org.apache.maven.eventspy.internal.EventSpyDispatcher: void logError(java.lang.String,java.lang.Throwable,org.apache.maven.eventspy.EventSpy)>
<org.apache.maven.project.artifact.DefaultMavenMetadataCache: int repositoriesHashCode(java.util.List)>
<org.apache.maven.plugin.DefaultProjectArtifactsCache: void flush()>
<org.apache.maven.model.io.xpp3.MavenXpp3ReaderEx: org.apache.maven.model.Developer parseDeveloper(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean,org.apache.maven.model.InputSource)>
<org.apache.maven.execution.DefaultMavenExecutionRequestPopulator: void injectDefaultPluginRepositories(org.apache.maven.execution.MavenExecutionRequest)>
<org.apache.maven.model.building.Result: org.apache.maven.model.building.Result addProblems(org.apache.maven.model.building.Result,org.apache.maven.model.building.Result[])>
<org.apache.maven.repository.legacy.LegacyRepositorySystem: org.apache.maven.repository.Proxy getProxy(org.eclipse.aether.RepositorySystemSession,org.apache.maven.artifact.repository.ArtifactRepository)>
<org.slf4j.impl.MavenSimpleLogger: void writeThrowable(java.lang.Throwable,java.io.PrintStream)>
<org.apache.maven.lifecycle.internal.DefaultLifecyclePluginAnalyzer: java.util.Set getPluginsBoundByDefaultToAllLifecycles(java.lang.String)>
<org.apache.maven.execution.ReactorManager: boolean hasBuildSuccess(org.apache.maven.project.MavenProject)>
<org.slf4j.impl.SimpleLoggerConfiguration: org.slf4j.impl.OutputChoice computeOutputChoice(java.lang.String,boolean)>
<org.apache.maven.DefaultArtifactFilterManager: org.apache.maven.artifact.resolver.filter.ArtifactFilter getArtifactFilter()>
<org.apache.maven.plugin.CacheUtils: int repositoriesHashCode(java.util.List)>
<org.apache.maven.model.io.xpp3.MavenXpp3Writer: void writeBuild(org.apache.maven.model.Build,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.RepositoryUtils: org.eclipse.aether.graph.Exclusion toExclusion(org.apache.maven.model.Exclusion)>
<org.apache.maven.project.MavenProject: java.util.List getRuntimeClasspathElements()>
<org.apache.maven.plugin.DefaultPluginDescriptorCache: void flush()>
<org.apache.maven.project.MavenProject: void addAttachedArtifact(org.apache.maven.artifact.Artifact)>
<org.apache.maven.building.Problem$Severity: org.apache.maven.building.Problem$Severity[] values()>
<org.apache.maven.model.PluginExecution: void addGoal(java.lang.String)>
<org.apache.maven.project.DefaultProjectDependenciesResolver$GraphLogger: boolean visitEnter(org.eclipse.aether.graph.DependencyNode)>
<org.apache.maven.toolchain.model.io.xpp3.MavenToolchainsXpp3Reader: short getShortValue(java.lang.String,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.settings.Settings: void addMirror(org.apache.maven.settings.Mirror)>
<org.apache.maven.model.PluginContainer: void addPlugin(org.apache.maven.model.Plugin)>
<org.apache.maven.execution.DefaultMavenExecutionRequest: org.apache.maven.execution.MavenExecutionRequest addProfile(org.apache.maven.model.Profile)>
<org.apache.maven.profiles.io.xpp3.ProfilesXpp3Writer: void writeRepository(org.apache.maven.profiles.Repository,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.model.merge.ModelMerger: void mergeReportSet_Reports(org.apache.maven.model.ReportSet,org.apache.maven.model.ReportSet,boolean,java.util.Map)>
<org.apache.maven.settings.Settings: void addServer(org.apache.maven.settings.Server)>
<org.apache.maven.session.scope.internal.SessionScopeModule: void <init>(org.codehaus.plexus.PlexusContainer)>
<org.apache.maven.model.profile.activation.OperatingSystemProfileActivator: boolean determineVersionMatch(java.lang.String)>
<org.apache.maven.model.validation.DefaultModelValidator: void validate20EffectivePluginDependencies(org.apache.maven.model.building.ModelProblemCollector,org.apache.maven.model.Plugin,org.apache.maven.model.building.ModelBuildingRequest)>
<org.apache.maven.plugin.DefaultPluginArtifactsCache: org.apache.maven.plugin.PluginArtifactsCache$CacheRecord put(org.apache.maven.plugin.PluginArtifactsCache$Key,java.util.List)>
<org.apache.maven.model.PatternSet: void removeInclude(java.lang.String)>
<org.apache.maven.lifecycle.internal.LifecycleDependencyResolver$ReactorDependencyFilter: boolean accept(org.eclipse.aether.graph.DependencyNode,java.util.List)>
<org.apache.maven.DefaultMaven: void validateActivatedProfiles(java.util.List,java.util.List)>
<org.apache.maven.plugin.CacheUtils: int repositoryHashCode(org.eclipse.aether.repository.RemoteRepository)>
<org.apache.maven.classrealm.DefaultClassRealmManager: void wireRealm(org.codehaus.plexus.classworlds.realm.ClassRealm,java.util.List,java.util.Map)>
<org.apache.maven.settings.building.DefaultSettingsBuilder: org.apache.maven.settings.Settings readSettings(org.apache.maven.building.Source,org.apache.maven.settings.building.SettingsBuildingRequest,org.apache.maven.settings.building.DefaultSettingsProblemCollector)>
<org.apache.maven.plugin.lifecycle.Phase: void addExecution(org.apache.maven.plugin.lifecycle.Execution)>
<org.apache.maven.repository.internal.DefaultModelCache: void put(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)>
<org.apache.maven.plugin.DefaultPluginArtifactsCache: org.apache.maven.plugin.PluginArtifactsCache$CacheRecord put(org.apache.maven.plugin.PluginArtifactsCache$Key,org.apache.maven.plugin.PluginResolutionException)>
<org.apache.maven.model.io.xpp3.MavenXpp3ReaderEx: org.apache.maven.model.Prerequisites parsePrerequisites(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean,org.apache.maven.model.InputSource)>
<org.apache.maven.plugin.DefaultPluginRealmCache$CacheKey: int hash(java.lang.Object)>
<org.apache.maven.model.ActivationFile: void setLocation(java.lang.Object,org.apache.maven.model.InputLocation)>
<org.apache.maven.profiles.io.xpp3.ProfilesXpp3Reader: java.util.Date getDateValue(java.lang.String,java.lang.String,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlPullParser)>
<org.apache.maven.artifact.versioning.VersionRange: boolean equals(java.lang.Object)>
<org.apache.maven.DefaultMaven: org.apache.maven.model.building.Result buildGraph(org.apache.maven.execution.MavenSession,org.apache.maven.execution.MavenExecutionResult)>
<org.apache.maven.cli.transfer.AbstractMavenTransferListener: void transferSucceeded(org.eclipse.aether.transfer.TransferEvent)>
<org.apache.maven.classrealm.DefaultClassRealmManager: java.util.Set populateRealm(org.codehaus.plexus.classworlds.realm.ClassRealm,java.util.List)>
<org.apache.maven.repository.internal.DefaultArtifactDescriptorReader: org.eclipse.aether.resolution.ArtifactDescriptorResult readArtifactDescriptor(org.eclipse.aether.RepositorySystemSession,org.eclipse.aether.resolution.ArtifactDescriptorRequest)>
<org.apache.maven.project.artifact.DefaultMavenMetadataCache: int repositoryHashCode(org.apache.maven.artifact.repository.ArtifactRepository)>
<org.apache.maven.artifact.resolver.ArtifactResolutionResult: org.apache.maven.artifact.resolver.ArtifactResolutionResult addErrorArtifactException(org.apache.maven.artifact.resolver.ArtifactResolutionException)>
<org.apache.maven.project.artifact.DefaultMavenMetadataCache$CacheKey: void <init>(org.apache.maven.artifact.Artifact,boolean,org.apache.maven.artifact.repository.ArtifactRepository,java.util.List)>
<org.apache.maven.repository.legacy.LegacyRepositorySystem: void injectProxy(java.util.List,java.util.List)>
<org.apache.maven.model.Organization: org.apache.maven.model.InputLocation getLocation(java.lang.Object)>
<org.apache.maven.model.io.xpp3.MavenXpp3Reader: org.apache.maven.model.Resource parseResource(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.model.building.DefaultModelBuilder: void injectProfileActivations(org.apache.maven.model.Model,java.util.Map)>
<org.apache.maven.model.io.xpp3.MavenXpp3Writer: void writeConfigurationContainer(org.apache.maven.model.ConfigurationContainer,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.model.Model: void addContributor(org.apache.maven.model.Contributor)>
<org.apache.maven.model.io.xpp3.MavenXpp3Writer: void writeDeploymentRepository(org.apache.maven.model.DeploymentRepository,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.model.io.xpp3.MavenXpp3ReaderEx: org.apache.maven.model.Relocation parseRelocation(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean,org.apache.maven.model.InputSource)>
<org.apache.maven.classrealm.ArtifactClassRealmConstituent: java.lang.String toString()>
<org.apache.maven.model.io.xpp3.MavenXpp3ReaderEx: org.apache.maven.model.PluginExecution parsePluginExecution(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean,org.apache.maven.model.InputSource)>
<org.apache.maven.model.Relocation: org.apache.maven.model.InputLocation getLocation(java.lang.Object)>
<org.apache.maven.model.interpolation.UrlNormalizingPostProcessor: java.lang.Object execute(java.lang.String,java.lang.Object)>
<org.apache.maven.model.io.xpp3.MavenXpp3Reader: org.apache.maven.model.Model read(java.io.InputStream,boolean)>
<org.apache.maven.plugin.descriptor.PluginDescriptor: void <init>()>
<org.apache.maven.model.io.xpp3.MavenXpp3Reader: org.apache.maven.model.Developer parseDeveloper(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.RepositoryUtils: org.apache.maven.artifact.Artifact toArtifact(org.eclipse.aether.artifact.Artifact)>
<org.apache.maven.model.building.ModelBuildingException: java.lang.String getModelId()>
<org.apache.maven.lifecycle.internal.ReactorBuildStatus: boolean isBlackListed(org.apache.maven.project.MavenProject)>
<org.apache.maven.model.building.DefaultModelBuilder: void configureResolver(org.apache.maven.model.resolution.ModelResolver,org.apache.maven.model.Model,org.apache.maven.model.building.DefaultModelProblemCollector,boolean)>
<org.apache.maven.classrealm.ArtifactClassRealmConstituent: java.lang.String getArtifactId()>
<org.apache.maven.cli.event.ExecutionEventLogger: void forkSucceeded(org.apache.maven.execution.ExecutionEvent)>
<org.apache.maven.cli.MavenCli: void logging(org.apache.maven.cli.CliRequest)>
<org.apache.maven.repository.internal.RelocatedArtifact: java.lang.String getProperty(java.lang.String,java.lang.String)>
<org.apache.maven.cli.event.ExecutionEventLogger: void sessionStarted(org.apache.maven.execution.ExecutionEvent)>
<org.apache.maven.plugin.version.internal.DefaultPluginVersionResolver: boolean isCompatible(org.apache.maven.plugin.version.PluginVersionRequest,java.lang.String)>
<org.apache.maven.profiles.activation.OperatingSystemProfileActivator: boolean determineFamilyMatch(java.lang.String)>
<org.apache.maven.repository.metadata.MetadataGraph: boolean isEmptyEdges()>
<org.apache.maven.execution.DefaultMavenExecutionRequestPopulator: void injectDefaultRepositories(org.apache.maven.execution.MavenExecutionRequest)>
<org.apache.maven.model.Model: void removeDeveloper(org.apache.maven.model.Developer)>
<org.apache.maven.model.inheritance.DefaultInheritanceAssembler$InheritanceModelMerger: void mergeReporting_Plugins(org.apache.maven.model.Reporting,org.apache.maven.model.Reporting,boolean,java.util.Map)>
<org.apache.maven.RepositoryUtils: org.eclipse.aether.repository.RemoteRepository toRepo(org.apache.maven.artifact.repository.ArtifactRepository)>
<org.apache.maven.settings.io.DefaultSettingsReader: org.apache.maven.settings.Settings read(java.io.File,java.util.Map)>
<org.apache.maven.repository.MetadataResolutionResult: org.apache.maven.artifact.resolver.CyclicDependencyException getCircularDependencyException(int)>
<org.apache.maven.usability.plugin.io.xpp3.ParamdocXpp3Reader: org.apache.maven.usability.plugin.ExpressionDocumentation read(java.io.Reader,boolean)>
<org.apache.maven.model.io.xpp3.MavenXpp3Writer: void writeContributor(org.apache.maven.model.Contributor,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.project.interpolation.BuildTimestampValueSource: void <init>(java.util.Date,java.lang.String)>
<org.apache.maven.model.io.xpp3.MavenXpp3Reader: int getIntegerValue(java.lang.String,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.model.validation.DefaultModelValidator: void validateEffectiveModel(org.apache.maven.model.Model,org.apache.maven.model.building.ModelBuildingRequest,org.apache.maven.model.building.ModelProblemCollector)>
<org.apache.maven.artifact.resolver.ArtifactResolutionResult: void addArtifact(org.apache.maven.artifact.Artifact)>
<org.apache.maven.project.ProjectUtils: org.eclipse.aether.RepositorySystemSession rss(org.codehaus.plexus.PlexusContainer)>
<org.apache.maven.artifact.repository.metadata.io.xpp3.MetadataXpp3Writer: void write(java.io.OutputStream,org.apache.maven.artifact.repository.metadata.Metadata)>
<org.apache.maven.model.plugin.DefaultLifecycleBindingsInjector: void injectLifecycleBindings(org.apache.maven.model.Model,org.apache.maven.model.building.ModelBuildingRequest,org.apache.maven.model.building.ModelProblemCollector)>
<org.apache.maven.eventspy.internal.EventSpyRepositoryListener: void artifactDownloading(org.eclipse.aether.RepositoryEvent)>
<org.apache.maven.cli.event.ExecutionEventLogger: void <init>()>
<org.apache.maven.cli.event.ExecutionEventLogger: void appendForkInfo(org.apache.maven.shared.utils.logging.MessageBuilder,org.apache.maven.plugin.descriptor.MojoDescriptor)>
<org.apache.maven.repository.MetadataResolutionResult: boolean hasExceptions()>
<org.apache.maven.plugin.prefix.internal.DefaultPluginPrefixResolver: org.apache.maven.plugin.prefix.PluginPrefixResult resolveFromProject(org.apache.maven.plugin.prefix.PluginPrefixRequest,java.util.List)>
<org.apache.maven.repository.internal.ArtifactDescriptorReaderDelegate: org.eclipse.aether.graph.Exclusion convert(org.apache.maven.model.Exclusion)>
<org.apache.maven.toolchain.model.io.xpp3.MavenToolchainsXpp3Reader: org.apache.maven.toolchain.model.PersistedToolchains read(java.io.Reader,boolean)>
<org.apache.maven.artifact.repository.metadata.io.DefaultMetadataReader: org.apache.maven.artifact.repository.metadata.Metadata read(java.io.Reader,java.util.Map)>
<org.apache.maven.settings.io.xpp3.SettingsXpp3Writer: void writeRepositoryBase(org.apache.maven.settings.RepositoryBase,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.plugin.internal.DefaultMavenPluginManager: void createPluginRealm(org.apache.maven.plugin.descriptor.PluginDescriptor,org.apache.maven.execution.MavenSession,java.lang.ClassLoader,java.util.Map,org.eclipse.aether.graph.DependencyFilter)>
<org.apache.maven.repository.MetadataResolutionResult: org.apache.maven.artifact.resolver.ArtifactResolutionException getMetadataResolutionException(int)>
<org.apache.maven.building.DefaultProblemCollector: void add(org.apache.maven.building.Problem$Severity,java.lang.String,int,int,java.lang.Exception)>
<org.apache.maven.usability.plugin.ExpressionDocumentation: java.util.Map getExpressionsBySyntax()>
<org.apache.maven.lifecycle.internal.LifecycleDependencyResolver: void resolveProjectDependencies(org.apache.maven.project.MavenProject,java.util.Collection,java.util.Collection,org.apache.maven.execution.MavenSession,boolean,java.util.Set)>
<org.apache.maven.model.PatternSet: void removeExclude(java.lang.String)>
<org.apache.maven.model.ReportPlugin: void addReportSet(org.apache.maven.model.ReportSet)>
<org.apache.maven.graph.FilteredProjectDependencyGraph: void <init>(org.apache.maven.execution.ProjectDependencyGraph,java.util.Collection)>
<org.apache.maven.repository.legacy.resolver.transform.SnapshotTransformation: int resolveLatestSnapshotBuildNumber(org.apache.maven.artifact.Artifact,org.apache.maven.artifact.repository.ArtifactRepository,org.apache.maven.artifact.repository.ArtifactRepository)>
<org.apache.maven.usability.plugin.io.xpp3.ParamdocXpp3Reader: short getShortValue(java.lang.String,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.model.io.xpp3.MavenXpp3Writer: void writeReportSet(org.apache.maven.model.ReportSet,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.model.Model: void addLicense(org.apache.maven.model.License)>
<org.apache.maven.artifact.resolver.DebugResolutionListener: void omitForNearer(org.apache.maven.artifact.Artifact,org.apache.maven.artifact.Artifact)>
<org.apache.maven.artifact.ArtifactUtils: java.util.List copyList(java.util.List)>
<org.apache.maven.model.profile.activation.JdkVersionProfileActivator: boolean isActive(org.apache.maven.model.Profile,org.apache.maven.model.profile.ProfileActivationContext,org.apache.maven.model.building.ModelProblemCollector)>
<org.apache.maven.repository.internal.LocalSnapshotMetadata: void bind(org.eclipse.aether.artifact.Artifact)>
<org.apache.maven.model.io.DefaultModelReader: org.apache.maven.model.Model read(java.io.Reader,java.util.Map)>
<org.apache.maven.project.ProjectUtils: org.apache.maven.repository.RepositorySystem rs(org.codehaus.plexus.PlexusContainer)>
<org.apache.maven.model.ModelBase: void addModule(java.lang.String)>
<org.apache.maven.model.io.xpp3.MavenXpp3ReaderEx: org.apache.maven.model.RepositoryPolicy parseRepositoryPolicy(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean,org.apache.maven.model.InputSource)>
<org.apache.maven.settings.io.xpp3.SettingsXpp3Writer: void writeIdentifiableBase(org.apache.maven.settings.IdentifiableBase,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.plugin.DefaultPluginArtifactsCache$CacheKey: int hash(java.lang.Object)>
<org.slf4j.impl.SimpleLogger: void log(org.slf4j.event.LoggingEvent)>
<org.apache.maven.profiles.DefaultProfileManager: void explicitlyDeactivate(java.util.List)>
<org.apache.maven.settings.io.xpp3.SettingsXpp3Reader: org.apache.maven.settings.Activation parseActivation(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.model.Plugin: org.apache.maven.model.Plugin clone()>
<org.apache.maven.model.DependencyManagement: void addDependency(org.apache.maven.model.Dependency)>
<org.apache.maven.cli.CLIReportingUtils: void showError(org.slf4j.Logger,java.lang.String,java.lang.Throwable,boolean)>
<org.apache.maven.model.normalization.DefaultModelNormalizer: void injectDefaultValues(org.apache.maven.model.Model,org.apache.maven.model.building.ModelBuildingRequest,org.apache.maven.model.building.ModelProblemCollector)>
<org.apache.maven.plugin.internal.PlexusUtilsInjector: org.eclipse.aether.graph.DependencyNode findPlexusUtils(org.eclipse.aether.graph.DependencyNode)>
<org.apache.maven.settings.Settings: void addActiveProfile(java.lang.String)>
<org.apache.maven.repository.metadata.MetadataGraph: java.lang.String toString()>
<org.apache.maven.settings.io.DefaultSettingsWriter: void write(java.io.File,java.util.Map,org.apache.maven.settings.Settings)>
<org.apache.maven.repository.MetadataResolutionResult: org.apache.maven.repository.MetadataResolutionResult addMetadataResolutionException(org.apache.maven.artifact.resolver.ArtifactResolutionException)>
<org.apache.maven.repository.MetadataResolutionResult: org.apache.maven.artifact.versioning.OverConstrainedVersionException getVersionRangeViolation(int)>
<org.apache.maven.repository.metadata.MetadataResolutionRequestTypeEnum: org.apache.maven.repository.metadata.MetadataResolutionRequestTypeEnum[] values()>
<org.apache.maven.eventspy.internal.EventSpyRepositoryListener: void metadataResolved(org.eclipse.aether.RepositoryEvent)>
<org.apache.maven.plugin.CacheUtils: boolean repositoryEquals(org.eclipse.aether.repository.RemoteRepository,org.eclipse.aether.repository.RemoteRepository)>
<org.apache.maven.model.building.DefaultModelProblemCollector: void addAll(java.util.List)>
<org.apache.maven.plugin.prefix.internal.DefaultPluginPrefixResolver: void invalidMetadata(org.eclipse.aether.RepositorySystemSession,org.eclipse.aether.RequestTrace,org.eclipse.aether.metadata.Metadata,org.eclipse.aether.repository.ArtifactRepository,java.lang.Exception)>
<org.apache.maven.model.Plugin: void addExecution(org.apache.maven.model.PluginExecution)>
<org.apache.maven.exception.DefaultExceptionHandler: java.lang.String getMessage(java.lang.String,java.lang.Throwable)>
<org.apache.maven.cli.event.ExecutionEventLogger: void forkStarted(org.apache.maven.execution.ExecutionEvent)>
<org.apache.maven.plugin.DefaultExtensionRealmCache$CacheKey: java.lang.String toString()>
<org.apache.maven.monitor.logging.DefaultLog: void info(java.lang.CharSequence,java.lang.Throwable)>
<org.apache.maven.artifact.repository.metadata.Metadata: void addPlugin(org.apache.maven.artifact.repository.metadata.Plugin)>
<org.apache.maven.bridge.MavenRepositorySystem: org.apache.maven.artifact.repository.ArtifactRepository buildArtifactRepository(org.apache.maven.model.Repository)>
<org.apache.maven.plugin.prefix.internal.DefaultPluginPrefixResolver: org.apache.maven.plugin.prefix.PluginPrefixResult resolve(org.apache.maven.plugin.prefix.PluginPrefixRequest)>
<org.apache.maven.profiles.io.xpp3.ProfilesXpp3Writer: void writeActivationProperty(org.apache.maven.profiles.ActivationProperty,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.lifecycle.MavenExecutionPlan: org.apache.maven.lifecycle.internal.ExecutionPlanItem findLastInPhase(java.lang.String)>
<org.apache.maven.exception.DefaultExceptionHandler: org.apache.maven.exception.ExceptionSummary handle(java.lang.String,java.lang.Throwable)>
<org.apache.maven.toolchain.building.DefaultToolchainsBuilder: org.apache.maven.toolchain.model.PersistedToolchains readToolchains(org.apache.maven.building.Source,org.apache.maven.toolchain.building.ToolchainsBuildingRequest,org.apache.maven.building.ProblemCollector)>
<org.apache.maven.repository.legacy.WagonConfigurationException: void <init>(java.lang.String,java.lang.String)>
<org.apache.maven.plugin.lifecycle.io.xpp3.LifecycleMappingsXpp3Reader: org.apache.maven.plugin.lifecycle.LifecycleConfiguration read(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.repository.internal.MavenRepositorySystemUtils: org.eclipse.aether.DefaultRepositorySystemSession newSession()>
<org.apache.maven.toolchain.model.io.xpp3.MavenToolchainsXpp3Reader: double getDoubleValue(java.lang.String,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.project.ModelUtils: void mergePluginExecutionDefinitions(org.apache.maven.model.PluginExecution,org.apache.maven.model.PluginExecution)>
<org.apache.maven.artifact.resolver.filter.IncludesArtifactFilter: boolean equals(java.lang.Object)>
<org.apache.maven.lifecycle.internal.ProjectBuildList: java.util.Map selectSegment(org.apache.maven.lifecycle.internal.TaskSegment)>
<org.apache.maven.plugin.DefaultPluginDescriptorCache$CacheKey: int hash(java.lang.Object)>
<org.apache.maven.model.validation.DefaultModelValidator: boolean equals(java.lang.String,java.lang.String)>
<org.apache.maven.repository.internal.DefaultVersionResolver$Record: void <init>(java.lang.String,org.eclipse.aether.repository.ArtifactRepository)>
<org.apache.maven.bridge.MavenRepositorySystem: java.util.Set getRepoIds(java.util.List)>
<org.apache.maven.cli.internal.extension.model.io.xpp3.CoreExtensionsXpp3Reader: org.apache.maven.cli.internal.extension.model.CoreExtensions read(java.io.InputStream)>
<org.apache.maven.project.inheritance.DefaultModelInheritanceAssembler: void assembleModelInheritance(org.apache.maven.model.Model,org.apache.maven.model.Model,java.lang.String,boolean)>
<org.apache.maven.lifecycle.internal.CompoundProjectExecutionListener: void beforeProjectLifecycleExecution(org.apache.maven.execution.ProjectExecutionEvent)>
<org.apache.maven.cli.internal.BootstrapCoreExtensionManager: java.util.List resolveExtension(org.apache.maven.cli.internal.extension.model.CoreExtension,org.eclipse.aether.RepositorySystemSession,java.util.List,org.eclipse.aether.graph.DependencyFilter)>
<org.apache.maven.lifecycle.internal.LifecycleDependencyResolver: java.util.Collection negate(java.util.Collection)>
<org.apache.maven.cli.logging.Slf4jLogger: void error(java.lang.String)>
<org.apache.maven.artifact.resolver.ResolutionNode: void <init>(org.apache.maven.artifact.Artifact,java.util.List,org.apache.maven.artifact.resolver.ResolutionNode)>
<org.apache.maven.settings.validation.DefaultSettingsValidator: void validateRepositories(org.apache.maven.settings.building.SettingsProblemCollector,java.util.List,java.lang.String)>
<org.apache.maven.cli.transfer.ConsoleMavenTransferListener: void transferFailed(org.eclipse.aether.transfer.TransferEvent)>
<org.apache.maven.execution.scope.internal.MojoExecutionScopeCoreModule: void configure()>
<org.apache.maven.project.ProjectSorter: void addEdge(org.codehaus.plexus.util.dag.Vertex,org.codehaus.plexus.util.dag.Vertex,org.apache.maven.project.MavenProject,java.util.Map,boolean,boolean)>
<org.apache.maven.settings.io.xpp3.SettingsXpp3Reader: org.apache.maven.settings.Mirror parseMirror(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.lifecycle.mapping.LifecyclePhase: void set(java.lang.String)>
<org.apache.maven.bridge.MavenRepositorySystem: org.apache.maven.artifact.Artifact createDependencyArtifact(org.apache.maven.model.Dependency)>
<org.apache.maven.model.io.xpp3.MavenXpp3Writer: void writePluginContainer(org.apache.maven.model.PluginContainer,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.artifact.repository.metadata.Metadata: org.apache.maven.artifact.repository.metadata.Metadata clone()>
<org.apache.maven.project.artifact.ProjectArtifactMetadata: void storeInLocalRepository(org.apache.maven.artifact.repository.ArtifactRepository,org.apache.maven.artifact.repository.ArtifactRepository)>
<org.apache.maven.model.Model: void addProfile(org.apache.maven.model.Profile)>
<org.apache.maven.project.DefaultProjectBuildingRequest: org.apache.maven.project.ProjectBuildingRequest setPluginArtifactRepositories(java.util.List)>
<org.apache.maven.monitor.logging.DefaultLog: boolean isWarnEnabled()>
<org.apache.maven.model.DependencyManagement: void removeDependency(org.apache.maven.model.Dependency)>
<org.apache.maven.repository.internal.DefaultVersionResolver: org.eclipse.aether.resolution.VersionResult resolveVersion(org.eclipse.aether.RepositorySystemSession,org.eclipse.aether.resolution.VersionRequest)>
<org.apache.maven.repository.internal.RemoteSnapshotMetadataGenerator: void <init>(org.eclipse.aether.RepositorySystemSession,org.eclipse.aether.deployment.DeployRequest)>
<org.apache.maven.artifact.repository.metadata.Versioning: void addVersion(java.lang.String)>
<org.apache.maven.project.MavenProject: void addPath(java.util.List,java.lang.String)>
<org.apache.maven.model.merge.MavenModelMerger: void mergeBuildBase_Filters(org.apache.maven.model.BuildBase,org.apache.maven.model.BuildBase,boolean,java.util.Map)>
<org.apache.maven.settings.crypto.DefaultSettingsDecryptionResult: org.apache.maven.settings.Server getServer()>
<org.apache.maven.execution.scope.internal.MojoExecutionScopeModule: void configure()>
<org.apache.maven.internal.aether.LoggingRepositoryListener: void artifactDescriptorInvalid(org.eclipse.aether.RepositoryEvent)>
<org.apache.maven.model.io.xpp3.MavenXpp3ReaderEx: void checkUnknownElement(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.plugin.internal.DefaultPluginManager: java.lang.Object getPluginComponent(org.apache.maven.model.Plugin,java.lang.String,java.lang.String)>
<org.apache.maven.cli.transfer.AbstractMavenTransferListener: void <init>(java.io.PrintStream)>
<org.apache.maven.artifact.resolver.DebugResolutionListener: void restrictRange(org.apache.maven.artifact.Artifact,org.apache.maven.artifact.Artifact,org.apache.maven.artifact.versioning.VersionRange)>
<org.apache.maven.lifecycle.internal.builder.multithreaded.MultiThreadedBuilder: void build(org.apache.maven.execution.MavenSession,org.apache.maven.lifecycle.internal.ReactorContext,org.apache.maven.lifecycle.internal.ProjectBuildList,java.util.List,org.apache.maven.lifecycle.internal.ReactorBuildStatus)>
<org.apache.maven.model.InputLocation: org.apache.maven.model.InputLocation merge(org.apache.maven.model.InputLocation,org.apache.maven.model.InputLocation,java.util.Collection)>
<org.apache.maven.model.ActivationOS: org.apache.maven.model.InputLocation getLocation(java.lang.Object)>
<org.apache.maven.model.io.xpp3.MavenXpp3ReaderEx: byte getByteValue(java.lang.String,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.bridge.MavenRepositorySystem: boolean isExternalRepo(org.apache.maven.artifact.repository.ArtifactRepository)>
<org.apache.maven.artifact.resolver.filter.AndArtifactFilter: int hashCode()>
<org.apache.maven.project.DefaultProjectBuildingRequest: void setProfiles(java.util.List)>
<org.apache.maven.model.io.xpp3.MavenXpp3Reader: void checkUnknownAttribute(org.codehaus.plexus.util.xml.pull.XmlPullParser,java.lang.String,java.lang.String,boolean)>
<org.apache.maven.project.interpolation.AbstractStringBasedModelInterpolator$3: void <init>(org.apache.maven.project.interpolation.AbstractStringBasedModelInterpolator,boolean,org.apache.maven.project.ProjectBuilderConfiguration)>
<org.apache.maven.repository.legacy.DefaultWagonManager: void getArtifact(org.apache.maven.artifact.Artifact,java.util.List,org.apache.maven.wagon.events.TransferListener,boolean)>
<org.apache.maven.repository.legacy.DefaultWagonManager: void handleChecksumFailure(java.lang.String,java.lang.String,java.lang.Throwable)>
<org.apache.maven.session.scope.internal.SessionScope: void seed(java.lang.Class,com.google.inject.Provider)>
<org.apache.maven.plugin.descriptor.MojoDescriptor: void addParameter(org.apache.maven.plugin.descriptor.Parameter)>
<org.apache.maven.plugin.internal.DefaultMavenPluginManager: java.util.Map calcImports(org.apache.maven.project.MavenProject,java.lang.ClassLoader,java.util.List)>
<org.apache.maven.toolchain.building.ToolchainsBuildingException: void <init>(java.util.List)>
<org.apache.maven.cli.logging.impl.LogbackConfiguration: void setRootLoggerLevel(org.apache.maven.cli.logging.Slf4jConfiguration$Level)>
<org.apache.maven.artifact.resolver.ArtifactResolutionResult: org.apache.maven.artifact.resolver.ArtifactResolutionResult addCircularDependencyException(org.apache.maven.artifact.resolver.CyclicDependencyException)>
<org.apache.maven.project.ProjectUtils: java.util.List buildArtifactRepositories(java.util.List,org.apache.maven.artifact.repository.ArtifactRepositoryFactory,org.codehaus.plexus.PlexusContainer)>
<org.apache.maven.plugin.DefaultPluginDescriptorCache: java.util.List clone(java.util.List,org.apache.maven.plugin.descriptor.PluginDescriptor)>
<org.apache.maven.cli.transfer.AbstractMavenTransferListener$FileSizeFormat: java.lang.String formatProgress(long,long)>
<org.apache.maven.model.ReportPlugin: java.util.Map getReportSetsAsMap()>
<org.apache.maven.plugin.internal.PluginDependencyResolutionListener: void includeArtifact(org.apache.maven.artifact.Artifact)>
<org.slf4j.impl.StaticMDCBinder: org.slf4j.spi.MDCAdapter getMDCA()>
<org.apache.maven.project.ProjectModelResolver: org.apache.maven.model.building.ModelSource resolveModel(java.lang.String,java.lang.String,java.lang.String)>
<org.apache.maven.profiles.io.xpp3.ProfilesXpp3Reader: double getDoubleValue(java.lang.String,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.artifact.repository.DefaultArtifactRepository: void <init>(java.lang.String,java.lang.String,org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout,org.apache.maven.artifact.repository.ArtifactRepositoryPolicy,org.apache.maven.artifact.repository.ArtifactRepositoryPolicy)>
<org.apache.maven.model.Reporting: void removePlugin(org.apache.maven.model.ReportPlugin)>
<org.apache.maven.toolchain.DefaultToolchainManager: org.apache.maven.toolchain.Toolchain getToolchainFromBuildContext(java.lang.String,org.apache.maven.execution.MavenSession)>
<org.apache.maven.model.io.xpp3.MavenXpp3Writer: void writeLicense(org.apache.maven.model.License,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlSerializer)>
<org.apache.maven.artifact.resolver.DebugResolutionListener: void manageArtifactSystemPath(org.apache.maven.artifact.Artifact,org.apache.maven.artifact.Artifact)>
<org.apache.maven.lifecycle.internal.TaskSegment: java.lang.String toString()>
<org.apache.maven.usability.plugin.io.xpp3.ParamdocXpp3Reader: org.apache.maven.usability.plugin.ExpressionDocumentation read(java.io.InputStream,boolean)>
<org.apache.maven.artifact.repository.LegacyLocalRepositoryManager$ArtifactMetadataAdapter: boolean storedInGroupDirectory()>
<org.apache.maven.settings.io.xpp3.SettingsXpp3Reader: short getShortValue(java.lang.String,java.lang.String,org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.model.io.xpp3.MavenXpp3Reader: org.apache.maven.model.Model read(java.io.InputStream)>
<org.apache.maven.project.ExtensionDescriptorBuilder: org.apache.maven.project.ExtensionDescriptor build(java.io.InputStream)>
<org.apache.maven.plugin.internal.DefaultPluginDependenciesResolver: org.eclipse.aether.graph.DependencyNode resolveInternal(org.apache.maven.model.Plugin,org.eclipse.aether.artifact.Artifact,org.eclipse.aether.graph.DependencyFilter,org.eclipse.aether.collection.DependencyGraphTransformer,java.util.List,org.eclipse.aether.RepositorySystemSession)>
<org.apache.maven.plugin.prefix.internal.DefaultPluginPrefixResolver: org.apache.maven.plugin.prefix.PluginPrefixResult processResults(org.apache.maven.plugin.prefix.PluginPrefixRequest,org.eclipse.aether.RequestTrace,java.util.List,java.util.List)>
<org.apache.maven.settings.Settings: void addPluginGroup(java.lang.String)>
<org.apache.maven.repository.legacy.resolver.transform.DefaultArtifactTransformationManager: void transformForResolve(org.apache.maven.artifact.Artifact,java.util.List,org.apache.maven.artifact.repository.ArtifactRepository)>
<org.apache.maven.repository.MetadataGraph: org.apache.maven.repository.MetadataGraphNode findNode(org.apache.maven.repository.MavenArtifactMetadata)>
<org.apache.maven.plugin.lifecycle.io.xpp3.LifecycleMappingsXpp3Reader: org.apache.maven.plugin.lifecycle.Execution parseExecution(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.execution.DefaultMavenExecutionResult: void addBuildSummary(org.apache.maven.execution.BuildSummary)>
<org.apache.maven.cli.transfer.Slf4jMavenTransferListener: void <init>()>
<org.apache.maven.lifecycle.internal.builder.multithreaded.ThreadOutputMuxer: void setThisModuleComplete(org.apache.maven.lifecycle.internal.ProjectSegment)>
<org.apache.maven.toolchain.model.io.xpp3.MavenToolchainsXpp3Reader: org.apache.maven.toolchain.model.PersistedToolchains read(java.io.InputStream,boolean)>
<org.apache.maven.project.DefaultProjectBuildingRequest: void addProfile(org.apache.maven.model.Profile)>
<org.apache.maven.classrealm.DefaultClassRealmManager: boolean isProvidedArtifact(org.eclipse.aether.artifact.Artifact)>
<org.apache.maven.project.DefaultProjectBuilder: java.lang.String inheritedVersion(org.apache.maven.model.building.ModelBuildingResult,int)>
<org.apache.maven.repository.internal.VersionsMetadata: java.lang.Object getKey(org.eclipse.aether.artifact.Artifact)>
<org.apache.maven.artifact.repository.LegacyLocalRepositoryManager$ArtifactMetadataAdapter: java.lang.String getBaseVersion()>
<org.apache.maven.profiles.io.xpp3.ProfilesXpp3Reader: org.apache.maven.profiles.RepositoryPolicy parseRepositoryPolicy(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)>
<org.apache.maven.artifact.repository.LegacyLocalRepositoryManager: void <init>(org.apache.maven.artifact.repository.ArtifactRepository)>
<org.apache.maven.cli.MavenCli$1: void configure()>
